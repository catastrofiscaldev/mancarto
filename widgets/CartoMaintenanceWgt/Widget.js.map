{"version":3,"sources":["../../../widgets/CartoMaintenanceWgt/Widget.js"],"names":["declare","BaseWidget","_WidgetsInTemplateMixin","Draw","Graphic","SimpleFillSymbol","SimpleMarkerSymbol","SimpleLineSymbol","Color","GraphicsLayer","Point","LayerInfos","lang","FeatureLayer","QueryTask","Query","WidgetManager","geometryEngine","Polyline","turf","dataRequestsToAttendCm","requestToAttendState","requestsObservedState","requestsAttendState","idLyrCfPredios","idLyrCfLotes_pun","idLyrCfEje_vial","idLyrCfNumeracion","idLyrCfArancel","idLyrCfLotes","idLyrCfUnidadesurbanas","idLyrCfParques","idLyrCfManzana","idLyrCfSector","idLyrActpuntoimg","idLyrDistricts","iconByState","_UBIGEO_FIELD","_ID_LOTE_P_FIELD","_COD_MZN_FIELD","_F_MZN_FIELD","_COD_SECT_FIELD","samplePdf","toolbarCm","params","URLSearchParams","window","location","search","paramsApp","keys","key","get","symbolPuntoLote","STYLE_SQUARE","STYLE_SOLID","symbolFusionLote","symbolDivisionLote","STYLE_DASH","symbolPredio","symbolSnapPointCm","STYLE_CROSS","idGraphicPredioCm","idGraphicLoteCm","idGraphicPuntoLote","idGraphicFrenteLote","idGraphicLineaDivision","symbolByCase","graphicLayerLineaDivision","id","baseClass","codRequestsCm","layersMap","queryUbigeo","case","postCreate","inherited","arguments","console","log","_getAllLayers","selfCm","_filterByDistrictCm","_startExtentByDistrictCm","getInstance","map","itemInfo","then","hitch","layerInfosObj","getLayerInfoById","setFilter","query","where","qTask","getUrl","executeForExtent","results","setExtent","extent","nextScale","getScale","setScale","homeWidget","getWidgetsByName","homeDijit","error","_getRequestsTrayDataCm","state","data","filter","i","estado","_loadIniRequestsCm","dojo","click","_loadRequestsCm","evt","target","dataHtml","id_solicitud","cod_preds","fec_solicitud","caseId","icon","tbody","create","innerHTML","join","tb","getElementsByTagName","length","tableRequestApCm","removeChild","appendChild","on","_openFormCase","removeClass","classList","add","_zoomToPredSelected","idPred","currentTarget","childNodes","split","_openSupportingDocument","open","focus","row","closest","rowList","td","value","reasignarApCm","toggle","fusionApCm","divisionApCm","actGeomApCm","eliminacionApCm","deactivate","enableSnapping","snapPoint","snapLine","snapPolygon","_removeLayerGraphic","clear","casesCtnApCm","requestTrayApCm","_openFormObs","obsCtnApCm","_createToolbar","_addToMap","geometry","type","screenPoint","toScreen","deferred","snappingManager","getSnappingPoint","undefined","graphic","symbol","graphicLayer","addLayer","setInfoWindowOnClick","alert","layerId","graphicsLayerIds","includes","removeLayer","getLayer","_activateTool","_activateSnappingByReasignar","activate","_activateToolAcumulacion","_activateToolLinesDivision","_activateSnappingByDivision","_locateMarker","x","lngApCm","y","latApCm","geom","parseFloat","cflayer","propertyLayer","mode","MODE_ONDEMAND","outFields","snapManager","alwaysSnap","snapPointSymbol","tolerance","layerInfos","layer","setLayerInfos","_activateSnappingByAcumulacion","graphiclayer","graphicsLayerInfo","esri","layers","LayerInfo","name","_unionFeatures","arr","union","_generateGraphicByQueryPolygon","graphicLayerLoteFusion","ubigeo","returnGeometry","execute","features","push","response","_extent","orderByFields","graphicLayerPuntoLote","graphicLayerFrenteLote","graphicFusion","frentes","isItc","intersects","graphics","hasOwnProperty","attributes","unionFrentes","idx","itcFrentesByLotes","intersect","polyline","paths","spatialReference","wkid","polylineOne","_getLongestPolyline","puntoLoteTurf","_findMidpoint","puntoLote","coordinates","puntoLoteGraphic","symbolFrenteLote","Math","floor","random","frente","_getMidpoint","geodesicLength","midpoint","geodesicDensify","getPoint","lengthPolylineChunk","line","lineString","options","units","along","longestPath","path","polylineChunk","_dividePolygon","poly","lines","divide","cut","_ApplyDivideLotes","graphicLayerLoteDivision","unionGraphicLayerLineaDivision","lineGeometry","webMercatorToGeographic","geomLote","geomLoteDivided","lote","onOpen","panel","getPanel","position","height","setPosition","panelManager","normalizePanel"],"mappings":"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","file":"Widget.js","sourcesContent":["import declare from 'dojo/_base/declare';\r\nimport BaseWidget from 'jimu/BaseWidget';\r\nimport _WidgetsInTemplateMixin from 'dijit/_WidgetsInTemplateMixin';\r\nimport Draw from \"esri/toolbars/draw\";\r\nimport Graphic from \"esri/graphic\";\r\nimport SimpleFillSymbol from \"esri/symbols/SimpleFillSymbol\";\r\nimport SimpleMarkerSymbol from \"esri/symbols/SimpleMarkerSymbol\";\r\nimport SimpleLineSymbol from \"esri/symbols/SimpleLineSymbol\";\r\nimport Color from 'dojo/_base/Color';\r\nimport GraphicsLayer from \"esri/layers/GraphicsLayer\"\r\nimport Point from \"esri/geometry/Point\"\r\n// import keys from 'dojo/keys';\r\nimport LayerInfos from \"jimu/LayerInfos/LayerInfos\";\r\nimport lang from \"dojo/_base/lang\";\r\nimport FeatureLayer from \"esri/layers/FeatureLayer\";\r\nimport QueryTask from \"esri/tasks/QueryTask\";\r\nimport Query from \"esri/tasks/query\";\r\nimport WidgetManager from \"jimu/WidgetManager\"\r\nimport geometryEngine from \"esri/geometry/geometryEngine\";\r\n// import Polygon from \"esri/geometry/Polygon\";\r\nimport Polyline from \"esri/geometry/Polyline\";\r\nimport turf from \"turf\";\r\n\r\n\r\nconst dataRequestsToAttendCm = [{\"case\":\"Reasignar\",\"caseId\":1,\"cod_preds\":\"673\",\"estado\":\"por_atender\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":1},{\"case\":\"Acumulación\",\"caseId\":2,\"cod_preds\":\"1376\",\"estado\":\"por_atender\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":2},{\"case\":\"División\",\"caseId\":3,\"cod_preds\":\"1376\",\"estado\":\"por_atender\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":3},{\"case\":\"Act. geométrica\",\"caseId\":4,\"cod_preds\":\"1376\",\"estado\":\"por_atender\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":4},{\"case\":\"Eliminación\",\"caseId\":5,\"cod_preds\":\"1376\",\"estado\":\"por_atender\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":5},{\"case\":\"Reasignar\",\"caseId\":1,\"cod_preds\":\"1376\",\"estado\":\"por_atender\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":6},{\"case\":\"Fusión\",\"caseId\":2,\"cod_preds\":\"1376\",\"estado\":\"obaservado\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":7},{\"case\":\"División\",\"caseId\":3,\"cod_preds\":\"1376\",\"estado\":\"observado\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":8},{\"case\":\"Act. geométrica\",\"caseId\":4,\"cod_preds\":\"1376\",\"estado\":\"atendido\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":9},{\"case\":\"Eliminación\",\"caseId\":5,\"cod_preds\":\"1376\",\"estado\":\"atendido\",\"fec_solicitud\":\"10/11/2022\",\"id_solicitud\":10}]\r\nconst requestToAttendState = \"por_atender\"\r\nconst requestsObservedState = \"observado\"\r\nconst requestsAttendState = \"atendido\"\r\n\r\n\r\n// Layers ids\r\nconst idLyrCfPredios = \"CARTO_FISCAL_6806_0\"\r\nconst idLyrCfLotes_pun = \"CARTO_FISCAL_6806_1\"\r\nconst idLyrCfEje_vial = \"CARTO_FISCAL_6806_2\"\r\nconst idLyrCfNumeracion = \"CARTO_FISCAL_6806_3\"\r\nconst idLyrCfArancel = \"CARTO_FISCAL_6806_4\"\r\nconst idLyrCfLotes = \"CARTO_FISCAL_6806_5\"\r\nconst idLyrCfUnidadesurbanas = \"CARTO_FISCAL_6806_6\"\r\nconst idLyrCfParques = \"CARTO_FISCAL_6806_7\"\r\nconst idLyrCfManzana = \"CARTO_FISCAL_6806_8\"\r\nconst idLyrCfSector= \"CARTO_FISCAL_6806_9\"\r\nconst idLyrActpuntoimg = \"ACTUALIZACION_DE_PUNTO_IMG_1890\"\r\nconst idLyrDistricts = \"limites_nacional_1821_2\"\r\n\r\nconst iconByState = {\r\n  \"por_atender\": {'icon': 'fas fa-pencil-alt', 'id': 'editRequestsCm'},\r\n  \"observado\": {'icon': 'fas fa-pause', 'id': 'obsRequestsCm'},\r\n  \"atendido\": {'icon': 'fas fa-check', 'id': 'goodRequestsCm'},\r\n}\r\n\r\n// Fields \r\nconst _UBIGEO_FIELD = \"UBIGEO\"\r\nconst _ID_LOTE_P_FIELD = \"ID_LOTE_P\"\r\nconst _COD_MZN_FIELD = \"COD_MZN\"\r\nconst _F_MZN_FIELD = \"F_MZN\"\r\nconst _COD_SECT_FIELD = \"COD_SECT\"\r\n\r\nconst samplePdf = \"https://www.africau.edu/images/default/sample.pdf\"\r\n\r\nlet toolbarCm\r\n\r\nconst params = new URLSearchParams(window.location.search)\r\nconst paramsApp = {}\r\n\r\nfor (let key of params.keys()) {\r\n  paramsApp[key] = params.get(key)\r\n}\r\n\r\n// console.log(paramsApp)\r\n// Styles\r\nconst symbolPuntoLote = new SimpleMarkerSymbol(\r\n  SimpleMarkerSymbol.STYLE_SQUARE, \r\n  20, \r\n  new SimpleLineSymbol(\r\n    SimpleLineSymbol.STYLE_SOLID, \r\n    new Color([255, 0, 0]), 2), \r\n    new Color([0, 92, 230, 0.75]\r\n  )\r\n)\r\n\r\nconst symbolFusionLote = new SimpleFillSymbol(\r\n  SimpleFillSymbol.STYLE_SOLID,\r\n  new SimpleLineSymbol(\r\n    SimpleLineSymbol.STYLE_SOLID,\r\n    new Color([255, 0, 0]),\r\n    2\r\n  ),\r\n  new Color([255, 255, 0, 0.25])\r\n)\r\n\r\nconst symbolDivisionLote = new SimpleLineSymbol(\r\n  SimpleLineSymbol.STYLE_DASH,\r\n  new Color([255, 0, 0]),\r\n  2\r\n)\r\n\r\n\r\n// const symbolPuntoLote = new SimpleMarkerSymbol(\r\n//   SimpleMarkerSymbol.STYLE_CIRCLE,\r\n//   30,\r\n//   new SimpleLineSymbol(\r\n//     SimpleLineSymbol.STYLE_SOLID,\r\n//     new Color([0, 86, 211]),\r\n//     1\r\n//   ),\r\n//   new Color([0, 255, 0, 0.25])\r\n// )\r\n\r\nconst symbolPredio = new SimpleMarkerSymbol(\r\n  SimpleMarkerSymbol.STYLE_SQUARE, \r\n  20, \r\n  new SimpleLineSymbol(\r\n    SimpleLineSymbol.STYLE_SOLID, \r\n    new Color([255, 0, 0]), 2), \r\n    new Color([235, 69, 95, 0.75]\r\n  )\r\n)\r\n\r\nconst symbolSnapPointCm = new SimpleMarkerSymbol(\r\n  SimpleMarkerSymbol.STYLE_CROSS,\r\n  20,\r\n  new SimpleLineSymbol(\r\n    SimpleLineSymbol.STYLE_SOLID,\r\n    new Color([255, 0, 0]),\r\n    2\r\n  ),\r\n  new Color([0, 255, 0, 0.25])\r\n)\r\n\r\n\r\n// Identificadores de graficos\r\nconst idGraphicPredioCm = \"graphicPredioCm2\"\r\nconst idGraphicLoteCm = \"graphicLoteCm\"\r\nconst idGraphicPuntoLote = \"graphicPuntoLote\"\r\nconst idGraphicFrenteLote = \"graphicFrenteLote\"\r\nconst idGraphicLineaDivision = \"graphicLineaDivision\"\r\n\r\n// symbol by case\r\nconst symbolByCase = {\r\n  \"1\": {\"symbol\": symbolPredio},\r\n  \"2\": {\"symbol\": symbolPredio},\r\n  \"3\": {\"symbol\": symbolPredio},\r\n}\r\n\r\n// graphicsLayer main\r\nlet graphicLayerLineaDivision = new GraphicsLayer({\r\n  id: idGraphicLineaDivision,\r\n});\r\n\r\n// To create a widget, you need to derive from BaseWidget.\r\nexport default declare([BaseWidget], {\r\n\r\n  // Custom widget code goes here\r\n\r\n  baseClass: 'carto-maintenance-wgt',\r\n  codRequestsCm: null,\r\n  layersMap: [],\r\n  queryUbigeo: `${_UBIGEO_FIELD} = '${paramsApp['ubigeo']}'`,\r\n  case: 0,\r\n\r\n  // add additional properties here\r\n\r\n  // methods to communication with app container:\r\n  postCreate () {\r\n    this.inherited(arguments);\r\n    console.log('CartoMaintenanceWgt::postCreate');\r\n    this._getAllLayers();\r\n    selfCm = this;\r\n    this._filterByDistrictCm();\r\n    this._startExtentByDistrictCm();\r\n  },\r\n  _getAllLayers() {\r\n    LayerInfos.getInstance(this.map, this.map.itemInfo).then(lang.hitch(this, function (layerInfosObj) {\r\n      this.layersMap = layerInfosObj;\r\n    }));\r\n  },\r\n\r\n  _filterByDistrictCm(){\r\n    // let queryUbigeo = `${_UBIGEO_FIELD} = '${paramsApp['ubigeo']}'`\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfPredios).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfLotes_pun).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfEje_vial).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfNumeracion).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfArancel).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfLotes).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfUnidadesurbanas).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfParques).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfManzana).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrCfSector).setFilter(selfCm.queryUbigeo)\r\n    selfCm.layersMap.getLayerInfoById(idLyrActpuntoimg).setFilter(selfCm.queryUbigeo)\r\n  },\r\n\r\n  _startExtentByDistrictCm(){\r\n    let query = new Query()\r\n    query.where = selfCm.queryUbigeo\r\n\r\n    let qTask = new QueryTask(selfCm.layersMap.getLayerInfoById(idLyrDistricts).getUrl())\r\n\r\n    qTask.executeForExtent(query, function(results){\r\n        selfCm.map.setExtent(results.extent).then(function(){\r\n          // get the next scale value from the current scale\r\n          let nextScale = selfCm.map.getScale() * 1.5;\r\n          // set the map scale to the next scale value\r\n          selfCm.map.setScale(nextScale).then(\r\n            function(){\r\n              let homeWidget = WidgetManager.getInstance().getWidgetsByName(\"HomeButton\");\r\n              homeWidget[0].homeDijit.extent = selfCm.map.extent;\r\n            }\r\n          );\r\n      })         \r\n    }, function(error){\r\n      console.log(error)\r\n    })\r\n  },\r\n\r\n  // startup() {\r\n  //   this.inherited(arguments);\r\n  //   console.log('CartoMaintenanceWgt::startup');\r\n  // },\r\n\r\n  _getRequestsTrayDataCm(state){\r\n    // Reemplazar todo el metodo para capturar datos de servicio\r\n    let data = dataRequestsToAttendCm.filter((i) => i.estado == state);\r\n    return data\r\n  },\r\n\r\n  _loadIniRequestsCm(){\r\n    dojo.query(`#${requestToAttendState}`)[0].click()\r\n  },\r\n\r\n  _loadRequestsCm(evt){\r\n    let data = selfCm._getRequestsTrayDataCm(evt.target.id);\r\n    let dataHtml = data.map((i) => `<tr>\r\n                                      <td>${i.id_solicitud}</td>\r\n                                      <td>${i.case}</td>\r\n                                      <td>${i.cod_preds}</td>\r\n                                      <td>${i.fec_solicitud}</td>\r\n                                      <td>\r\n                                        <button id=\"${iconByState[i.estado].id}\" value=\"${i.caseId}\" class=\"stateRequestClsCm\">\r\n                                          <i class=\"${iconByState[i.estado].icon}\"></i>\r\n                                        </button>\r\n                                      </td>\r\n                                    </tr>`\r\n                                    )\r\n    let tbody = dojo.create('tbody', {innerHTML: dataHtml.join('')});\r\n    let tb = dojo.query(\".tableRequestClsCm\")[0]\r\n    if (tb.getElementsByTagName(\"tbody\").length > 0){\r\n      selfCm.tableRequestApCm.removeChild(tb.getElementsByTagName(\"tbody\")[0])\r\n    }\r\n    selfCm.tableRequestApCm.appendChild(tbody);\r\n    if(evt.target.id == requestToAttendState){\r\n      dojo.query(\".stateRequestClsCm\").on('click', selfCm._openFormCase);\r\n    }\r\n\r\n    dojo.query(\".tablinksCm\").removeClass(\"active\");\r\n    evt.target.classList.add(\"active\");\r\n\r\n  },\r\n\r\n  _zoomToPredSelected(evt){\r\n    let idPred = evt.currentTarget.childNodes[1].childNodes[0].innerHTML.split(\": \")[1]\r\n\r\n  },\r\n  \r\n  _openSupportingDocument(){\r\n    window.open(samplePdf, '_blank').focus();\r\n  },\r\n\r\n  _openFormCase(evt){\r\n    let row = dojo.query(evt.currentTarget).closest(\"tr\")[0];\r\n    let rowList = dojo.query(\"td\", row).map(td => td.innerHTML);\r\n    selfCm.codRequestsCm = rowList[0]\r\n    dojo.query('#titleCaseCm')[0].innerHTML = `<span>${rowList[1]}</span>`\r\n\r\n    dojo.query('.codPredClsCm')[0].innerHTML = `<span class=\"alignVCenter\">Predios: ${rowList[2]}</span>`\r\n\r\n    // console.log(evt.target)\r\n\r\n    dojo.query(\".caseClsCm\").removeClass(\"active\")\r\n    selfCm.case = evt.currentTarget.value\r\n    switch (evt.currentTarget.value) {\r\n      case \"1\":\r\n        selfCm.reasignarApCm.classList.toggle('active')\r\n        break;\r\n      case \"2\":\r\n        selfCm.fusionApCm.classList.toggle('active')\r\n        break\r\n      case \"3\":\r\n        selfCm.divisionApCm.classList.toggle('active')\r\n        break\r\n      case \"4\":\r\n        selfCm.actGeomApCm.classList.toggle('active')\r\n        break\r\n      case \"5\":\r\n        selfCm.eliminacionApCm.classList.toggle('active')\r\n        break\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // desactivar el toolbarCm de edicion si esta activado\r\n    // toolbarCm.deactivate()\r\n    toolbarCm.deactivate();\r\n\r\n    // deshabilitar snapping\r\n    selfCm.map.enableSnapping({\r\n      snapPoint: false,\r\n      snapLine: false,\r\n      snapPolygon: false\r\n    });\r\n\r\n    // remove all graphics layer if exist\r\n    selfCm._removeLayerGraphic(idGraphicPredioCm);\r\n    selfCm._removeLayerGraphic(idGraphicLoteCm);\r\n    selfCm._removeLayerGraphic(idGraphicPuntoLote);\r\n    selfCm._removeLayerGraphic(idGraphicFrenteLote);\r\n    // selfCm._removeLayerGraphic(idGraphicLineaDivision)\r\n    graphicLayerLineaDivision.clear();\r\n\r\n    selfCm.casesCtnApCm.classList.toggle('active')\r\n    selfCm.requestTrayApCm.classList.toggle('active')\r\n  },\r\n  _openFormObs(){\r\n    // console.log('aqui')\r\n    dojo.query('#headeRequestsCtnCm')[0].innerHTML = `<span class=\"alignVCenter\">Solicitud: ${selfCm.codRequestsCm}</span>`\r\n    selfCm.casesCtnApCm.classList.toggle(\"active\");\r\n    selfCm.obsCtnApCm.classList.toggle('active')\r\n\r\n  },\r\n\r\n  // Toolbar function\r\n  _createToolbar() {\r\n    toolbarCm = new Draw(selfCm.map);\r\n    toolbarCm.on(\"draw-end\", selfCm._addToMap);\r\n  },\r\n\r\n  _addToMap(evt) {\r\n    // let area;\r\n    // console.log(evt.geometry)\r\n    if (evt.geometry.type === \"point\") {\r\n      let screenPoint = selfCm.map.toScreen(evt.geometry)\r\n      let deferred = selfCm.map.snappingManager.getSnappingPoint(screenPoint);\r\n      deferred.then(function(value){\r\n        if(value !== undefined){\r\n          let graphic = new Graphic(value, symbolByCase[selfCm.case].symbol);\r\n          let graphicLayer = new GraphicsLayer({\r\n            id: idGraphicPredioCm,\r\n          });\r\n          graphicLayer.add(graphic);\r\n          selfCm.map.addLayer(graphicLayer);\r\n          selfCm.map.setInfoWindowOnClick(true);\r\n          toolbarCm.deactivate();\r\n        } else {\r\n          alert('La ubicación donde desea registrar el predio no es valida, este se debe ubicar sobre un punto lote.');\r\n        }\r\n      }, function(error){\r\n        console.log(error);\r\n      });\r\n    } else if (evt.geometry.type === \"polyline\") {\r\n      let graphic = new Graphic(evt.geometry, symbolDivisionLote);\r\n      graphicLayerLineaDivision.add(graphic);\r\n      selfCm.map.addLayer(graphicLayerLineaDivision);\r\n      selfCm.map.setInfoWindowOnClick(true);\r\n      toolbarCm.deactivate();\r\n    }\r\n    \r\n  },\r\n\r\n  _removeLayerGraphic(layerId){\r\n    if (selfCm.map.graphicsLayerIds.includes(layerId)) {\r\n      selfCm.map.removeLayer(selfCm.map.getLayer(layerId));\r\n    }\r\n  },\r\n\r\n  _activateTool() {\r\n    selfCm._activateSnappingByReasignar();\r\n    selfCm.map.setInfoWindowOnClick(false);\r\n    selfCm._removeLayerGraphic(idGraphicPredioCm);\r\n    toolbarCm.activate(Draw[\"POINT\"]);\r\n  },\r\n\r\n  _activateToolAcumulacion(){\r\n    selfCm.map.setInfoWindowOnClick(false);\r\n    selfCm._removeLayerGraphic(idGraphicPredioCm);\r\n    toolbarCm.activate(Draw[\"POINT\"]);\r\n  },\r\n\r\n  _activateToolLinesDivision(){\r\n    selfCm.map.setInfoWindowOnClick(false);\r\n    // selfCm._removeLayerGraphic(idGraphicLineaDivision);\r\n    selfCm._activateSnappingByDivision();\r\n    toolbarCm.activate(Draw[\"POLYLINE\"]);\r\n  },\r\n\r\n  _locateMarker(evt){\r\n    let x = selfCm.lngApCm.value;\r\n    let y = selfCm.latApCm.value;\r\n    let geom = new Point(parseFloat(x), parseFloat(y));\r\n    selfCm._removeLayerGraphic(idGraphicPredioCm)\r\n    let graphic = new Graphic(geom, symbolPuntoLote);\r\n    let graphicLayer = new GraphicsLayer({\r\n      id: idGraphicPredioCm\r\n    });\r\n    graphicLayer.add(graphic);\r\n    selfCm.map.addLayer(graphicLayer);\r\n    selfCm.map.setInfoWindowOnClick(true);\r\n\r\n  },\r\n  _activateSnappingByReasignar() {\r\n    let cflayer = selfCm.layersMap.getLayerInfoById(idLyrCfLotes_pun)\r\n    let propertyLayer = new FeatureLayer(cflayer.getUrl(), {\r\n      mode: FeatureLayer.MODE_ONDEMAND,\r\n      outFields: [\"*\"]\r\n    });\r\n    let snapManager = selfCm.map.enableSnapping({\r\n      alwaysSnap: true,\r\n      // snapKey: keys.CTRL,\r\n      snapPointSymbol: symbolSnapPointCm,\r\n      tolerance: 100,\r\n    });\r\n    // get layerinfo by id of layer to snap\r\n    let layerInfos = [{\r\n      layer: propertyLayer\r\n    }];\r\n    \r\n    snapManager.setLayerInfos(layerInfos);\r\n  },\r\n\r\n  _activateSnappingByAcumulacion(graphiclayer){\r\n    let graphicsLayerInfo = new esri.layers.LayerInfo({\r\n      id: graphiclayer.id, // El id del `GraphicsLayer`\r\n      name: graphiclayer.name, // El nombre del `GraphicsLayer`\r\n      layer: graphiclayer // El `GraphicsLayer` a utilizar\r\n    });\r\n\r\n    // Agregar el `LayerInfo` al mapa y habilitar el snapping\r\n    selfCm.map.enableSnapping({\r\n      layerInfos: [graphicsLayerInfo], // Agregar el `LayerInfo` al mapa\r\n      alwaysSnap: true,\r\n      snapPointSymbol: symbolSnapPointCm,\r\n      tolerance: 100,\r\n    });\r\n  },\r\n\r\n  _activateSnappingByDivision(){\r\n    let graphicsLayerInfo = new esri.layers.LayerInfo({\r\n      id: graphicLayerLineaDivision.id, // El id del `GraphicsLayer`\r\n      name: graphicLayerLineaDivision.name, // El nombre del `GraphicsLayer`\r\n      layer: graphicLayerLineaDivision // El `GraphicsLayer` a utilizar\r\n    });\r\n\r\n    let cflayer = selfCm.layersMap.getLayerInfoById(idLyrCfLotes)\r\n    let propertyLayer = new FeatureLayer(cflayer.getUrl(), {\r\n      mode: FeatureLayer.MODE_ONDEMAND,\r\n      outFields: [\"*\"]\r\n    });\r\n\r\n    let layerInfos = [{\r\n      layer: propertyLayer\r\n    }, graphicsLayerInfo];\r\n\r\n    // Agregar el `LayerInfo` al mapa y habilitar el snapping\r\n    selfCm.map.enableSnapping({\r\n      layerInfos: layerInfos, // Agregar el `LayerInfo` al mapa\r\n      alwaysSnap: true,\r\n      snapPointSymbol: symbolSnapPointCm,\r\n      tolerance: 20,\r\n    });\r\n  },\r\n\r\n  // crear una funcion que permita dos poligonos aceptando dos poligonos json como parametros\r\n  // la funcion debe retornar un poligono json\r\n  _unionFeatures(arr) {  \r\n    let union = geometryEngine.union(arr);\r\n    return union;\r\n  },\r\n\r\n  // Generate function of create graphic by query polygon featurelayer\r\n  _generateGraphicByQueryPolygon() {\r\n    selfCm._removeLayerGraphic(idGraphicPredioCm);\r\n    selfCm._removeLayerGraphic(idGraphicLoteCm);\r\n    selfCm._removeLayerGraphic(idGraphicPuntoLote);\r\n    selfCm._removeLayerGraphic(idGraphicFrenteLote);\r\n\r\n    // Creamos grafico de lote fusionado\r\n    let graphicLayerLoteFusion = new GraphicsLayer({\r\n      id: idGraphicLoteCm\r\n    });\r\n\r\n    let query = new Query();\r\n    query.where = `(${_UBIGEO_FIELD} = '${paramsApp.ubigeo}') and (${_ID_LOTE_P_FIELD} in (30, 36))`\r\n    query.outFields = [\"*\"];\r\n    query.returnGeometry = true\r\n    let qTask = new QueryTask(selfCm.layersMap.getLayerInfoById(idLyrCfLotes).getUrl());\r\n    qTask.execute(query, function (results) {\r\n      let arr = []\r\n      for (let i of results.features) {\r\n        arr.push(i.geometry)\r\n      }\r\n      let response = selfCm._unionFeatures(arr)\r\n      let graphic = new Graphic(response, symbolFusionLote);\r\n\r\n      graphicLayerLoteFusion.add(graphic);\r\n      selfCm.map.addLayer(graphicLayerLoteFusion);\r\n      selfCm.map.setExtent(graphic._extent, true);\r\n\r\n    }).then(function () {\r\n      let query = new Query();\r\n      query.where = `${_UBIGEO_FIELD} = '${paramsApp.ubigeo}' and ${_COD_MZN_FIELD} = '040' and ${_COD_SECT_FIELD} = '04'`\r\n      // especificar los campos devueltos\r\n      query.outFields = [_UBIGEO_FIELD, _F_MZN_FIELD];\r\n      query.returnGeometry = true\r\n      // query with order by fields\r\n      query.orderByFields = [_F_MZN_FIELD];\r\n      let qTask = new QueryTask(selfCm.layersMap.getLayerInfoById(idLyrCfArancel).getUrl());\r\n      qTask.execute(query, function (results) {\r\n        // Creamos grafico de punto lote\r\n        let graphicLayerPuntoLote = new GraphicsLayer({\r\n          id: idGraphicPuntoLote\r\n        });\r\n        // creamos grafico de frente de lote\r\n        let graphicLayerFrenteLote = new GraphicsLayer({\r\n          id: idGraphicFrenteLote\r\n        });\r\n        let graphicFusion = selfCm.map.getLayer(idGraphicLoteCm)\r\n        let frentes = {}\r\n        for (let row of results.features){\r\n          let isItc = geometryEngine.intersects(row.geometry, graphicFusion.graphics[0].geometry)\r\n          if (!isItc){\r\n            continue\r\n          }\r\n          // saber si un key esta dentro del objeot frentes\r\n          if (!frentes.hasOwnProperty(row.attributes[_F_MZN_FIELD])){\r\n            frentes[row.attributes[_F_MZN_FIELD]] = row.geometry;\r\n          }\r\n          else{\r\n            let unionFrentes = geometryEngine.union([frentes[row.attributes[_F_MZN_FIELD]], row.geometry])\r\n            frentes[row.attributes[_F_MZN_FIELD]] = unionFrentes;\r\n          }\r\n        }\r\n        for (let idx in frentes){\r\n          // interseccion entre frentes y lote\r\n          let itcFrentesByLotes = geometryEngine.intersect(frentes[idx], graphicFusion.graphics[0].geometry)\r\n          // Generate symbol by line with random colors\r\n\r\n          // polilinea de frentes resultantes\r\n          let polyline = new Polyline({\r\n            paths: itcFrentesByLotes.paths,\r\n            spatialReference: {wkid: 4326}\r\n          });\r\n          \r\n          let polylineOne = null;\r\n          if (polyline.paths.length > 1){\r\n            polylineOne = selfCm._getLongestPolyline(polyline)\r\n            \r\n          }else{\r\n            polylineOne = polyline\r\n          }\r\n\r\n          // calculamos el punto medio de la polilinea\r\n          let puntoLoteTurf = selfCm._findMidpoint(polylineOne)\r\n\r\n          // crear un punto en el mapa\r\n          let puntoLote = new Point({\r\n            x: puntoLoteTurf.geometry.coordinates[0],\r\n            y: puntoLoteTurf.geometry.coordinates[1],\r\n            spatialReference: {wkid: 4326}\r\n          })\r\n\r\n          // Agregar el punto p al mapa          \r\n          let puntoLoteGraphic = new Graphic(puntoLote, symbolPuntoLote)\r\n          graphicLayerPuntoLote.add(puntoLoteGraphic)\r\n\r\n          // console.log(point)\r\n          const symbolFrenteLote = new SimpleLineSymbol(\r\n            SimpleLineSymbol.STYLE_SOLID,\r\n            new Color(\r\n              [\r\n                Math.floor(Math.random() * 255), \r\n                Math.floor(Math.random() * 255), \r\n                Math.floor(Math.random() * 255)]),\r\n            5\r\n          )\r\n          let frente = new Graphic(polyline, symbolFrenteLote);\r\n          graphicLayerFrenteLote.add(frente);\r\n        }\r\n        \r\n        selfCm.map.addLayer(graphicLayerFrenteLote);\r\n        selfCm.map.addLayer(graphicLayerPuntoLote);\r\n        selfCm._activateSnappingByAcumulacion(graphicLayerPuntoLote)\r\n      })\r\n    });\r\n  },\r\n\r\n  _getMidpoint(polyline) {\r\n    let length = geometryEngine.geodesicLength(polyline, \"meters\");\r\n    let midpoint = geometryEngine.geodesicDensify(polyline, length/2, \"meters\").getPoint(0, 0);\r\n    return midpoint;\r\n  },\r\n\r\n  _findMidpoint(polyline) {\r\n    let lengthPolylineChunk = geometryEngine.geodesicLength(polyline, \"meters\")\r\n    let line = turf.lineString(polyline.paths[0]);\r\n    let options = {units: 'meters'};\r\n    let along = turf.along(line, lengthPolylineChunk/2, options);\r\n    return along\r\n  },\r\n\r\n  // funcion que recibe una polilinea con muchas partes y retorna la parte mas larga como una polilinea\r\n  _getLongestPolyline(polyline){\r\n    let paths = polyline.paths\r\n    let longestPath = 0\r\n    let response = null;\r\n    for (let path of paths){\r\n      let polylineChunk = new Polyline({\r\n        paths: [path],\r\n        spatialReference: {wkid: 4326}\r\n      });\r\n      let lengthPolylineChunk = geometryEngine.geodesicLength(polylineChunk, \"meters\")\r\n      if (lengthPolylineChunk > longestPath){ \r\n        longestPath = lengthPolylineChunk\r\n        response = polylineChunk\r\n      }\r\n    }\r\n    return response\r\n  },\r\n\r\n  // function that allows dividing a polygon from cutting lines, the parameters will be a polygon and several lines in json format\r\n  // the function must return a polygon json\r\n  _dividePolygon(poly, lines) {\r\n    let divide = geometryEngine.cut(poly, lines);\r\n    return divide;\r\n  },\r\n\r\n  // Funciones para casuistica de division de lotes\r\n  _ApplyDivideLotes() {\r\n    selfCm._removeLayerGraphic(idGraphicPredioCm);\r\n    selfCm._removeLayerGraphic(idGraphicLoteCm);\r\n    selfCm._removeLayerGraphic(idGraphicPuntoLote);\r\n    selfCm._removeLayerGraphic(idGraphicFrenteLote);\r\n\r\n    // Creamos grafico de lote fusionado\r\n    let graphicLayerLoteDivision = new GraphicsLayer({\r\n      id: idGraphicLoteCm\r\n    });\r\n\r\n    // Union all graphics of grpahicslayer\r\n    // let graphicLayerLineaDivision = selfCm.map.getLayer(idGraphicLineaDivision);\r\n    let arr = []\r\n    for (let i of graphicLayerLineaDivision.graphics) {\r\n      arr.push(i.geometry)\r\n    }\r\n    let unionGraphicLayerLineaDivision = selfCm._unionFeatures(arr)\r\n\r\n    let lineGeometry = new Polyline({\r\n      paths: unionGraphicLayerLineaDivision.paths,\r\n      spatialReference: { wkid: 102100 }\r\n    });\r\n    lineGeometry = esri.geometry.webMercatorToGeographic(lineGeometry)\r\n\r\n    let query = new Query();\r\n    query.where = `(${_UBIGEO_FIELD} = '${paramsApp.ubigeo}') and (${_ID_LOTE_P_FIELD} in (49))`\r\n    query.outFields = [\"*\"];\r\n    query.returnGeometry = true\r\n    let qTask = new QueryTask(selfCm.layersMap.getLayerInfoById(idLyrCfLotes).getUrl());\r\n    qTask.execute(query, function (results) {\r\n      let geomLote = results.features[0].geometry\r\n      let geomLoteDivided = selfCm._dividePolygon(geomLote, lineGeometry)\r\n      // console.log(geomLoteDivided)\r\n      // iterar sobre los graficos de la capa de division y agregar cada uno a graphicLayerLoteDivision\r\n      for (let i of geomLoteDivided) {\r\n        let lote = new Graphic(i, symbolFusionLote)\r\n        // agregar el grafico directo al mapa\r\n        graphicLayerLoteDivision.add(lote);\r\n      }\r\n      selfCm.map.addLayer(graphicLayerLoteDivision);\r\n      // console.log(graphicLayerLoteDivision._extent)\r\n      selfCm.map.setExtent(graphicLayerLoteDivision._extent, true);\r\n      \r\n\r\n      // let lote = new Graphic(geomLote, symbolFusionLote)\r\n      // agregar el grafico directo al mapa\r\n      // selfCm.map.graphics.add(lote);\r\n      // let arr = []\r\n      // for (let i of results.features) {\r\n      //   arr.push(i.geometry)\r\n      // }\r\n      // let response = selfCm._unionFeatures(arr)\r\n      // let graphic = new Graphic(response, symbolFusionLote);\r\n\r\n      // graphicLayerLoteFusion.add(graphic);\r\n      // selfCm.map.addLayer(graphicLayerLoteFusion);\r\n      // selfCm.map.setExtent(graphic._extent, true);\r\n\r\n    }).then(function () {\r\n      // let query = new Query();\r\n      // query.where = `${_UBIGEO_FIELD} = '${paramsApp.ubigeo}' and ${_COD_MZN_FIELD} = '040' and ${_COD_SECT_FIELD} = '04'`\r\n      // // especificar los campos devueltos\r\n      // query.outFields = [_UBIGEO_FIELD, _F_MZN_FIELD];\r\n      // query.returnGeometry = true\r\n      // // query with order by fields\r\n      // query.orderByFields = [_F_MZN_FIELD];\r\n      // let qTask = new QueryTask(selfCm.layersMap.getLayerInfoById(idLyrCfArancel).getUrl());\r\n      // qTask.execute(query, function (results) {\r\n      //   // Creamos grafico de punto lote\r\n      //   let graphicLayerPuntoLote = new GraphicsLayer({\r\n      //     id: idGraphicPuntoLote\r\n      //   });\r\n      //   // creamos grafico de frente de lote\r\n      //   let graphicLayerFrenteLote = new GraphicsLayer({\r\n      //     id: idGraphicFrenteLote\r\n      //   });\r\n      //   let graphicFusion = selfCm.map.getLayer(idGraphicLoteCm)\r\n      //   let frentes = {}\r\n      //   for (let row of results.features){\r\n      //     let isItc = geometryEngine.intersects(row.geometry, graphicFusion.graphics[0].geometry)\r\n      //     if (!isItc){\r\n      //       continue\r\n      //     }\r\n      //     // saber si un key esta dentro del objeot frentes\r\n      //     if (!frentes.hasOwnProperty(row.attributes[_F_MZN_FIELD])){\r\n      //       frentes[row.attributes[_F_MZN_FIELD]] = row.geometry;\r\n      //     }\r\n      //     else{\r\n      //       let unionFrentes = geometryEngine.union([frentes[row.attributes[_F_MZN_FIELD]], row.geometry])\r\n      //       frentes[row.attributes[_F_MZN_FIELD]] = unionFrentes;\r\n      //     }\r\n      //   }\r\n      //   for (let idx in frentes){\r\n      //     // interseccion entre frentes y lote\r\n      //     let itcFrentesByLotes = geometryEngine.intersect(frentes[idx], graphicFusion.graphics[0].geometry)\r\n      //     // Generate symbol by line with random colors\r\n\r\n      //     // polilinea de frentes resultantes\r\n      //     let polyline = new Polyline({\r\n      //       paths: itcFrentesByLotes.paths,\r\n      //       spatialReference: {wkid: 4326}\r\n      //     });\r\n          \r\n      //     let polylineOne = null;\r\n      //     if (polyline.paths.length > 1){\r\n      //       polylineOne = selfCm._getLongestPolyline(polyline)\r\n            \r\n      //     }else{\r\n      //       polylineOne = polyline\r\n      //     }\r\n\r\n      //     // calculamos el punto medio de la polilinea\r\n      //     let puntoLoteTurf = selfCm._findMidpoint(polylineOne)\r\n\r\n      //     // crear un punto en el mapa\r\n      //     let puntoLote = new Point({\r\n      //       x: puntoLoteTurf.geometry.coordinates[0],\r\n      //       y: puntoLoteTurf.geometry.coordinates[1],\r\n      //       spatialReference: {wkid: 4326}\r\n      //     })\r\n\r\n      //     // Agregar el punto p al mapa          \r\n      //     let puntoLoteGraphic = new Graphic(puntoLote, symbolPuntoLote)\r\n      //     graphicLayerPuntoLote.add(puntoLoteGraphic)\r\n\r\n      //     // console.log(point)\r\n      //     const symbolFrenteLote = new SimpleLineSymbol(\r\n      //       SimpleLineSymbol.STYLE_SOLID,\r\n      //       new Color(\r\n      //         [\r\n      //           Math.floor(Math.random() * 255), \r\n      //           Math.floor(Math.random() * 255), \r\n      //           Math.floor(Math.random() * 255)]),\r\n      //       5\r\n      //     )\r\n      //     let frente = new Graphic(polyline, symbolFrenteLote);\r\n      //     graphicLayerFrenteLote.add(frente);\r\n      //   }\r\n        \r\n      //   selfCm.map.addLayer(graphicLayerFrenteLote);\r\n      //   selfCm.map.addLayer(graphicLayerPuntoLote);\r\n      //   selfCm._activateSnappingByAcumulacion(graphicLayerPuntoLote)\r\n      // })\r\n    });    \r\n  },\r\n   \r\n  onOpen() {\r\n    console.log('CartoMaintenanceWgt::onOpen');\r\n    let panel = this.getPanel();    \r\n    // panel.position.width = 400;\r\n    panel.position.height = 750;\r\n    panel.setPosition(panel.position);        \r\n    panel.panelManager.normalizePanel(panel);  \r\n\r\n    this._createToolbar();\r\n    // selfCm.map.addLayer(graphicLayerLineaDivision);\r\n    // this._activateSnapping();\r\n\r\n    dojo.query(\".backTrayClsCm\").on('click', this._openFormCase);\r\n    dojo.query(\".tablinksCm\").on('click', this._loadRequestsCm);\r\n    dojo.query(\"#btnObsCaseCm\").on('click', this._openFormObs);\r\n    dojo.query(\".backRequestsClsCm\").on('click', this._openFormObs);\r\n    dojo.query(\".headPredInfoClsCm\").on('click', this._zoomToPredSelected)\r\n    dojo.query(\"#showInfoDocCm\").on('click', this._openSupportingDocument)\r\n    dojo.query(\"#btnDrawMarkerCm\").on('click', this._activateTool);\r\n    dojo.query('#btnDrawMarkerFsCm').on('click', this._activateToolAcumulacion)\r\n    dojo.query(\"#btnAddMarkerCm\").on('click', this._locateMarker)\r\n    dojo.query(\"#btnFsCm\").on('click', this._generateGraphicByQueryPolygon)\r\n    dojo.query(\"#btnDrawLinesDvCm\").on('click', this._activateToolLinesDivision)\r\n    dojo.query(\"#btnApplyDvCm\").on('click', this._ApplyDivideLotes)\r\n    this._loadIniRequestsCm()\r\n  },\r\n  // onClose(){\r\n  //   console.log('CartoMaintenanceWgt::onClose');\r\n  // },\r\n  // onMinimize(){\r\n  //   console.log('CartoMaintenanceWgt::onMinimize');\r\n  // },\r\n  // onMaximize(){\r\n  //   console.log('CartoMaintenanceWgt::onMaximize');\r\n  // },\r\n  // onSignIn(credential){\r\n  //   console.log('CartoMaintenanceWgt::onSignIn', credential);\r\n  // },\r\n  // onSignOut(){\r\n  //   console.log('CartoMaintenanceWgt::onSignOut');\r\n  // }\r\n  // onPositionChange(){\r\n  //   console.log('CartoMaintenanceWgt::onPositionChange');\r\n  // },\r\n  // resize(){\r\n  //   console.log('CartoMaintenanceWgt::resize');\r\n  // }\r\n});\r\n"]}