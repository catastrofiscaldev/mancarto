{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/Subdivision.js"],"names":["define","UtilityCase","SubDivision","codRequests","currentLotsRows","currentPoinLotsRows","currentLandsRows","newPointLotsGraphics","newLandsGraphics","attributes","pointLotUrl","landUrl","lotUrl","arancelUrl","blockUrl","lotGraphic","cadastralBlockUrl","ubigeo","user","config","lands","pointLots","lots","caseRequest","queryBlock","queryLots","executeSubdivision","getBlockFromLot","geometry","then","checkExistLotUrban","block","checkExistLotUrbanIntoLotsOriginal","translateFieldsBlockToLot","calculateFieldsOfLot","translateFieldsLotToPointLot","translateFieldsArancelToPointLot","calculateFieldsOfPointLot","translateFieldsPointLotToLand","calculateIdMznC","calculateIdPred","getDataOrigin","results","features","idLandInactive","map","i","COD_CPU","sendDataOriginToHistoric","deleteDataOrigin","addDataNew","updateStatusRequests","catch","err"],"mappings":"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","file":"Subdivision.js","sourcesContent":["define([\r\n    \"./UtilityCase\",\r\n], function (\r\n    UtilityCase,\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la subdivisión de lotes\r\n    */\r\n    const SubDivision = {\r\n        codRequests: null, // @params: Código de la solicitud\r\n        // currentLots: null, // @param: Lotes actuales a modificar\r\n        currentLotsRows: null, // @calculate []: Features de los lotes actuales\r\n        currentPoinLotsRows: null, // @calculate: Features de los puntos de los lotes actuales\r\n        currentLandsRows: null, // @calculate: Features de los predios actuales\r\n        // newPointLots: null, // @param: nuevos puntos lote\r\n        newPointLotsGraphics: null, // @params: nuevos puntos lote como graficos\r\n        newLandsGraphics: null, // @params: nuevos predios como graficos\r\n        attributes: null, // @param: \r\n        pointLotUrl: null, // @param\r\n        landUrl: null, // @param\r\n        lotUrl: null, // @param\r\n        arancelUrl: null, // @param\r\n        blockUrl: null, // @param\r\n        lotGraphic: null, // @param\r\n        cadastralBlockUrl: null, // @param\r\n        ubigeo: null, // @param\r\n        user: null, // @param\r\n        // geometryLand: null, // @param []: coodernadas x,y de los predios resultantes\r\n        config: null, // @param\r\n\r\n        lands: null, // @calculate\r\n        pointLots: [], // @calculate array\r\n        lots: null, // @calculate\r\n        // block: null, // @calculate\r\n        // LandCls: new UtilityCase.Land(),\r\n        // LotCls: new UtilityCase.Lot(),\r\n        // PointLotCls: new UtilityCase.PointLot(),\r\n        caseRequest: null, // @param\r\n        queryBlock: null, // @param\r\n        queryLots: null, // @param\r\n\r\n        executeSubdivision() {\r\n            return UtilityCase.getBlockFromLot(this.currentLotsRows[0].geometry, this.blockUrl)\r\n                .then(block => UtilityCase.checkExistLotUrban(this.attributes, block, this.lotUrl, this.currentLotsRows, this.ubigeo))\r\n                .then(block => UtilityCase.checkExistLotUrbanIntoLotsOriginal(this.attributes, this.currentLotsRows, block))\r\n                .then(block => UtilityCase.translateFieldsBlockToLot(this.lotUrl, block, this.lotGraphic))\r\n                .then(lots => {\r\n                    // const tipLot = UtilityCase.calculateTipLot(this.currentLotsRows);\r\n                    return UtilityCase.calculateFieldsOfLot(\r\n                        this.lotUrl,\r\n                        lots,\r\n                        this.ubigeo,\r\n                        this.codRequests,\r\n                        this.user,\r\n                        this.attributes,\r\n                        // tipLot\r\n                    )\r\n                })\r\n                .then(lots => {\r\n                    this.lots = lots;\r\n                    return UtilityCase.translateFieldsLotToPointLot(lots, this.pointLotUrl, this.newPointLotsGraphics)\r\n                })\r\n                .then(pointLots => UtilityCase.translateFieldsArancelToPointLot(pointLots, this.arancelUrl))\r\n                .then(pointLots => UtilityCase.calculateFieldsOfPointLot(this.pointLotUrl, this.ubigeo, pointLots))\r\n                .then(pointLots => {\r\n                    this.pointLots = pointLots;\r\n                    return UtilityCase.translateFieldsPointLotToLand(pointLots, this.landUrl, this.newLandsGraphics)\r\n                })\r\n                .then(lands => UtilityCase.calculateIdMznC(lands, this.cadastralBlockUrl, this.ubigeo))\r\n                .then(lands => UtilityCase.calculateIdPred(lands, this.landUrl, this.ubigeo))\r\n                .then(lands => {\r\n                    this.lands = lands;\r\n                    return UtilityCase.getDataOrigin(this.pointLotUrl, this.landUrl, this.currentLotsRows[0], this.queryLots)\r\n                })\r\n                .then(results => {\r\n                    this.currentPoinLotsRows = results[0].features;\r\n                    this.currentLandsRows = results[1].features;\r\n                    this.idLandInactive = results[1].features.map(i => i.attributes.COD_CPU)\r\n                    return UtilityCase.sendDataOriginToHistoric(this.config, this.currentLotsRows, this.currentPoinLotsRows, this.currentLandsRows)\r\n                })\r\n                .then(results => UtilityCase.deleteDataOrigin(this.currentLotsRows, this.currentPoinLotsRows, this.currentLandsRows, this.config))\r\n                .then(results => UtilityCase.addDataNew(this.lots, this.pointLots, this.lands, this.config))\r\n                .then(results => UtilityCase.updateStatusRequests(this.lands, this.codRequests, this.caseRequest, this.ubigeo, this.config, idLandInactive = this.idLandInactive))\r\n                .catch(err => { throw err });\r\n        },\r\n    };\r\n    return SubDivision;\r\n});"]}