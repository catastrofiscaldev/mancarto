{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/Independence.js"],"names":["define","Deferred","QueryTask","Query","esriRequest","StatisticDefinition","UtilityCase","Independence","codRequest","user","ubigeo","cadastralBlockUrl","matrixLand","newLands","urlLands","lands","config","matrixLandDomain","caseRequest","getMatrixLand","deferred","LandCls","Land","queryTask","query","returnGeometry","outFields","tipPred","where","codPre","cpm","execute","then","result","features","attributes","resolve","catch","reject","err","promise","getUiOfLot","statDefCodUi","statisticType","onStatisticField","codUi","outStatisticFieldName","outStatistics","geometry","currentLotsRows","uiValue","updateMatrixLand","updateTipPredLand","setParametersToUpdateFeatures","landUrl","usePost","calculateLandFields","LotCls","Lot","getFeatureSchema","forEach","landProps","landSchema","clone","attributeTransfer","objTarget","objBase","land","pointLot","omitPropsDefault","estado","estadoValue","coordX","x","coordY","y","fuente","nomPc","platformUpdate","nomUser","codVer","getValueCodVer","ranCpu","codCpu","generateCodCpu","dirMun","generateDirMun","tipVia","nomVia","numMun","dirUrb","generateDirUrb","push","executeIndependence","calculateIdMznC","calculateIdPred","addDataNew","updateStatusRequests","console","log"],"mappings":"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","file":"Independence.js","sourcesContent":["define([\r\n    \"dojo/Deferred\",\r\n    \"esri/tasks/QueryTask\",\r\n    \"esri/tasks/query\",\r\n    \"esri/request\",\r\n    \"esri/tasks/StatisticDefinition\",\r\n    \"./UtilityCase\",\r\n], function (\r\n    Deferred,\r\n    QueryTask,\r\n    Query,\r\n    esriRequest,\r\n    StatisticDefinition,\r\n    UtilityCase,\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la subdivisiÃ³n de lotes\r\n    */\r\n    const Independence = {\r\n        codRequest: null, // @params: CÃ³digo de la solicitud\r\n        user: null, // @params\r\n        ubigeo: null, // @params\r\n        cadastralBlockUrl: null, // @params\r\n        matrixLand: null, // @params\r\n        newLands: null, // @param: nuevos predios\r\n        urlLands: null, // @param\r\n        lands: null, // @calculate\r\n        config: null, // @calculate\r\n        matrixLandDomain: '2',\r\n        caseRequest: null, // @param\r\n\r\n\r\n        getMatrixLand() {\r\n            const deferred = new Deferred();\r\n            const LandCls = new UtilityCase.Land();\r\n            const queryTask = new QueryTask(this.urlLands);\r\n            const query = new Query();\r\n            query.returnGeometry = false;\r\n            query.outFields = [\"OBJECTID\", \"GLOBALID\", LandCls.tipPred];\r\n            query.where = `${LandCls.codPre} = '${this.matrixLand[0].cpm}' and ${LandCls.ubigeo} = '${this.ubigeo}'`;\r\n            queryTask.execute(query)\r\n                .then(result => {\r\n                    const matrixLand = result.features;\r\n                    matrixLand[0].attributes[LandCls.tipPred] = this.matrixLandDomain;\r\n                    return deferred.resolve(matrixLand);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        getUiOfLot() {\r\n            const deferred = new Deferred();\r\n            const LandCls = new UtilityCase.Land();\r\n            const queryTask = new QueryTask(this.urlLands);\r\n            const query = new Query();\r\n\r\n            const statDefCodUi = new StatisticDefinition();\r\n            statDefCodUi.statisticType = \"max\";\r\n            statDefCodUi.onStatisticField = LandCls.codUi;\r\n            statDefCodUi.outStatisticFieldName = `${LandCls.codUi}_MAX`;\r\n            query.outStatistics = [statDefCodUi];\r\n\r\n            query.geometry = this.currentLotsRows[0].geometry;\r\n\r\n            queryTask.execute(query)\r\n                .then(result => {\r\n                    const uiValue = result.features[0].attributes[`${LandCls.codUi}_MAX`] + 1;\r\n                    return deferred.resolve(uiValue);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateMatrixLand(matrixLand) {\r\n            // this.lands = JSON.stringify(matrixLand);\r\n            const deferred = new Deferred();\r\n            const updateTipPredLand = UtilityCase.setParametersToUpdateFeatures(\r\n                this.config.landUrl,\r\n                matrixLand\r\n            );\r\n\r\n\r\n\r\n            esriRequest(updateTipPredLand, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateLandFields(uiValue) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new UtilityCase.Land();\r\n            const LotCls = new UtilityCase.Lot();\r\n            const lands = [];\r\n            // let uiValue = UtilityCase.codUiValue\r\n\r\n            UtilityCase.getFeatureSchema(this.urlLands)\r\n                .then(landSchema => {\r\n                    this.newLands.forEach(land => {\r\n                        const landProps = landSchema.clone();\r\n                        landProps.attributes = UtilityCase.attributeTransfer({\r\n                            objTarget: landSchema.attributes,\r\n                            objBase: land.pointLot.attributes,\r\n                            omitPropsDefault: false\r\n                        });\r\n                        landProps.attributes[LandCls.codPre] = land.cpm;\r\n                        landProps.attributes[LandCls.codUi] = uiValue;\r\n                        landProps.attributes[LandCls.estado] = UtilityCase.estadoValue;\r\n                        landProps.attributes[LandCls.coordX] = land.pointLot.geometry.x;\r\n                        landProps.attributes[LandCls.coordY] = land.pointLot.geometry.y;\r\n                        landProps.attributes[LotCls.fuente] = this.codRequest;\r\n                        landProps.attributes[LotCls.nomPc] = UtilityCase.platformUpdate;\r\n                        landProps.attributes[LotCls.nomUser] = this.user;\r\n                        landProps.attributes[LandCls.tipPred] = land.tipPred;\r\n                        landProps.attributes[LandCls.codVer] = UtilityCase.getValueCodVer(\r\n                            landProps.attributes[LandCls.ranCpu],\r\n                            uiValue\r\n                        );\r\n                        landProps.attributes[LandCls.codCpu] = UtilityCase.generateCodCpu(\r\n                            landProps.attributes[LandCls.ranCpu],\r\n                            landProps.attributes[LandCls.codVer]\r\n                        );\r\n                        landProps.attributes[LandCls.dirMun] = UtilityCase.generateDirMun(\r\n                            landProps.attributes[LandCls.tipVia],\r\n                            landProps.attributes[LandCls.nomVia],\r\n                            landProps.attributes[LandCls.numMun]\r\n                        );\r\n                        landProps.attributes[LandCls.dirUrb] = UtilityCase.generateDirUrb(\r\n                            landProps.attributes[LandCls.tipVia],\r\n                            landProps.attributes[LandCls.nomVia],\r\n                            landProps.attributes[LandCls.numMun]\r\n                        );\r\n                        landProps.geometry = land.pointLot.geometry;\r\n                        uiValue = uiValue + 1;\r\n                        lands.push(landProps.clone());\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        executeIndependence() {\r\n            return this.getUiOfLot()\r\n                .then(uiValue => this.calculateLandFields(uiValue))\r\n                .then(lands => UtilityCase.calculateIdMznC(lands, this.cadastralBlockUrl, this.ubigeo))\r\n                .then(lands => UtilityCase.calculateIdPred(lands, this.urlLands, this.ubigeo))\r\n                .then(lands => {\r\n                    this.lands = lands;\r\n                    return UtilityCase.addDataNew([], [], lands, this.config)\r\n                })\r\n                // .then(lands => UtilityCase.addDataNew([], [], lands, this.config))\r\n                .then(lands => this.getMatrixLand())\r\n                .then(matrixLand => this.updateMatrixLand(matrixLand))\r\n                .then(results => UtilityCase.updateStatusRequests(this.lands, this.codRequest, this.caseRequest, this.ubigeo, this.config))\r\n                .then(result => console.log(result))\r\n                .catch(err => console.log(err));\r\n        },\r\n    };\r\n    return Independence;\r\n});"]}