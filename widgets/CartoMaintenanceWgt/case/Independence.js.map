{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/Independence.js"],"names":["define","Deferred","QueryTask","Query","esriRequest","StatisticDefinition","UtilityCase","Independence","codRequest","user","ubigeo","cadastralBlockUrl","matrixLand","newLands","urlLands","lands","config","matrixLandDomain","caseRequest","currentLotsRows","currentPoinLotsRows","getMatrixLand","deferred","LandCls","Land","queryTask","query","returnGeometry","outFields","tipPred","where","codCpu","cup","execute","then","result","features","attributes","resolve","catch","reject","err","promise","getUiOfLot","LotCls","Lot","statDefCodUi","statisticType","onStatisticField","codUi","outStatisticFieldName","outStatistics","idLotP","uiValue","updateMatrixLand","updateTipPredLand","setParametersToUpdateFeatures","landUrl","usePost","calculateLandFields","getFeatureSchema","forEach","landProps","landSchema","clone","attributeTransfer","objTarget","objBase","land","pointLot","omitPropsDefault","codPre","cpm","estado","estadoValue","coordX","geometry","x","coordY","y","fuente","nomPc","platformUpdate","nomUser","codVer","getValueCodVer","ranCpu","generateCodCpu","dirMun","generateDirMun","tipVia","nomVia","numMun","dirUrb","generateDirUrb","anoCart","Date","getFullYear","partida","resolutionType","tipoResolucionValue","resolutionDocument","estadoPartida","estadoPartidaValue","piso","floor","id","push","executeIndependence","checkResolutionDocument","translateFieldsPointLotToLand","calculateIdMznC","calculateIdPred","updateRowsGeneric","addDataNew","updateStatusRequests"],"mappings":"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","file":"Independence.js","sourcesContent":["define([\r\n    \"dojo/Deferred\",\r\n    \"esri/tasks/QueryTask\",\r\n    \"esri/tasks/query\",\r\n    \"esri/request\",\r\n    \"esri/tasks/StatisticDefinition\",\r\n    \"./UtilityCase\",\r\n], function (\r\n    Deferred,\r\n    QueryTask,\r\n    Query,\r\n    esriRequest,\r\n    StatisticDefinition,\r\n    UtilityCase,\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la subdivisión de lotes\r\n    */\r\n    const Independence = {\r\n        codRequest: null, // @params: Código de la solicitud\r\n        user: null, // @params\r\n        ubigeo: null, // @params\r\n        cadastralBlockUrl: null, // @params\r\n        matrixLand: null, // @params\r\n        newLands: null, // @param: nuevos predios\r\n        urlLands: null, // @param\r\n        lands: null, // @calculate\r\n        config: null, // @calculate\r\n        matrixLandDomain: '2',\r\n        caseRequest: null, // @param\r\n        currentLotsRows: null, //@param\r\n        currentPoinLotsRows: null, //@param\r\n\r\n\r\n        getMatrixLand() {\r\n            const deferred = new Deferred();\r\n            const LandCls = new UtilityCase.Land();\r\n            const queryTask = new QueryTask(this.urlLands);\r\n            const query = new Query();\r\n            query.returnGeometry = false;\r\n            query.outFields = [\"OBJECTID\", \"GLOBALID\", LandCls.tipPred];\r\n            query.where = `${LandCls.codCpu} = '${this.matrixLand[0].cup}' and ${LandCls.ubigeo} = '${this.ubigeo}'`;\r\n            queryTask.execute(query)\r\n                .then(result => {\r\n                    const matrixLand = result.features;\r\n                    matrixLand[0].attributes[LandCls.tipPred] = this.matrixLandDomain;\r\n                    return deferred.resolve(matrixLand);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        getUiOfLot() {\r\n            const LotCls = new UtilityCase.Lot();\r\n            const deferred = new Deferred();\r\n            const LandCls = new UtilityCase.Land();\r\n            const queryTask = new QueryTask(this.urlLands);\r\n            const query = new Query();\r\n\r\n            const statDefCodUi = new StatisticDefinition();\r\n            statDefCodUi.statisticType = \"max\";\r\n            statDefCodUi.onStatisticField = LandCls.codUi;\r\n            statDefCodUi.outStatisticFieldName = `${LandCls.codUi}_MAX`;\r\n            query.outStatistics = [statDefCodUi];\r\n\r\n            query.where = `${LotCls.idLotP} = '${this.currentLotsRows[0].attributes[LotCls.idLotP]}' and ${LotCls.ubigeo} = '${this.ubigeo}'`\r\n\r\n            queryTask.execute(query)\r\n                .then(result => {\r\n                    const uiValue = result.features[0].attributes[`${LandCls.codUi}_MAX`] + 1;\r\n                    return deferred.resolve(uiValue);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateMatrixLand(matrixLand) {\r\n            // this.lands = JSON.stringify(matrixLand);\r\n            const deferred = new Deferred();\r\n            const updateTipPredLand = UtilityCase.setParametersToUpdateFeatures(\r\n                this.config.landUrl,\r\n                matrixLand\r\n            );\r\n\r\n\r\n\r\n            esriRequest(updateTipPredLand, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateLandFields(uiValue) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new UtilityCase.Land();\r\n            const LotCls = new UtilityCase.Lot();\r\n            const lands = [];\r\n            // let uiValue = UtilityCase.codUiValue\r\n\r\n            UtilityCase.getFeatureSchema(this.urlLands)\r\n                .then(landSchema => {\r\n                    this.newLands.forEach(land => {\r\n                        const landProps = landSchema.clone();\r\n                        landProps.attributes = UtilityCase.attributeTransfer({\r\n                            objTarget: landSchema.attributes,\r\n                            objBase: land.pointLot.attributes,\r\n                            omitPropsDefault: false\r\n                        });\r\n                        landProps.attributes[LandCls.codPre] = land.cpm;\r\n                        landProps.attributes[LandCls.codUi] = uiValue;\r\n                        landProps.attributes[LandCls.estado] = UtilityCase.estadoValue;\r\n                        landProps.attributes[LandCls.coordX] = land.pointLot.geometry.x;\r\n                        landProps.attributes[LandCls.coordY] = land.pointLot.geometry.y;\r\n                        landProps.attributes[LotCls.fuente] = this.codRequest;\r\n                        landProps.attributes[LotCls.nomPc] = UtilityCase.platformUpdate;\r\n                        landProps.attributes[LotCls.nomUser] = this.user;\r\n                        landProps.attributes[LandCls.tipPred] = land.tipPred;\r\n                        landProps.attributes[LandCls.codVer] = UtilityCase.getValueCodVer(\r\n                            landProps.attributes[LandCls.ranCpu],\r\n                            uiValue\r\n                        );\r\n                        landProps.attributes[LandCls.codCpu] = UtilityCase.generateCodCpu(\r\n                            landProps.attributes[LandCls.ranCpu],\r\n                            landProps.attributes[LandCls.codVer],\r\n                            codUi = uiValue\r\n                        );\r\n\r\n                        landProps.attributes[LandCls.dirMun] = UtilityCase.generateDirMun(\r\n                            landProps.attributes[LandCls.tipVia],\r\n                            landProps.attributes[LandCls.nomVia],\r\n                            landProps.attributes[LandCls.numMun]\r\n                        );\r\n                        landProps.attributes[LandCls.dirUrb] = UtilityCase.generateDirUrb(\r\n                            landProps.attributes[LandCls.tipVia],\r\n                            landProps.attributes[LandCls.nomVia],\r\n                            landProps.attributes[LandCls.numMun]\r\n                        );\r\n                        landProps.attributes[LotCls.anoCart] = new Date().getFullYear();\r\n                        // if (land.resolutionType === UtilityCase.tipoResolucionValue) {\r\n                        //     landProps.attributes[LandCls.partida] = land.resolutionDocument\r\n                        //     landProps.attributes[LandCls.estadoPartida] = UtilityCase.estadoPartidaValue;\r\n                        // }\r\n\r\n                        landProps.attributes[LandCls.partida] = land.resolutionType === UtilityCase.tipoResolucionValue ? land.resolutionDocument : null;\r\n                        landProps.attributes[LandCls.estadoPartida] = land.resolutionType === UtilityCase.tipoResolucionValue ? UtilityCase.estadoPartidaValue : null;\r\n\r\n                        // if (landGraphic.attributes.floor){\r\n                        landProps.attributes[LandCls.piso] = land.floor;\r\n                        landProps.geometry = land.pointLot.geometry;\r\n                        landProps.attributes['ID'] = land.id;\r\n\r\n                        uiValue = uiValue + 1;\r\n                        lands.push(landProps.clone());\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        executeIndependence() {\r\n            return UtilityCase.checkResolutionDocument(this.newLands, this.ubigeo, this.urlLands)\r\n                .then(() => this.getUiOfLot())\r\n                .then(uiValue => UtilityCase.translateFieldsPointLotToLand(this.currentPoinLotsRows, this.urlLands, this.newLands, uiValue))\r\n                // .then(uiValue => this.calculateLandFields(uiValue))\r\n                .then(lands => UtilityCase.calculateIdMznC(lands, this.cadastralBlockUrl, this.ubigeo))\r\n                .then(lands => UtilityCase.calculateIdPred(lands, this.urlLands, this.ubigeo))\r\n                .then(lands => UtilityCase.updateRowsGeneric(lands, this.codRequest, this.user, 1))\r\n                .then(lands => {\r\n                    this.lands = lands;\r\n                    return UtilityCase.addDataNew([], [], lands, this.config)\r\n                })\r\n                .then(lands => this.getMatrixLand())\r\n                .then(matrixLand => this.updateMatrixLand(matrixLand))\r\n                .then(results => UtilityCase.updateStatusRequests(this.lands, this.codRequest, this.caseRequest, this.ubigeo, this.config))\r\n                .then(result => result)\r\n                .catch(err => { throw err });\r\n        },\r\n    };\r\n    return Independence;\r\n});"]}