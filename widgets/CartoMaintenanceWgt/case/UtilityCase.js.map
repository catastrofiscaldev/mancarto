{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/UtilityCase.js"],"names":["define","Deferred","QueryTask","Query","StatisticDefinition","geometryEngine","Point","Message","all","esriRequest","CustomException","UtilityCase","ubigeoFieldName","platformUpdate","estadoInsValue","estadoValue","codUiValue","estadoPartidaValue","tipoResolucionValue","Land","ubigeo","codPre","codUi","estado","coordX","coordY","codVer","codCpu","dirMun","dirUrb","ranCpu","tipVia","nomVia","numMun","idMznC","idPred","tipPred","partida","estadoPartida","piso","PointLot","idLote","secuen","zonaUtm","estadoIns","tipLot","Lot","idLotP","anoCart","fuente","nomPc","nomUser","codLot","lotUrb","Arancel","secEjec","receptionModelRequest","matchWithReceptionModel","object","modelRequests","response","map","land","arrayMatch","forEach","field","attributes","getFeatureSchema","url","geometry","blankFields","deferred","queryTask","query","where","returnGeometry","outFields","num","execute","then","feature","result","features","prop","resolve","catch","reject","err","promise","attributeTransfer","objTarget","objBase","propsUse","propsOmit","updateOnlyNulls","omitPropsDefault","deletePropsDefault","fieldMatch","propsOmitDefault","propsDeleteDefault","includes","length","props1","Object","keys","props2","filter","hasOwnProperty","getValueCodVer","factor","cod_ver_concatenate","toString","slice","cod_ver","split","reverse","join","digit","index","parseInt","reduce","a","b","getBlockFromLot","queryBlock","queryTaskBlock","Error","checkResolutionDocument","newLandsGraphics","urlLand","LandCls","resolutionDocument","resolutionType","push","queryLand","queryTaskLand","partidas","commonElements","checkExistLotUrban","block","urlLots","currentLots","LotCls","queryLot","idLotPArray","i","spatialRel","queryTaskLot","lotsUrban","attr","lots","lot","setLots","Set","has","checkExistLotUrbanIntoLotsOriginal","lotUrbArray","setLotsUrban","repeatedElements","mensaje","message","type","buttons","label","onClick","hide","ErrorEqualUrbanLotWithinBlock","checkDuplicateLotUrbanResults","elementCount","item","key","translateFieldsBlockToLot","lotsResults","graphic","lotIdx","clone","calculateTipLot","currentLotsRows","row","calculateFieldsOfLot","lotUrl","codRequests","user","queryLotTask","statDefIdLoteP","statisticType","onStatisticField","outStatisticFieldName","statDefRanCpu","outStatistics","point","x","coords","y","spatialReference","wkid","idx","Date","getFullYear","intersects","translateFieldsLotToPointLot","urlPointLots","newPointLotsGraphics","pointLots","pointLotProps","pointLot","graph","pointLotPropsClone","translateFieldsArancelToPointLot","arancelUrl","promises","queryArancelTask","queryArancel","geometryType","element","arancel","arancels","console","log","calculateFieldsOfPointLot","pointLotUrl","PointLotCls","queryPointLotTask","queryPointLot","statDef","generateCodCpu","generateDirMun","generateDirUrb","translateFieldsPointLotToLand","landUrl","lands","landGraphic","LOT_URB","urbanLotNumber","landProps","cpm","floor","id","rightOfWay","mediterraneanCoords","calculateIdMznC","cadastralBlockUrl","queryCadastralBlockTask","queryCadastralBlock","calculateIdPred","queryLandTask","error","getPointLotsOrigin","queryPointLotsOriginTask","queryPointLotsOrigin","distance","units","getLandsOrigin","queryLandsOriginTask","queryLandsOrigin","getLandsOriginByQuery","cpu","updateRowsGeneric","codRequest","status","getDataOrigin","queryLots","results","setParametersToAddFeatures","params","content","JSON","stringify","f","handleAs","callbackParamName","setParametersToUpdateFeatures","setParametersToDeleteFeatures","sendDataOriginToHistoric","config","currentPoinLotsRows","currentLandsRows","lotsHistoricRequestOptions","lotHistoricUrl","usePost","pointsLotsHistoricRequestOptions","pointLotHistoricUrl","landsHistoricRequestOptions","landHistoricUrl","deleteDataOrigin","objetidLot","OBJECTID","objetidPointLot","objetidLand","lotsDeleteRequestOptions","pointsLotsDeleteRequestOptions","landsDeleteRequestOptions","updateDataDeactivate","deactivateFeatures","updateDataLotsDeactivate","updateLotFeature","addDataNew","Array","isArray","lotNews","pointLotsNews","landsNews","updateStatusRequests","caseRequest","idLandInactive","responseLands","messageText","idType","predio","fetchUpdateStatus","retry","fetch","updateStatusApplication","method","body","headers","ok","json","errorData","data","checkLotsWithinLands","checkLands","every","checkLandsWithinLot","urlLands","landCls","queryLands","queryTaskLands"],"mappings":"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","file":"UtilityCase.js","sourcesContent":["define([\r\n    \"dojo/Deferred\",\r\n    \"esri/tasks/QueryTask\",\r\n    \"esri/tasks/query\",\r\n    \"esri/tasks/StatisticDefinition\",\r\n    \"esri/geometry/geometryEngine\",\r\n    \"esri/geometry/Point\",\r\n    \"jimu/dijit/Message\",\r\n    \"dojo/promise/all\",\r\n    \"esri/request\",\r\n    \"./CustomException\",\r\n], function (\r\n    Deferred,\r\n    QueryTask,\r\n    Query,\r\n    StatisticDefinition,\r\n    geometryEngine,\r\n    Point,\r\n    Message,\r\n    all,\r\n    esriRequest,\r\n    CustomException\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la subdivisión de lotes\r\n    */\r\n\r\n    // class ErrorEqualUrbanLotWithinBlock extends Error {\r\n    //     constructor(message) {\r\n    //         super(message);\r\n    //     }\r\n    // }\r\n\r\n    const UtilityCase = {\r\n\r\n        ubigeoFieldName: 'UBIGEO',\r\n        platformUpdate: 'PCF',\r\n        estadoInsValue: 1,\r\n        estadoValue: 1,\r\n        codUiValue: 1,\r\n        estadoPartidaValue: 0,\r\n        tipoResolucionValue: \"1\",\r\n\r\n        Land() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.codPre = 'COD_PRE';\r\n            this.codUi = 'COD_UI';\r\n            this.estado = 'ESTADO';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.codVer = 'COD_VER';\r\n            this.codCpu = 'COD_CPU';\r\n            this.dirMun = 'DIR_MUN';\r\n            this.dirUrb = 'DIR_URB';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.tipVia = 'TIP_VIA';\r\n            this.nomVia = 'NOM_VIA';\r\n            this.numMun = 'NUM_MUN';\r\n            this.idMznC = 'ID_MZN_C';\r\n            this.idPred = 'ID_PRED';\r\n            this.tipPred = 'TIP_PRED';\r\n            this.partida = 'PARTIDA';\r\n            this.estadoPartida = 'ESTADO_PARTIDA';\r\n            this.piso = 'PISO';\r\n        },\r\n        PointLot() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.idLote = 'ID_LOTE'\r\n            this.secuen = 'SECUEN';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.zonaUtm = 'ZONA_UTM';\r\n            this.estadoIns = 'ESTADO_INS';\r\n            this.tipLot = 'TIP_LOT';\r\n        },\r\n        Lot() {\r\n            this.idLotP = 'ID_LOTE_P';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.anoCart = 'ANO_CART';\r\n            this.fuente = 'FUENTE';\r\n            this.nomPc = 'NOM_PC';\r\n            this.nomUser = 'NOM_USER';\r\n            this.codLot = 'COD_LOTE';\r\n            this.lotUrb = 'LOT_URB';\r\n            this.ubigeo = 'UBIGEO';\r\n            this.tipLot = 'TIP_LOT';\r\n            this.estadoIns = 'ESTADO_INS';\r\n        },\r\n        Arancel() {\r\n            this.secEjec = 'SEC_EJEC';\r\n\r\n        },\r\n\r\n        receptionModelRequest() {\r\n            return [\r\n                \"COD_PRE\",\r\n                \"COD_CPU\",\r\n                \"COD_SECT\",\r\n                \"COD_MZN\",\r\n                \"COD_LOTE\",\r\n                \"COD_UU\",\r\n                \"COD_VIA\",\r\n                \"TIPO_UU\",\r\n                \"NOM_UU\",\r\n                \"NOM_REF\",\r\n                \"MZN_URB\",\r\n                \"LOT_URB\",\r\n                \"TIP_VIA\",\r\n                \"NOM_VIA\",\r\n                \"CUADRA\",\r\n                \"LADO\",\r\n                \"DIR_MUN\",\r\n                \"DIR_URB\",\r\n                \"COORD_X\",\r\n                \"COORD_Y\",\r\n                \"RAN_CPU\",\r\n                \"COD_UI\",\r\n                \"COD_VER\",\r\n                \"ID_LOTE_P\",\r\n                \"ID\",\r\n                'id_lote_puerta',\r\n                'longitude_puerta',\r\n                'latitude_puerta',\r\n                'lote_urbano_puerta',\r\n                'manzana_urbana_puerta',\r\n            ]\r\n        },\r\n\r\n        matchWithReceptionModel(object) {\r\n            const modelRequests = this.receptionModelRequest();\r\n            const response = object.map((land) => {\r\n                const arrayMatch = {};\r\n                modelRequests.forEach((field) => {\r\n                    arrayMatch[field] = land.attributes[field];\r\n                })\r\n                return arrayMatch;\r\n            })\r\n            return response;\r\n        },\r\n\r\n        getFeatureSchema(url, geometry = true, blankFields = true) {\r\n            const deferred = new Deferred();\r\n            const queryTask = new QueryTask(url);\r\n            const query = new Query();\r\n            query.where = \"1=1\";\r\n            query.returnGeometry = geometry;\r\n            query.outFields = [\"*\"];\r\n            query.num = 1;\r\n            queryTask.execute(query)\r\n                .then(result => {\r\n                    const feature = result.features[0];\r\n                    if (blankFields) {\r\n                        for (let prop in feature.attributes) {\r\n                            feature.attributes[prop] = null;\r\n                        }\r\n                    }\r\n                    return deferred.resolve(feature);\r\n                })\r\n                .catch(err => {\r\n                    deferred.reject(err);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        attributeTransfer({ objTarget, objBase, propsUse = [], propsOmit = [], updateOnlyNulls = false, omitPropsDefault = true, deletePropsDefault = true }) {\r\n            let fieldMatch = []\r\n            const propsOmitDefault = [\r\n                'FUENTE',\r\n                'NOM_PC',\r\n                'NOM_USER',\r\n                'ANO_CART'\r\n            ]\r\n            const propsDeleteDefault = [\r\n                'OBJECTID',\r\n                'GlobalID',\r\n                'created_date',\r\n                'created_user',\r\n                'last_edited_date',\r\n                'last_edited_user',\r\n                'Shape.STArea()',\r\n                'Shape.STLength()',\r\n            ];\r\n\r\n            if (deletePropsDefault) {\r\n                for (let prop in objTarget) {\r\n                    if (propsDeleteDefault.includes(prop)) {\r\n                        delete objTarget[prop];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (propsUse.length > 0) {\r\n                fieldMatch = propsUse\r\n            } else {\r\n                const props1 = Object.keys(objTarget);\r\n                const props2 = Object.keys(objBase);\r\n                fieldMatch = props1.filter(prop => props2.includes(prop));\r\n            }\r\n            // retirar los campos omitidos\r\n            if (propsOmit.length > 0) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmit.includes(prop));\r\n            }\r\n\r\n            // retirar los campos omitidos por defecto de objBase\r\n            if (omitPropsDefault) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmitDefault.includes(prop));\r\n            }\r\n\r\n            fieldMatch.forEach(prop => {\r\n                if (objBase.hasOwnProperty(prop)) {\r\n                    if (updateOnlyNulls) {\r\n                        if (objTarget[prop] === null) {\r\n                            objTarget[prop] = objBase[prop];\r\n                        }\r\n                    } else {\r\n                        objTarget[prop] = objBase[prop];\r\n                    }\r\n                }\r\n            });\r\n\r\n            return objTarget;\r\n        },\r\n\r\n        getValueCodVer(ranCpu, codUi) {\r\n            const factor = [2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7]\r\n            // Obteniendo código concatenado\r\n            const cod_ver_concatenate = ranCpu.toString() + (\"0000\" + codUi.toString()).slice(-4);\r\n\r\n            // Reversa de código concatenado\r\n            const cod_ver = cod_ver_concatenate.split('').reverse().join('');\r\n\r\n            // Aplicando fórmula\r\n            let response = 11 - (cod_ver.split('').map((digit, index) =>\r\n                parseInt(digit) * factor[index])\r\n                .reduce((a, b) => a + b, 0) % 11);\r\n\r\n            if (response > 9) {\r\n                response = 11 - response;\r\n            }\r\n\r\n            return response\r\n        },\r\n\r\n        getBlockFromLot(geometry, url) {\r\n            const deferred = new Deferred();\r\n\r\n            const queryBlock = new Query();\r\n            queryBlock.geometry = geometry;\r\n            queryBlock.outFields = ['*'];\r\n            queryBlock.returnGeometry = true;\r\n            const queryTaskBlock = new QueryTask(url);\r\n            queryTaskBlock.execute(queryBlock)\r\n                .then(response => {\r\n                    if (response.features.length === 0) {\r\n                        return deferred.reject(new Error(\"No se encontraron manzanas\"));\r\n                    }\r\n                    return deferred.resolve(response.features[0]);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkResolutionDocument(newLandsGraphics, ubigeo, urlLand) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n            const resolutionDocument = [];\r\n            newLandsGraphics.map(land => {\r\n                if (land.attributes.resolutionType === this.tipoResolucionValue) {\r\n                    resolutionDocument.push(land.attributes.resolutionDocument);\r\n                }\r\n            });\r\n            const queryLand = new Query();\r\n            queryLand.where = `${LandCls.partida} in ('${resolutionDocument.join(\"','\")}') and ${LandCls.ubigeo} = '${ubigeo}' and ${LandCls.estado} = ${this.estadoValue}`;\r\n            queryLand.returnGeometry = false;\r\n            queryLand.outFields = [LandCls.partida, LandCls.codCpu];\r\n            const queryTaskLand = new QueryTask(urlLand);\r\n            queryTaskLand.execute(queryLand)\r\n                .then(response => {\r\n                    if (response.features.length > 0) {\r\n                        const partidas = response.features.map(land => land.attributes[LandCls.partida]);\r\n                        const commonElements = resolutionDocument.filter(partida => partida.includes(partidas));\r\n                        // if (commonElements.length > 0) {\r\n                        const err = new Error(`La solicitud no se puede realizar porque se detectaron números de partida que ya están asignados a otros predios en el Catastro Fiscal.\\nPartidas existentes: ${commonElements}`);\r\n                        return deferred.reject(err);\r\n                        // }\r\n                    }\r\n                    return deferred.resolve();\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkExistLotUrban(attributes, block, urlLots, currentLots, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            const queryLot = new Query();\r\n            const idLotPArray = currentLots.map(i => i.attributes[LotCls.idLotP])\r\n            queryLot.where = `${LotCls.idLotP} not in (${idLotPArray.join(\",\")}) and ${LotCls.ubigeo} = '${ubigeo}'`;\r\n            queryLot.geometry = block.geometry\r\n            queryLot.spatialRel = \"within\";\r\n\r\n            queryLot.outFields = [LotCls.lotUrb];\r\n            const queryTaskLot = new QueryTask(urlLots);\r\n            const lotsUrban = attributes.map(attr => attr.lotUrb);\r\n            queryTaskLot.execute(queryLot)\r\n                .then(response => {\r\n                    const lots = response.features.map(lot => lot.attributes[LotCls.lotUrb]);\r\n                    const setLots = new Set(lots);\r\n                    const commonElements = lotsUrban.filter(lot => setLots.has(lot));\r\n                    // const exist = lotsUrban.some(lot => lots.includes(lot));\r\n                    if (commonElements.length > 0) {\r\n                        return deferred.reject(new Error(`La solicitud no se puede realizar porque los lotes resultantes de la subdivisión tienen denominaciones de lotes urbanos que ya existen en la manzana actual: ${commonElements}`));\r\n                    }\r\n                    return deferred.resolve(block);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkExistLotUrbanIntoLotsOriginal(attributes, currentLots, block) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            const lotUrbArray = currentLots.map(i => i.attributes[LotCls.lotUrb])\r\n            const lotsUrban = attributes.map(attr => attr.lotUrb);\r\n            const setLotsUrban = new Set(lotsUrban);\r\n            const repeatedElements = lotUrbArray.filter(lot => setLotsUrban.has(lot));\r\n            // const exist = lotsUrban.some(lot => lotUrbArray.includes(lot));\r\n            if (repeatedElements.length > 0) {\r\n                const mensaje = new Message({\r\n                    message: `Uno de los lotes resultantes tiene la misma denominación de un lote urbano original: ${repeatedElements}.\\n¿Desea continuar con el proceso?`,\r\n                    type: \"question\",\r\n                    buttons: [{\r\n                        label: \"Sí\",\r\n                        onClick: function () {\r\n                            deferred.resolve(block);\r\n                            mensaje.hide();\r\n                        }\r\n                    }, {\r\n                        label: \"No\",\r\n                        onClick: function () {\r\n                            deferred.reject(new CustomException.ErrorEqualUrbanLotWithinBlock());\r\n                            mensaje.hide();\r\n                        }\r\n                    }]\r\n                });\r\n            } else {\r\n                return deferred.resolve(block);\r\n            }\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkDuplicateLotUrbanResults(lotUrbArray) {\r\n            const elementCount = {};\r\n            lotUrbArray.forEach(item => {\r\n                if (elementCount[item]) {\r\n                    elementCount[item]++;\r\n                } else {\r\n                    elementCount[item] = 1;\r\n                }\r\n            });\r\n            const repeatedElements = Object.keys(elementCount).filter(key => elementCount[key] > 1);\r\n            return repeatedElements\r\n        },\r\n\r\n        translateFieldsBlockToLot(url, block, lotsResults) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            this.getFeatureSchema(url)\r\n                .then(lot => {\r\n                    const lots = lotsResults.map((graphic) => {\r\n                        const lotIdx = lot.clone();\r\n                        lotIdx.attributes = this.attributeTransfer({\r\n                            objTarget: lotIdx.attributes,\r\n                            objBase: block.attributes,\r\n                        });\r\n                        lotIdx.geometry = graphic.geometry;\r\n                        lotIdx.attributes[LotCls.tipLot] = graphic.attributes.tipLot;\r\n                        return lotIdx;\r\n                    });\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateTipLot(currentLotsRows) {\r\n            const LotCls = new this.Lot();\r\n            let tipLot = currentLotsRows.map(row => { return row.attributes[LotCls.tipLot] })\r\n            tipLot = [...new Set(tipLot)] == [2] ? '2' : '1'\r\n            return tipLot\r\n        },\r\n\r\n        calculateFieldsOfLot(lotUrl, lots, ubigeo, codRequests, user, attributes) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n\r\n            const queryLotTask = new QueryTask(lotUrl);\r\n\r\n            const queryLot = new Query();\r\n\r\n            queryLot.where = `${this.ubigeoFieldName} = '${ubigeo}'`;\r\n\r\n            const statDefIdLoteP = new StatisticDefinition();\r\n            statDefIdLoteP.statisticType = \"max\";\r\n            statDefIdLoteP.onStatisticField = LotCls.idLotP;\r\n            statDefIdLoteP.outStatisticFieldName = `${LotCls.idLotP}_MAX`;\r\n\r\n            const statDefRanCpu = new StatisticDefinition();\r\n            statDefRanCpu.statisticType = \"max\";\r\n            statDefRanCpu.onStatisticField = LotCls.ranCpu;\r\n            statDefRanCpu.outStatisticFieldName = `${LotCls.ranCpu}_MAX`;\r\n\r\n            queryLot.returnGeometry = false;\r\n            queryLot.outStatistics = [statDefIdLoteP, statDefRanCpu];\r\n\r\n            attributes.forEach((attr) => {\r\n                const point = new Point({\r\n                    x: attr.coords[0],\r\n                    y: attr.coords[1],\r\n                    spatialReference: { wkid: 4326 }\r\n                });\r\n                attr.geometry = point;\r\n            });\r\n\r\n            queryLotTask.execute(queryLot)\r\n                .then(response => {\r\n                    for (idx = 0; idx < lots.length; idx++) {\r\n                        // lots.forEach((lot, idx) => {\r\n                        lots[idx].attributes[LotCls.idLotP] = response.features[0].attributes[statDefIdLoteP.outStatisticFieldName] + idx + 1;\r\n                        lots[idx].attributes[LotCls.ranCpu] = response.features[0].attributes[statDefRanCpu.outStatisticFieldName] + idx + 1;\r\n                        lots[idx].attributes[LotCls.anoCart] = new Date().getFullYear();\r\n                        lots[idx].attributes[LotCls.fuente] = codRequests;\r\n                        lots[idx].attributes[LotCls.nomPc] = this.platformUpdate;\r\n                        lots[idx].attributes[LotCls.nomUser] = user;\r\n                        // lot.attributes[LotCls.tipLot] = tipLot;\r\n                        lots[idx].attributes[LotCls.estadoIns] = this.estadoInsValue;\r\n\r\n                        for (let attr of attributes) {\r\n                            if (geometryEngine.intersects(lots[idx].geometry, attr.geometry)) {\r\n                                lots[idx].attributes[LotCls.codLot] = attr.codLot;\r\n                                lots[idx].attributes[LotCls.lotUrb] = attr.lotUrb;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // lot.attributes[LotCls.codLot] = attributes[idx].codLot;\r\n                        // lot.attributes[LotCls.lotUrb] = attributes[idx].lotUrb;\r\n                    };\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsLotToPointLot(lots, urlPointLots, newPointLotsGraphics) {\r\n            const deferred = new Deferred();\r\n            const pointLots = [];\r\n\r\n            this.getFeatureSchema(urlPointLots)\r\n                .then(pointLot => {\r\n                    lots.forEach(lot => {\r\n                        const pointLotProps = pointLot.clone();\r\n                        pointLotProps.attributes = this.attributeTransfer({\r\n                            objTarget: pointLotProps.attributes,\r\n                            objBase: lot.attributes,\r\n                            omitPropsDefault: false,\r\n                            deletePropsDefault: true\r\n                        });\r\n\r\n                        for (let graph of newPointLotsGraphics) {\r\n                            if (!geometryEngine.intersects(lot.geometry, graph.geometry)) {\r\n                                continue;\r\n                            }\r\n\r\n                            const pointLotPropsClone = pointLotProps.clone();\r\n                            pointLotPropsClone.geometry = graph.geometry;\r\n                            pointLots.push(pointLotPropsClone);\r\n                        };\r\n                    });\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsArancelToPointLot(pointLots, arancelUrl) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            const promises = pointLots.map(pointLot => {\r\n                const queryArancelTask = new QueryTask(arancelUrl);\r\n                const queryArancel = new Query();\r\n                queryArancel.returnGeometry = true;\r\n                queryArancel.outFields = [\"*\"];\r\n                queryArancel.geometry = pointLot.geometry;\r\n                queryArancel.geometryType = \"esriGeometryPoint\";\r\n                return queryArancelTask.execute(queryArancel);\r\n            });\r\n            all(promises)\r\n                .then(arancels => {\r\n                    pointLots.forEach((element, index) => {\r\n                        if (element.attributes[LotCls.tipLot] !== 2) {\r\n                            const attributes = element.clone().attributes;\r\n                            const arancel = arancels[index].features[0].attributes;\r\n                            pointLots[index].attributes = this.attributeTransfer({\r\n                                objTarget: attributes,\r\n                                objBase: arancel,\r\n                                updateOnlyNulls: true\r\n                            });\r\n                            console.log(pointLots[index].attributes);\r\n                        }\r\n                    });\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateFieldsOfPointLot(pointLotUrl, ubigeo, pointLots) {\r\n            const deferred = new Deferred();\r\n            const PointLotCls = new this.PointLot();\r\n\r\n            const queryPointLotTask = new QueryTask(pointLotUrl);\r\n\r\n            const queryPointLot = new Query();\r\n            queryPointLot.where = `${PointLotCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = PointLotCls.secuen;\r\n            statDef.outStatisticFieldName = `${PointLotCls.secuen}_MAX`;\r\n\r\n            queryPointLot.returnGeometry = false;\r\n            queryPointLot.outStatistics = [statDef];\r\n\r\n            queryPointLotTask.execute(queryPointLot)\r\n                .then(response => {\r\n                    let secuen = response.features[0].attributes[statDef.outStatisticFieldName] + 1\r\n                    for (let i of pointLots) {\r\n                        i.attributes[PointLotCls.secuen] = secuen;\r\n                        i.attributes[PointLotCls.idLote] = `${i.attributes[PointLotCls.zonaUtm]}${ubigeo}${secuen}`;\r\n                        i.attributes[PointLotCls.estadoIns] = this.estadoInsValue;\r\n                        secuen += 1;\r\n                    }\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        generateCodCpu(ranCpu, codVer, codUi = 1) {\r\n            codUi = (\"0000\" + codUi.toString()).slice(-4);\r\n            return `${ranCpu}-${codUi}-${codVer}`;\r\n        },\r\n\r\n        generateDirMun(tipVia, nomVia, numMun) {\r\n            return `${tipVia || ''} ${nomVia || ''} ${numMun || ''}`;\r\n        },\r\n\r\n        generateDirUrb(tipVia, nomVia, numMun) {\r\n            return `${tipVia || ''} ${nomVia || ''} ${numMun || ''}`;\r\n        },\r\n\r\n        translateFieldsPointLotToLand(pointLots, landUrl, newLandsGraphics, codUiValue = null) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n            let lands = [];\r\n\r\n            this.getFeatureSchema(landUrl)\r\n                .then(land => {\r\n                    newLandsGraphics.forEach(landGraphic => {\r\n                        const attributes = landGraphic.attributes;\r\n\r\n                        for (i = 0; i < pointLots.length; i++) {\r\n                            // Validate location\r\n                            if (geometryEngine.intersects(landGraphic.geometry, pointLots[i].geometry)) {\r\n                                // Validate attributes lotUrb\r\n                                if (pointLots[i].attributes.LOT_URB != attributes.urbanLotNumber) {\r\n                                    throw new Error(`La solicitud no se puede realizar porque el predio del lote ${attributes.urbanLotNumber} se asignó al lote ${pointLots[i].attributes.LOT_URB}`);\r\n                                }\r\n                                const landProps = land.clone();\r\n                                landProps.attributes = this.attributeTransfer({\r\n                                    objTarget: landProps.attributes,\r\n                                    objBase: pointLots[i].attributes,\r\n                                    omitPropsDefault: false\r\n                                });\r\n                                landProps.attributes[LandCls.codPre] = attributes.cpm;\r\n                                landProps.attributes[LandCls.codUi] = codUiValue || this.codUiValue;\r\n                                landProps.attributes[LandCls.estado] = this.estadoValue;\r\n                                landProps.attributes[LandCls.coordX] = landGraphic.geometry.x;\r\n                                landProps.attributes[LandCls.coordY] = landGraphic.geometry.y;\r\n                                landProps.attributes[LandCls.codVer] = this.getValueCodVer(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    codUiValue || this.codUiValue\r\n                                );\r\n                                landProps.attributes[LandCls.codCpu] = this.generateCodCpu(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    landProps.attributes[LandCls.codVer],\r\n                                    codUiValue || this.codUiValue\r\n                                );\r\n\r\n                                landProps.geometry = landGraphic.geometry;\r\n                                if (attributes.resolutionType === this.tipoResolucionValue) {\r\n                                    landProps.attributes[LandCls.partida] = attributes.resolutionDocument\r\n                                    landProps.attributes[LandCls.estadoPartida] = this.estadoPartidaValue;\r\n                                }\r\n                                // if (attributes.floor){\r\n                                landProps.attributes[LandCls.piso] = attributes.floor;\r\n                                // }\r\n                                landProps.attributes['ID'] = parseInt(attributes.id.split('_')[1]);\r\n\r\n                                if (attributes.tipLot === 2) {\r\n                                    let rightOfWay = attributes.mediterraneanCoords;\r\n                                    if (attributes.mediterraneanCoords.attributes.tipLot) {\r\n                                        for (let pointLot of pointLots) {\r\n                                            if (geometryEngine.intersects(rightOfWay.geometry, pointLot.geometry)) {\r\n                                                rightOfWay = pointLot;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    landProps.attributes['ID_ARANC'] = rightOfWay.attributes['ID_ARANC'];\r\n                                    landProps.attributes['COD_VIA'] = rightOfWay.attributes['COD_VIA'];\r\n                                    landProps.attributes['TIP_VIA'] = rightOfWay.attributes['TIP_VIA'];\r\n                                    landProps.attributes['NOM_VIA'] = rightOfWay.attributes['NOM_VIA'];\r\n                                    landProps.attributes['CUADRA'] = rightOfWay.attributes['CUADRA'];\r\n                                    landProps.attributes['LADO'] = rightOfWay.attributes['LADO'];\r\n                                    landProps.attributes['VAL_ACT'] = rightOfWay.attributes['VAL_ACT'];\r\n                                    landProps.attributes['id_lote_sirv'] = rightOfWay.attributes['ID_LOTE'];\r\n\r\n                                    landProps.attributes['id_lote_puerta'] = rightOfWay.attributes['ID_LOTE'];\r\n                                    landProps.attributes['longitude_puerta'] = rightOfWay.geometry.x;\r\n                                    landProps.attributes['latitude_puerta'] = rightOfWay.geometry.y;\r\n                                    landProps.attributes['lote_urbano_puerta'] = rightOfWay.attributes['LOT_URB'];\r\n                                    landProps.attributes['manzana_urbana_puerta'] = rightOfWay.attributes['MZN_URB'];\r\n\r\n                                }\r\n                                landProps.attributes[LandCls.dirMun] = this.generateDirMun(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n                                landProps.attributes[LandCls.dirUrb] = this.generateDirUrb(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n\r\n                                if (codUiValue) {\r\n                                    codUiValue += 1;\r\n                                }\r\n\r\n                                lands.push(landProps.clone());\r\n\r\n\r\n\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdMznC(lands, cadastralBlockUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryCadastralBlockTask = new QueryTask(cadastralBlockUrl);\r\n            const queryCadastralBlock = new Query();\r\n            queryCadastralBlock.where = `${LandCls.ubigeo} = '${ubigeo}'`;\r\n            queryCadastralBlock.returnGeometry = true;\r\n            queryCadastralBlock.outFields = [LandCls.idMznC];\r\n            queryCadastralBlock.geometry = lands[0].geometry;\r\n\r\n            queryCadastralBlockTask.execute(queryCadastralBlock)\r\n                .then(response => {\r\n                    lands.forEach(land => {\r\n                        land.attributes[LandCls.idMznC] = response.features[0].attributes[LandCls.idMznC];\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdPred(lands, landUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryLandTask = new QueryTask(landUrl);\r\n            const queryLand = new Query();\r\n            queryLand.returnGeometry = false;\r\n            queryLand.where = `${LandCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = LandCls.idPred;\r\n            statDef.outStatisticFieldName = `${LandCls.idPred}_MAX`;\r\n            queryLand.outStatistics = [statDef];\r\n\r\n            queryLandTask.execute(queryLand)\r\n                .then(function (response) {\r\n                    lands.forEach((land, idx) => {\r\n                        land.attributes[LandCls.idPred] = response.features[0].attributes[statDef.outStatisticFieldName] + idx + 1;\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                }, function (error) {\r\n                    deferred.reject(error);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        getPointLotsOrigin(pointLotUrl, lots, query = null) {\r\n            const queryPointLotsOriginTask = new QueryTask(pointLotUrl);\r\n            const queryPointLotsOrigin = new Query();\r\n            queryPointLotsOrigin.returnGeometry = true;\r\n            queryPointLotsOrigin.outFields = [\"*\"];\r\n            if (query) {\r\n                queryPointLotsOrigin.where = query;\r\n            } else {\r\n                queryPointLotsOrigin.geometry = lots.geometry;\r\n                queryPointLotsOrigin.geometryType = \"esriGeometryPolygon\";\r\n                queryPointLotsOrigin.distance = 0.2;\r\n                queryPointLotsOrigin.units = \"meters\";\r\n            }\r\n\r\n            return queryPointLotsOriginTask.execute(queryPointLotsOrigin);\r\n        },\r\n\r\n        getLandsOrigin(landUrl, lots, query = null) {\r\n            const queryLandsOriginTask = new QueryTask(landUrl);\r\n            const queryLandsOrigin = new Query();\r\n            queryLandsOrigin.returnGeometry = true;\r\n            queryLandsOrigin.outFields = [\"*\"];\r\n            if (query) {\r\n                queryLandsOrigin.where = query;\r\n            } else {\r\n                queryLandsOrigin.geometry = lots.geometry;\r\n                queryLandsOrigin.geometryType = \"esriGeometryPolygon\";\r\n                queryLandsOrigin.distance = 0.2;\r\n                queryLandsOrigin.units = \"meters\";\r\n            }\r\n\r\n            return queryLandsOriginTask.execute(queryLandsOrigin);\r\n        },\r\n\r\n        getLandsOriginByQuery(landUrl, cpu) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryLandsOriginTask = new QueryTask(landUrl);\r\n            const queryLandsOrigin = new Query();\r\n            queryLandsOrigin.returnGeometry = true;\r\n            queryLandsOrigin.outFields = [\"*\"];\r\n            queryLandsOrigin.where = `${LandCls.codCpu} = '${cpu}'`;\r\n            queryLandsOriginTask.execute(queryLandsOrigin)\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateRowsGeneric(features, codRequest, user, status = 0) {\r\n            const LandCls = new this.Land();\r\n            const LotCls = new this.Lot();\r\n            features.forEach(feature => {\r\n                feature.attributes[LandCls.estado] = status;\r\n                feature.attributes[LotCls.fuente] = codRequest;\r\n                feature.attributes[LotCls.nomUser] = user;\r\n                feature.attributes[LotCls.nomPc] = this.platformUpdate;\r\n                feature.attributes[LotCls.anoCart] = new Date().getFullYear();\r\n            });\r\n            return features;\r\n        },\r\n\r\n        getDataOrigin(pointLotUrl, landUrl, lots, queryLots = null) {\r\n            // const self = this;\r\n            const deferred = new Deferred();\r\n\r\n            const promises = [\r\n                this.getPointLotsOrigin(pointLotUrl, lots, queryLots),\r\n                this.getLandsOrigin(landUrl, lots, queryLots)\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    // self.currentPoinLotsRows = results[0].features;\r\n                    // self.currentLandsRows = results[1].features;\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        setParametersToAddFeatures(url, params) {\r\n            return {\r\n                url: `${url}/addFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToUpdateFeatures(url, params) {\r\n            return {\r\n                url: `${url}/updateFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToDeleteFeatures(url, params) {\r\n            return {\r\n                url: `${url}/deleteFeatures`,\r\n                content: {\r\n                    where: params,\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n\r\n        sendDataOriginToHistoric(config, currentLotsRows, currentPoinLotsRows, currentLandsRows) {\r\n            const deferred = new Deferred();\r\n            const promises = [];\r\n\r\n            if (currentLotsRows) {\r\n                const lotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.lotHistoricUrl,\r\n                    currentLotsRows\r\n                );\r\n                promises.push(esriRequest(lotsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            if (currentPoinLotsRows) {\r\n                const pointsLotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.pointLotHistoricUrl,\r\n                    currentPoinLotsRows\r\n                );\r\n                promises.push(esriRequest(pointsLotsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            if (currentLandsRows) {\r\n                const landsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.landHistoricUrl,\r\n                    currentLandsRows\r\n                );\r\n                promises.push(esriRequest(landsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        deleteDataOrigin(currentLotsRows, currentPoinLotsRows, currentLandsRows, config) {\r\n            const deferred = new Deferred();\r\n\r\n            const objetidLot = currentLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidPointLot = currentPoinLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidLand = currentLandsRows.map(row => row.attributes.OBJECTID);\r\n\r\n            const lotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.lotUrl,\r\n                `OBJECTID IN (${objetidLot.join(\",\")})`,\r\n            );\r\n            const pointsLotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.pointLotUrl,\r\n                `OBJECTID IN (${objetidPointLot.join(\",\")})`,\r\n            );\r\n            const landsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.landUrl,\r\n                `OBJECTID IN (${objetidLand.join(\",\")})`,\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(pointsLotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(landsDeleteRequestOptions, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateDataDeactivate(lands, config) {\r\n            const deferred = new Deferred();\r\n            const deactivateFeatures = this.setParametersToUpdateFeatures(\r\n                config.landUrl,\r\n                lands\r\n            )\r\n\r\n            esriRequest(deactivateFeatures, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateDataLotsDeactivate(lots, config) {\r\n            const deferred = new Deferred();\r\n            const updateLotFeature = this.setParametersToUpdateFeatures(\r\n                config.lotUrl,\r\n                lots\r\n            )\r\n\r\n            esriRequest(updateLotFeature, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        addDataNew(lots, pointLots, lands, config) {\r\n            const deferred = new Deferred();\r\n\r\n            lots = Array.isArray(lots) ? lots : [lots]\r\n\r\n            const lotNews = this.setParametersToAddFeatures(\r\n                config.lotUrl,\r\n                lots\r\n            );\r\n\r\n            pointLots = Array.isArray(pointLots) ? pointLots : [pointLots]\r\n\r\n            const pointLotsNews = this.setParametersToAddFeatures(\r\n                config.pointLotUrl,\r\n                pointLots\r\n            );\r\n\r\n            lands = Array.isArray(lands) ? lands : [lands]\r\n\r\n            const landsNews = this.setParametersToAddFeatures(\r\n                config.landUrl,\r\n                lands\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotNews, { usePost: true }),\r\n                esriRequest(pointLotsNews, { usePost: true }),\r\n                esriRequest(landsNews, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        // updateStatusRequests(lands, codRequests, caseRequest, ubigeo, config, idLandInactive = []) {\r\n        //     const deferred = new Deferred();\r\n        //     const responseLands = UtilityCase.matchWithReceptionModel(lands)\r\n        //     const messageText = `Se actualizó la cartografía, pero no se pudo actualizar el estado de la solicitud. Por favor, contacte al administrador de la plataforma.`;\r\n\r\n        //     const response = {\r\n        //         id: codRequests,\r\n        //         results: responseLands,\r\n        //         idType: parseInt(caseRequest),\r\n        //         idLandInactive: idLandInactive\r\n        //     }\r\n        //     for (let predio of response.results) {\r\n        //         predio['ubigeo'] = ubigeo;\r\n        //     }\r\n\r\n        //     fetch(config.updateStatusApplication, {\r\n        //         method: 'POST',\r\n        //         body: JSON.stringify(response),\r\n        //         headers: {\r\n        //             'Content-Type': 'application/json'\r\n        //         }\r\n        //     })\r\n        //         .then(response => {\r\n        //             if (!response.ok) {\r\n        //                 return response.json()\r\n        //                     .then(errorData => {\r\n        //                         throw new Error(`${messageText}.\\nError: ${errorData.error}`);\r\n        //                     })\r\n        //                     .catch(() => {\r\n        //                         throw new Error(messageText);\r\n        //                     });\r\n        //             }\r\n        //             return response.json();\r\n        //         })\r\n        //         .then(data => deferred.resolve(data))\r\n        //         .catch(err => deferred.reject(err));\r\n        //     return deferred.promise;\r\n        // },\r\n\r\n        updateStatusRequests(lands, codRequests, caseRequest, ubigeo, config, idLandInactive = []) {\r\n            const deferred = new Deferred();\r\n            const responseLands = UtilityCase.matchWithReceptionModel(lands)\r\n            const messageText = `Se actualizó la cartografía, pero no se pudo actualizar el estado de la solicitud. Por favor, contacte al administrador de la plataforma.`;\r\n\r\n            const response = {\r\n                id: codRequests,\r\n                results: responseLands,\r\n                idType: parseInt(caseRequest),\r\n                idLandInactive: idLandInactive\r\n            }\r\n            for (let predio of response.results) {\r\n                predio['ubigeo'] = ubigeo;\r\n            }\r\n\r\n            const fetchUpdateStatus = (retry = false) => {\r\n                fetch(config.updateStatusApplication, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(response),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                    .then(response => {\r\n                        if (!response.ok) {\r\n                            return response.json()\r\n                                .then(errorData => {\r\n                                    throw new Error(`${messageText}.\\nError: ${errorData.error}`);\r\n                                })\r\n                                .catch(() => {\r\n                                    throw new Error(messageText);\r\n                                });\r\n                        }\r\n                        return response.json();\r\n                    })\r\n                    .then(data => deferred.resolve(data))\r\n                    .catch(err => {\r\n                        if (!retry) {\r\n                            // Reintentar una vez más\r\n                            fetchUpdateStatus(true);\r\n                        } else {\r\n                            deferred.reject(err);\r\n                        }\r\n                    });\r\n            };\r\n\r\n            // Iniciar el primer intento de fetch\r\n            fetchUpdateStatus();\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkLotsWithinLands(lots, lands) {\r\n            for (let lot of lots) {\r\n                const checkLands = []\r\n                for (let land of lands) {\r\n                    checkLands.push(geometryEngine.intersects(lot.geometry, land.geometry))\r\n                }\r\n                if (checkLands.every(i => i === false)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        },\r\n\r\n        checkLandsWithinLot(lot, urlLands) {\r\n            const deferred = new Deferred();\r\n            const landCls = new this.Land();\r\n            const queryLands = new Query();\r\n            queryLands.geometry = lot.geometry;\r\n            queryLands.distance = 0.5;\r\n            queryLands.units = \"meters\";\r\n            queryLands.where = `${landCls.estado} = 1 `;\r\n            const queryTaskLands = new QueryTask(urlLands);\r\n            queryTaskLands.execute(queryLands)\r\n                .then(response => {\r\n                    const result = response.features.length > 0 ? 1 : 0;\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n    };\r\n\r\n    return UtilityCase;\r\n});"]}