{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/UtilityCase.js"],"names":["define","Deferred","QueryTask","Query","StatisticDefinition","geometryEngine","Point","Message","all","esriRequest","CustomException","UtilityCase","ubigeoFieldName","platformUpdate","estadoInsValue","estadoValue","codUiValue","estadoPartidaValue","tipoResolucionValue","Land","ubigeo","codPre","codUi","estado","coordX","coordY","codVer","codCpu","dirMun","dirUrb","ranCpu","tipVia","nomVia","numMun","idMznC","idPred","tipPred","partida","estadoPartida","piso","PointLot","idLote","secuen","zonaUtm","estadoIns","Lot","idLotP","anoCart","fuente","nomPc","nomUser","codLot","lotUrb","tipLot","Arancel","secEjec","receptionModelRequest","matchWithReceptionModel","object","modelRequests","response","map","land","arrayMatch","forEach","field","attributes","getFeatureSchema","url","geometry","blankFields","deferred","queryTask","query","where","returnGeometry","outFields","num","execute","then","feature","result","features","prop","resolve","catch","reject","err","promise","attributeTransfer","objTarget","objBase","propsUse","propsOmit","updateOnlyNulls","omitPropsDefault","deletePropsDefault","fieldMatch","propsOmitDefault","propsDeleteDefault","includes","length","props1","Object","keys","props2","filter","hasOwnProperty","getValueCodVer","factor","cod_ver_concatenate","toString","slice","cod_ver","split","reverse","join","digit","index","parseInt","reduce","a","b","getBlockFromLot","queryBlock","queryTaskBlock","Error","checkExistLotUrban","block","urlLots","currentLots","LotCls","queryLot","idLotPArray","i","spatialRel","queryTaskLot","lotsUrban","attr","lots","lot","setLots","Set","commonElements","has","checkExistLotUrbanIntoLotsOriginal","lotUrbArray","setLotsUrban","repeatedElements","mensaje","message","type","buttons","label","onClick","hide","ErrorEqualUrbanLotWithinBlock","checkDuplicateLotUrbanResults","elementCount","item","key","translateFieldsBlockToLot","lotsResults","graphic","lotIdx","clone","calculateTipLot","currentLotsRows","row","calculateFieldsOfLot","lotUrl","codRequests","user","queryLotTask","statDefIdLoteP","statisticType","onStatisticField","outStatisticFieldName","statDefRanCpu","outStatistics","point","x","coords","y","spatialReference","wkid","idx","Date","getFullYear","intersects","translateFieldsLotToPointLot","urlPointLots","newPointLotsGraphics","pointLots","pointLot","graph","pointLotIdx","push","translateFieldsArancelToPointLot","arancelUrl","promises","queryArancelTask","queryArancel","geometryType","element","arancel","arancels","calculateFieldsOfPointLot","pointLotUrl","PointLotCls","queryPointLotTask","queryPointLot","statDef","generateCodCpu","generateDirMun","generateDirUrb","translateFieldsPointLotToLand","landUrl","newLandsGraphics","LandCls","lands","landGraphic","LOT_URB","urbanLotNumber","landProps","resolutionType","resolutionDocument","floor","id","calculateIdMznC","cadastralBlockUrl","queryCadastralBlockTask","queryCadastralBlock","calculateIdPred","queryLandTask","queryLand","error","getPointLotsOrigin","queryPointLotsOriginTask","queryPointLotsOrigin","distance","units","getLandsOrigin","queryLandsOriginTask","queryLandsOrigin","getLandsOriginByQuery","cpu","updateRowsGeneric","codRequest","getDataOrigin","queryLots","results","setParametersToAddFeatures","params","content","JSON","stringify","f","handleAs","callbackParamName","setParametersToUpdateFeatures","setParametersToDeleteFeatures","sendDataOriginToHistoric","config","currentPoinLotsRows","currentLandsRows","lotsHistoricRequestOptions","lotHistoricUrl","usePost","pointsLotsHistoricRequestOptions","pointLotHistoricUrl","landsHistoricRequestOptions","landHistoricUrl","deleteDataOrigin","objetidLot","OBJECTID","objetidPointLot","objetidLand","lotsDeleteRequestOptions","pointsLotsDeleteRequestOptions","landsDeleteRequestOptions","updateDataDeactivate","deactivateFeatures","updateDataLotsDeactivate","updateLotFeature","addDataNew","Array","isArray","lotNews","pointLotsNews","landsNews","updateStatusRequests","caseRequest","idLandInactive","responseLands","messageText","idType","predio","fetchUpdateStatus","retry","fetch","updateStatusApplication","method","body","headers","ok","json","errorData","data","checkLotsWithinLands","checkLands","every","checkLandsWithinLot","urlLands","landCls","queryLands","queryTaskLands"],"mappings":"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","file":"UtilityCase.js","sourcesContent":["define([\r\n    \"dojo/Deferred\",\r\n    \"esri/tasks/QueryTask\",\r\n    \"esri/tasks/query\",\r\n    \"esri/tasks/StatisticDefinition\",\r\n    \"esri/geometry/geometryEngine\",\r\n    \"esri/geometry/Point\",\r\n    \"jimu/dijit/Message\",\r\n    \"dojo/promise/all\",\r\n    \"esri/request\",\r\n    \"./CustomException\",\r\n], function (\r\n    Deferred,\r\n    QueryTask,\r\n    Query,\r\n    StatisticDefinition,\r\n    geometryEngine,\r\n    Point,\r\n    Message,\r\n    all,\r\n    esriRequest,\r\n    CustomException\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la subdivisión de lotes\r\n    */\r\n\r\n    // class ErrorEqualUrbanLotWithinBlock extends Error {\r\n    //     constructor(message) {\r\n    //         super(message);\r\n    //     }\r\n    // }\r\n\r\n    const UtilityCase = {\r\n\r\n        ubigeoFieldName: 'UBIGEO',\r\n        platformUpdate: 'PCF',\r\n        estadoInsValue: 1,\r\n        estadoValue: 1,\r\n        codUiValue: 1,\r\n        estadoPartidaValue: 0,\r\n        tipoResolucionValue: \"1\",\r\n\r\n        Land() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.codPre = 'COD_PRE';\r\n            this.codUi = 'COD_UI';\r\n            this.estado = 'ESTADO';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.codVer = 'COD_VER';\r\n            this.codCpu = 'COD_CPU';\r\n            this.dirMun = 'DIR_MUN';\r\n            this.dirUrb = 'DIR_URB';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.tipVia = 'TIP_VIA';\r\n            this.nomVia = 'NOM_VIA';\r\n            this.numMun = 'NUM_MUN';\r\n            this.idMznC = 'ID_MZN_C';\r\n            this.idPred = 'ID_PRED';\r\n            this.tipPred = 'TIP_PRED';\r\n            this.partida = 'PARTIDA';\r\n            this.estadoPartida = 'ESTADO_PARTIDA';\r\n            this.piso = 'PISO';\r\n        },\r\n        PointLot() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.idLote = 'ID_LOTE'\r\n            this.secuen = 'SECUEN';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.zonaUtm = 'ZONA_UTM';\r\n            this.estadoIns = 'ESTADO_INS'\r\n        },\r\n        Lot() {\r\n            this.idLotP = 'ID_LOTE_P';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.anoCart = 'ANO_CART';\r\n            this.fuente = 'FUENTE';\r\n            this.nomPc = 'NOM_PC';\r\n            this.nomUser = 'NOM_USER';\r\n            this.codLot = 'COD_LOTE';\r\n            this.lotUrb = 'LOT_URB';\r\n            this.ubigeo = 'UBIGEO';\r\n            this.tipLot = 'TIP_LOT';\r\n            this.estadoIns = 'ESTADO_INS';\r\n        },\r\n        Arancel() {\r\n            this.secEjec = 'SEC_EJEC';\r\n\r\n        },\r\n\r\n        receptionModelRequest() {\r\n            return [\r\n                \"COD_PRE\",\r\n                \"COD_CPU\",\r\n                \"COD_SECT\",\r\n                \"COD_MZN\",\r\n                \"COD_LOTE\",\r\n                \"COD_UU\",\r\n                \"COD_VIA\",\r\n                \"TIPO_UU\",\r\n                \"NOM_UU\",\r\n                \"NOM_REF\",\r\n                \"MZN_URB\",\r\n                \"LOT_URB\",\r\n                \"TIP_VIA\",\r\n                \"NOM_VIA\",\r\n                \"CUADRA\",\r\n                \"LADO\",\r\n                \"DIR_MUN\",\r\n                \"DIR_URB\",\r\n                \"COORD_X\",\r\n                \"COORD_Y\",\r\n                \"RAN_CPU\",\r\n                \"COD_UI\",\r\n                \"COD_VER\",\r\n                \"ID_LOTE_P\",\r\n                \"ID\"\r\n            ]\r\n        },\r\n\r\n        matchWithReceptionModel(object) {\r\n            const modelRequests = this.receptionModelRequest();\r\n            const response = object.map((land) => {\r\n                const arrayMatch = {};\r\n                modelRequests.forEach((field) => {\r\n                    arrayMatch[field] = land.attributes[field];\r\n                })\r\n                return arrayMatch;\r\n            })\r\n            return response;\r\n        },\r\n\r\n        getFeatureSchema(url, geometry = true, blankFields = true) {\r\n            const deferred = new Deferred();\r\n            const queryTask = new QueryTask(url);\r\n            const query = new Query();\r\n            query.where = \"1=1\";\r\n            query.returnGeometry = geometry;\r\n            query.outFields = [\"*\"];\r\n            query.num = 1;\r\n            queryTask.execute(query)\r\n                .then(result => {\r\n                    const feature = result.features[0];\r\n                    if (blankFields) {\r\n                        for (let prop in feature.attributes) {\r\n                            feature.attributes[prop] = null;\r\n                        }\r\n                    }\r\n                    return deferred.resolve(feature);\r\n                })\r\n                .catch(err => {\r\n                    deferred.reject(err);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        attributeTransfer({ objTarget, objBase, propsUse = [], propsOmit = [], updateOnlyNulls = false, omitPropsDefault = true, deletePropsDefault = true }) {\r\n            let fieldMatch = []\r\n            const propsOmitDefault = [\r\n                'FUENTE',\r\n                'NOM_PC',\r\n                'NOM_USER',\r\n                'ANO_CART'\r\n            ]\r\n            const propsDeleteDefault = [\r\n                'OBJECTID',\r\n                'GlobalID',\r\n                'created_date',\r\n                'created_user',\r\n                'last_edited_date',\r\n                'last_edited_user',\r\n                'Shape.STArea()',\r\n                'Shape.STLength()',\r\n            ];\r\n\r\n            if (deletePropsDefault) {\r\n                for (let prop in objTarget) {\r\n                    if (propsDeleteDefault.includes(prop)) {\r\n                        delete objTarget[prop];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (propsUse.length > 0) {\r\n                fieldMatch = propsUse\r\n            } else {\r\n                const props1 = Object.keys(objTarget);\r\n                const props2 = Object.keys(objBase);\r\n                fieldMatch = props1.filter(prop => props2.includes(prop));\r\n            }\r\n            // retirar los campos omitidos\r\n            if (propsOmit.length > 0) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmit.includes(prop));\r\n            }\r\n\r\n            // retirar los campos omitidos por defecto de objBase\r\n            if (omitPropsDefault) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmitDefault.includes(prop));\r\n            }\r\n\r\n            fieldMatch.forEach(prop => {\r\n                if (objBase.hasOwnProperty(prop)) {\r\n                    if (updateOnlyNulls) {\r\n                        if (objTarget[prop] === null) {\r\n                            objTarget[prop] = objBase[prop];\r\n                        }\r\n                    } else {\r\n                        objTarget[prop] = objBase[prop];\r\n                    }\r\n                }\r\n            });\r\n\r\n            return objTarget;\r\n        },\r\n\r\n        getValueCodVer(ranCpu, codUi) {\r\n            const factor = [2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7]\r\n            // Obteniendo código concatenado\r\n            const cod_ver_concatenate = ranCpu.toString() + (\"0000\" + codUi.toString()).slice(-4);\r\n\r\n            // Reversa de código concatenado\r\n            const cod_ver = cod_ver_concatenate.split('').reverse().join('');\r\n\r\n            // Aplicando fórmula\r\n            let response = 11 - (cod_ver.split('').map((digit, index) =>\r\n                parseInt(digit) * factor[index])\r\n                .reduce((a, b) => a + b, 0) % 11);\r\n\r\n            if (response > 9) {\r\n                response = 11 - response;\r\n            }\r\n\r\n            return response\r\n        },\r\n\r\n        getBlockFromLot(geometry, url) {\r\n            const deferred = new Deferred();\r\n\r\n            const queryBlock = new Query();\r\n            queryBlock.geometry = geometry;\r\n            queryBlock.outFields = ['*'];\r\n            queryBlock.returnGeometry = true;\r\n            const queryTaskBlock = new QueryTask(url);\r\n            queryTaskBlock.execute(queryBlock)\r\n                .then(response => {\r\n                    if (response.features.length === 0) {\r\n                        return deferred.reject(new Error(\"No se encontraron manzanas\"));\r\n                    }\r\n                    return deferred.resolve(response.features[0]);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkExistLotUrban(attributes, block, urlLots, currentLots, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            const queryLot = new Query();\r\n            const idLotPArray = currentLots.map(i => i.attributes[LotCls.idLotP])\r\n            queryLot.where = `${LotCls.idLotP} not in (${idLotPArray.join(\",\")}) and ${LotCls.ubigeo} = '${ubigeo}'`;\r\n            queryLot.geometry = block.geometry\r\n            queryLot.spatialRel = \"within\";\r\n\r\n            queryLot.outFields = [LotCls.lotUrb];\r\n            const queryTaskLot = new QueryTask(urlLots);\r\n            const lotsUrban = attributes.map(attr => attr.lotUrb);\r\n            queryTaskLot.execute(queryLot)\r\n                .then(response => {\r\n                    const lots = response.features.map(lot => lot.attributes[LotCls.lotUrb]);\r\n                    const setLots = new Set(lots);\r\n                    const commonElements = lotsUrban.filter(lot => setLots.has(lot));\r\n                    // const exist = lotsUrban.some(lot => lots.includes(lot));\r\n                    if (commonElements.length > 0) {\r\n                        return deferred.reject(new Error(`La solicitud no se puede realizar porque los lotes resultantes de la subdivisión tienen denominaciones de lotes urbanos que ya existen en la manzana actual: ${commonElements}`));\r\n                    }\r\n                    return deferred.resolve(block);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkExistLotUrbanIntoLotsOriginal(attributes, currentLots, block) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            const lotUrbArray = currentLots.map(i => i.attributes[LotCls.lotUrb])\r\n            const lotsUrban = attributes.map(attr => attr.lotUrb);\r\n            const setLotsUrban = new Set(lotsUrban);\r\n            const repeatedElements = lotUrbArray.filter(lot => setLotsUrban.has(lot));\r\n            // const exist = lotsUrban.some(lot => lotUrbArray.includes(lot));\r\n            if (repeatedElements.length > 0) {\r\n                const mensaje = new Message({\r\n                    message: `Uno de los lotes resultantes tiene la misma denominación de un lote urbano original: ${repeatedElements}.\\n¿Desea continuar con el proceso?`,\r\n                    type: \"question\",\r\n                    buttons: [{\r\n                        label: \"Sí\",\r\n                        onClick: function () {\r\n                            deferred.resolve(block);\r\n                            mensaje.hide();\r\n                        }\r\n                    }, {\r\n                        label: \"No\",\r\n                        onClick: function () {\r\n                            deferred.reject(new CustomException.ErrorEqualUrbanLotWithinBlock());\r\n                            mensaje.hide();\r\n                        }\r\n                    }]\r\n                });\r\n            } else {\r\n                return deferred.resolve(block);\r\n            }\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkDuplicateLotUrbanResults(lotUrbArray) {\r\n            const elementCount = {};\r\n            lotUrbArray.forEach(item => {\r\n                if (elementCount[item]) {\r\n                    elementCount[item]++;\r\n                } else {\r\n                    elementCount[item] = 1;\r\n                }\r\n            });\r\n            const repeatedElements = Object.keys(elementCount).filter(key => elementCount[key] > 1);\r\n            return repeatedElements\r\n        },\r\n\r\n        translateFieldsBlockToLot(url, block, lotsResults) {\r\n            const deferred = new Deferred();\r\n\r\n            this.getFeatureSchema(url)\r\n                .then(lot => {\r\n                    const lots = lotsResults.map((graphic) => {\r\n                        const lotIdx = lot.clone();\r\n                        lotIdx.attributes = this.attributeTransfer({\r\n                            objTarget: lotIdx.attributes,\r\n                            objBase: block.attributes,\r\n                        });\r\n                        lotIdx.geometry = graphic.geometry;\r\n                        return lotIdx;\r\n                    });\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateTipLot(currentLotsRows) {\r\n            const LotCls = new this.Lot();\r\n            let tipLot = currentLotsRows.map(row => { return row.attributes[LotCls.tipLot] })\r\n            tipLot = [...new Set(tipLot)] == [2] ? '2' : '1'\r\n            return tipLot\r\n        },\r\n\r\n        calculateFieldsOfLot(lotUrl, lots, ubigeo, codRequests, user, attributes, tipLot) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n\r\n            const queryLotTask = new QueryTask(lotUrl);\r\n\r\n            const queryLot = new Query();\r\n\r\n            queryLot.where = `${this.ubigeoFieldName} = '${ubigeo}'`;\r\n\r\n            const statDefIdLoteP = new StatisticDefinition();\r\n            statDefIdLoteP.statisticType = \"max\";\r\n            statDefIdLoteP.onStatisticField = LotCls.idLotP;\r\n            statDefIdLoteP.outStatisticFieldName = `${LotCls.idLotP}_MAX`;\r\n\r\n            const statDefRanCpu = new StatisticDefinition();\r\n            statDefRanCpu.statisticType = \"max\";\r\n            statDefRanCpu.onStatisticField = LotCls.ranCpu;\r\n            statDefRanCpu.outStatisticFieldName = `${LotCls.ranCpu}_MAX`;\r\n\r\n            queryLot.returnGeometry = false;\r\n            queryLot.outStatistics = [statDefIdLoteP, statDefRanCpu];\r\n\r\n            attributes.forEach((attr) => {\r\n                const point = new Point({\r\n                    x: attr.coords[0],\r\n                    y: attr.coords[1],\r\n                    spatialReference: { wkid: 4326 }\r\n                });\r\n                attr.geometry = point;\r\n            });\r\n\r\n            queryLotTask.execute(queryLot)\r\n                .then(response => {\r\n                    lots.forEach((lot, idx) => {\r\n                        lot.attributes[LotCls.idLotP] = response.features[0].attributes[statDefIdLoteP.outStatisticFieldName] + idx + 1;\r\n                        lot.attributes[LotCls.ranCpu] = response.features[0].attributes[statDefRanCpu.outStatisticFieldName] + idx + 1;\r\n                        lot.attributes[LotCls.anoCart] = new Date().getFullYear();\r\n                        lot.attributes[LotCls.fuente] = codRequests;\r\n                        lot.attributes[LotCls.nomPc] = this.platformUpdate;\r\n                        lot.attributes[LotCls.nomUser] = user;\r\n                        lot.attributes[LotCls.tipLot] = tipLot;\r\n                        lot.attributes[LotCls.estadoIns] = this.estadoInsValue;\r\n\r\n                        for (let attr of attributes) {\r\n                            if (geometryEngine.intersects(lot.geometry, attr.geometry)) {\r\n                                lot.attributes[LotCls.codLot] = attr.codLot;\r\n                                lot.attributes[LotCls.lotUrb] = attr.lotUrb;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // lot.attributes[LotCls.codLot] = attributes[idx].codLot;\r\n                        // lot.attributes[LotCls.lotUrb] = attributes[idx].lotUrb;\r\n                    });\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsLotToPointLot(lots, urlPointLots, newPointLotsGraphics) {\r\n            const deferred = new Deferred();\r\n            const pointLots = [];\r\n\r\n            this.getFeatureSchema(urlPointLots)\r\n                .then(pointLot => {\r\n                    lots.forEach(lot => {\r\n                        pointLot.attributes = this.attributeTransfer({\r\n                            objTarget: pointLot.attributes,\r\n                            objBase: lot.attributes,\r\n                            omitPropsDefault: false,\r\n                            deletePropsDefault: true\r\n                        });\r\n\r\n                        for (let graph of newPointLotsGraphics) {\r\n                            if (!geometryEngine.intersects(lot.geometry, graph.geometry)) {\r\n                                continue;\r\n                            }\r\n\r\n                            const pointLotIdx = pointLot.clone();\r\n                            pointLotIdx.geometry = graph.geometry;\r\n                            pointLots.push(pointLotIdx);\r\n                        };\r\n                    });\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsArancelToPointLot(pointLots, arancelUrl) {\r\n            const deferred = new Deferred();\r\n            const promises = pointLots.map(pointLot => {\r\n                const queryArancelTask = new QueryTask(arancelUrl);\r\n                const queryArancel = new Query();\r\n                queryArancel.returnGeometry = true;\r\n                queryArancel.outFields = [\"*\"];\r\n                queryArancel.geometry = pointLot.geometry;\r\n                queryArancel.geometryType = \"esriGeometryPoint\";\r\n                return queryArancelTask.execute(queryArancel);\r\n            });\r\n            all(promises)\r\n                .then(arancels => {\r\n                    pointLots.forEach((element, index) => {\r\n                        const arancel = arancels[index].features[0].attributes;\r\n                        pointLots[index].attributes = this.attributeTransfer({\r\n                            objTarget: element.attributes,\r\n                            objBase: arancel,\r\n                            updateOnlyNulls: true\r\n                        });\r\n                        return deferred.resolve(pointLots);\r\n                    });\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateFieldsOfPointLot(pointLotUrl, ubigeo, pointLots) {\r\n            const deferred = new Deferred();\r\n            const PointLotCls = new this.PointLot();\r\n\r\n            const queryPointLotTask = new QueryTask(pointLotUrl);\r\n\r\n            const queryPointLot = new Query();\r\n            queryPointLot.where = `${PointLotCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = PointLotCls.secuen;\r\n            statDef.outStatisticFieldName = `${PointLotCls.secuen}_MAX`;\r\n\r\n            queryPointLot.returnGeometry = false;\r\n            queryPointLot.outStatistics = [statDef];\r\n\r\n            queryPointLotTask.execute(queryPointLot)\r\n                .then(response => {\r\n                    let secuen = response.features[0].attributes[statDef.outStatisticFieldName] + 1\r\n                    for (let i of pointLots) {\r\n                        i.attributes[PointLotCls.secuen] = secuen;\r\n                        i.attributes[PointLotCls.idLote] = `${i.attributes[PointLotCls.zonaUtm]}${ubigeo}${secuen}`;\r\n                        i.attributes[PointLotCls.estadoIns] = this.estadoInsValue;\r\n                        secuen += 1;\r\n                    }\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        generateCodCpu(ranCpu, codVer, codUi = 1) {\r\n            codUi = (\"0000\" + codUi.toString()).slice(-4);\r\n            return `${ranCpu}-${codUi}-${codVer}`;\r\n        },\r\n\r\n        generateDirMun(tipVia, nomVia, numMun) {\r\n            return `${tipVia} ${nomVia} ${numMun}`;\r\n        },\r\n\r\n        generateDirUrb(tipVia, nomVia, numMun) {\r\n            return `${tipVia} ${nomVia} ${numMun}`;\r\n        },\r\n\r\n        translateFieldsPointLotToLand(pointLots, landUrl, newLandsGraphics) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n            let lands = [];\r\n\r\n            this.getFeatureSchema(landUrl)\r\n                .then(land => {\r\n                    newLandsGraphics.forEach(landGraphic => {\r\n                        for (i = 0; i < pointLots.length; i++) {\r\n                            // Validate location\r\n                            if (geometryEngine.intersects(landGraphic.geometry, pointLots[i].geometry)) {\r\n                                // Validate attributes lotUrb\r\n                                if (pointLots[i].attributes.LOT_URB != landGraphic.urbanLotNumber) {\r\n                                    throw new Error(`La solicitud no se puede realizar porque el predio del lote ${landGraphic.urbanLotNumber} se asignó al lote ${pointLots[i].attributes.LOT_URB}`);\r\n                                }\r\n                                const landProps = land.clone();\r\n                                landProps.attributes = this.attributeTransfer({\r\n                                    objTarget: land.attributes,\r\n                                    objBase: pointLots[i].attributes,\r\n                                    omitPropsDefault: false\r\n                                });\r\n                                landProps.attributes[LandCls.codPre] = landGraphic.codPre;\r\n                                landProps.attributes[LandCls.codUi] = this.codUiValue;\r\n                                landProps.attributes[LandCls.estado] = this.estadoValue;\r\n                                landProps.attributes[LandCls.coordX] = landGraphic.geometry.x;\r\n                                landProps.attributes[LandCls.coordY] = landGraphic.geometry.y;\r\n                                landProps.attributes[LandCls.codVer] = this.getValueCodVer(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    this.codUiValue\r\n                                );\r\n                                landProps.attributes[LandCls.codCpu] = this.generateCodCpu(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    landProps.attributes[LandCls.codVer]\r\n                                );\r\n                                landProps.attributes[LandCls.dirMun] = this.generateDirMun(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n                                landProps.attributes[LandCls.dirUrb] = this.generateDirUrb(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n\r\n                                landProps.geometry = landGraphic.geometry;\r\n                                if (landGraphic.resolutionType === this.tipoResolucionValue) {\r\n                                    landProps.attributes[LandCls.partida] = landGraphic.resolutionDocument\r\n                                    landProps.attributes[LandCls.estadoPartida] = this.estadoPartidaValue;\r\n                                }\r\n                                // if (landGraphic.attributes.floor){\r\n                                landProps.attributes[LandCls.piso] = landGraphic.floor;\r\n                                // }\r\n                                landProps.attributes['ID'] = parseInt(landGraphic.id);\r\n                                lands.push(landProps.clone());\r\n                                break;\r\n                            }\r\n                        }\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdMznC(lands, cadastralBlockUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryCadastralBlockTask = new QueryTask(cadastralBlockUrl);\r\n            const queryCadastralBlock = new Query();\r\n            queryCadastralBlock.where = `${LandCls.ubigeo} = '${ubigeo}'`;\r\n            queryCadastralBlock.returnGeometry = true;\r\n            queryCadastralBlock.outFields = [LandCls.idMznC];\r\n            queryCadastralBlock.geometry = lands[0].geometry;\r\n\r\n            queryCadastralBlockTask.execute(queryCadastralBlock)\r\n                .then(response => {\r\n                    lands.forEach(land => {\r\n                        land.attributes[LandCls.idMznC] = response.features[0].attributes[LandCls.idMznC];\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdPred(lands, landUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryLandTask = new QueryTask(landUrl);\r\n            const queryLand = new Query();\r\n            queryLand.returnGeometry = false;\r\n            queryLand.where = `${LandCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = LandCls.idPred;\r\n            statDef.outStatisticFieldName = `${LandCls.idPred}_MAX`;\r\n            queryLand.outStatistics = [statDef];\r\n\r\n            queryLandTask.execute(queryLand)\r\n                .then(function (response) {\r\n                    lands.forEach((land, idx) => {\r\n                        land.attributes[LandCls.idPred] = response.features[0].attributes[statDef.outStatisticFieldName] + idx + 1;\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                }, function (error) {\r\n                    deferred.reject(error);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        getPointLotsOrigin(pointLotUrl, lots, query = null) {\r\n            const queryPointLotsOriginTask = new QueryTask(pointLotUrl);\r\n            const queryPointLotsOrigin = new Query();\r\n            queryPointLotsOrigin.returnGeometry = true;\r\n            queryPointLotsOrigin.outFields = [\"*\"];\r\n            if (query) {\r\n                queryPointLotsOrigin.where = query;\r\n            } else {\r\n                queryPointLotsOrigin.geometry = lots.geometry;\r\n                queryPointLotsOrigin.geometryType = \"esriGeometryPolygon\";\r\n                queryPointLotsOrigin.distance = 0.2;\r\n                queryPointLotsOrigin.units = \"meters\";\r\n            }\r\n\r\n            return queryPointLotsOriginTask.execute(queryPointLotsOrigin);\r\n        },\r\n\r\n        getLandsOrigin(landUrl, lots, query = null) {\r\n            const queryLandsOriginTask = new QueryTask(landUrl);\r\n            const queryLandsOrigin = new Query();\r\n            queryLandsOrigin.returnGeometry = true;\r\n            queryLandsOrigin.outFields = [\"*\"];\r\n            if (query) {\r\n                queryLandsOrigin.where = query;\r\n            } else {\r\n                queryLandsOrigin.geometry = lots.geometry;\r\n                queryLandsOrigin.geometryType = \"esriGeometryPolygon\";\r\n                queryLandsOrigin.distance = 0.2;\r\n                queryLandsOrigin.units = \"meters\";\r\n            }\r\n\r\n            return queryLandsOriginTask.execute(queryLandsOrigin);\r\n        },\r\n\r\n        getLandsOriginByQuery(landUrl, cpu) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryLandsOriginTask = new QueryTask(landUrl);\r\n            const queryLandsOrigin = new Query();\r\n            queryLandsOrigin.returnGeometry = true;\r\n            queryLandsOrigin.outFields = [\"*\"];\r\n            queryLandsOrigin.where = `${LandCls.codCpu} = '${cpu}'`;\r\n            queryLandsOriginTask.execute(queryLandsOrigin)\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateRowsGeneric(features, codRequest, user) {\r\n            const LandCls = new this.Land();\r\n            const LotCls = new this.Lot();\r\n            features.forEach(feature => {\r\n                feature.attributes[LandCls.estado] = 0;\r\n                feature.attributes[LotCls.fuente] = codRequest;\r\n                feature.attributes[LotCls.nomUser] = user;\r\n                feature.attributes[LotCls.nomPc] = this.platformUpdate;\r\n                feature.attributes[LotCls.anoCart] = new Date().getFullYear();\r\n            });\r\n            return features;\r\n        },\r\n\r\n        getDataOrigin(pointLotUrl, landUrl, lots, queryLots = null) {\r\n            // const self = this;\r\n            const deferred = new Deferred();\r\n\r\n            const promises = [\r\n                this.getPointLotsOrigin(pointLotUrl, lots, queryLots),\r\n                this.getLandsOrigin(landUrl, lots, queryLots)\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    // self.currentPoinLotsRows = results[0].features;\r\n                    // self.currentLandsRows = results[1].features;\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        setParametersToAddFeatures(url, params) {\r\n            return {\r\n                url: `${url}/addFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToUpdateFeatures(url, params) {\r\n            return {\r\n                url: `${url}/updateFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToDeleteFeatures(url, params) {\r\n            return {\r\n                url: `${url}/deleteFeatures`,\r\n                content: {\r\n                    where: params,\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n\r\n        sendDataOriginToHistoric(config, currentLotsRows, currentPoinLotsRows, currentLandsRows) {\r\n            const deferred = new Deferred();\r\n            const promises = [];\r\n\r\n            if (currentLotsRows) {\r\n                const lotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.lotHistoricUrl,\r\n                    currentLotsRows\r\n                );\r\n                promises.push(esriRequest(lotsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            if (currentPoinLotsRows) {\r\n                const pointsLotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.pointLotHistoricUrl,\r\n                    currentPoinLotsRows\r\n                );\r\n                promises.push(esriRequest(pointsLotsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            if (currentLandsRows) {\r\n                const landsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.landHistoricUrl,\r\n                    currentLandsRows\r\n                );\r\n                promises.push(esriRequest(landsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        deleteDataOrigin(currentLotsRows, currentPoinLotsRows, currentLandsRows, config) {\r\n            const deferred = new Deferred();\r\n\r\n            const objetidLot = currentLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidPointLot = currentPoinLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidLand = currentLandsRows.map(row => row.attributes.OBJECTID);\r\n\r\n            const lotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.lotUrl,\r\n                `OBJECTID IN (${objetidLot.join(\",\")})`,\r\n            );\r\n            const pointsLotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.pointLotUrl,\r\n                `OBJECTID IN (${objetidPointLot.join(\",\")})`,\r\n            );\r\n            const landsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.landUrl,\r\n                `OBJECTID IN (${objetidLand.join(\",\")})`,\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(pointsLotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(landsDeleteRequestOptions, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateDataDeactivate(lands, config) {\r\n            const deferred = new Deferred();\r\n            const deactivateFeatures = this.setParametersToUpdateFeatures(\r\n                config.landUrl,\r\n                lands\r\n            )\r\n\r\n            esriRequest(deactivateFeatures, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateDataLotsDeactivate(lots, config) {\r\n            const deferred = new Deferred();\r\n            const updateLotFeature = this.setParametersToUpdateFeatures(\r\n                config.lotUrl,\r\n                lots\r\n            )\r\n\r\n            esriRequest(updateLotFeature, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        addDataNew(lots, pointLots, lands, config) {\r\n            const deferred = new Deferred();\r\n\r\n            lots = Array.isArray(lots) ? lots : [lots]\r\n\r\n            const lotNews = this.setParametersToAddFeatures(\r\n                config.lotUrl,\r\n                lots\r\n            );\r\n\r\n            pointLots = Array.isArray(pointLots) ? pointLots : [pointLots]\r\n\r\n            const pointLotsNews = this.setParametersToAddFeatures(\r\n                config.pointLotUrl,\r\n                pointLots\r\n            );\r\n\r\n            lands = Array.isArray(lands) ? lands : [lands]\r\n\r\n            const landsNews = this.setParametersToAddFeatures(\r\n                config.landUrl,\r\n                lands\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotNews, { usePost: true }),\r\n                esriRequest(pointLotsNews, { usePost: true }),\r\n                esriRequest(landsNews, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        // updateStatusRequests(lands, codRequests, caseRequest, ubigeo, config, idLandInactive = []) {\r\n        //     const deferred = new Deferred();\r\n        //     const responseLands = UtilityCase.matchWithReceptionModel(lands)\r\n        //     const messageText = `Se actualizó la cartografía, pero no se pudo actualizar el estado de la solicitud. Por favor, contacte al administrador de la plataforma.`;\r\n\r\n        //     const response = {\r\n        //         id: codRequests,\r\n        //         results: responseLands,\r\n        //         idType: parseInt(caseRequest),\r\n        //         idLandInactive: idLandInactive\r\n        //     }\r\n        //     for (let predio of response.results) {\r\n        //         predio['ubigeo'] = ubigeo;\r\n        //     }\r\n\r\n        //     fetch(config.updateStatusApplication, {\r\n        //         method: 'POST',\r\n        //         body: JSON.stringify(response),\r\n        //         headers: {\r\n        //             'Content-Type': 'application/json'\r\n        //         }\r\n        //     })\r\n        //         .then(response => {\r\n        //             if (!response.ok) {\r\n        //                 return response.json()\r\n        //                     .then(errorData => {\r\n        //                         throw new Error(`${messageText}.\\nError: ${errorData.error}`);\r\n        //                     })\r\n        //                     .catch(() => {\r\n        //                         throw new Error(messageText);\r\n        //                     });\r\n        //             }\r\n        //             return response.json();\r\n        //         })\r\n        //         .then(data => deferred.resolve(data))\r\n        //         .catch(err => deferred.reject(err));\r\n        //     return deferred.promise;\r\n        // },\r\n\r\n        updateStatusRequests(lands, codRequests, caseRequest, ubigeo, config, idLandInactive = []) {\r\n            const deferred = new Deferred();\r\n            const responseLands = UtilityCase.matchWithReceptionModel(lands)\r\n            const messageText = `Se actualizó la cartografía, pero no se pudo actualizar el estado de la solicitud. Por favor, contacte al administrador de la plataforma.`;\r\n\r\n            const response = {\r\n                id: codRequests,\r\n                results: responseLands,\r\n                idType: parseInt(caseRequest),\r\n                idLandInactive: idLandInactive\r\n            }\r\n            for (let predio of response.results) {\r\n                predio['ubigeo'] = ubigeo;\r\n            }\r\n\r\n            const fetchUpdateStatus = (retry = false) => {\r\n                fetch(config.updateStatusApplication, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(response),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                    .then(response => {\r\n                        if (!response.ok) {\r\n                            return response.json()\r\n                                .then(errorData => {\r\n                                    throw new Error(`${messageText}.\\nError: ${errorData.error}`);\r\n                                })\r\n                                .catch(() => {\r\n                                    throw new Error(messageText);\r\n                                });\r\n                        }\r\n                        return response.json();\r\n                    })\r\n                    .then(data => deferred.resolve(data))\r\n                    .catch(err => {\r\n                        if (!retry) {\r\n                            // Reintentar una vez más\r\n                            fetchUpdateStatus(true);\r\n                        } else {\r\n                            deferred.reject(err);\r\n                        }\r\n                    });\r\n            };\r\n\r\n            // Iniciar el primer intento de fetch\r\n            fetchUpdateStatus();\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkLotsWithinLands(lots, lands) {\r\n            for (let lot of lots) {\r\n                const checkLands = []\r\n                for (let land of lands) {\r\n                    checkLands.push(geometryEngine.intersects(lot.geometry, land.geometry))\r\n                }\r\n                if (checkLands.every(i => i === false)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        },\r\n\r\n        checkLandsWithinLot(lot, urlLands) {\r\n            const deferred = new Deferred();\r\n            const landCls = new this.Land();\r\n            const queryLands = new Query();\r\n            queryLands.geometry = lot.geometry;\r\n            queryLands.distance = 0.5;\r\n            queryLands.units = \"meters\";\r\n            queryLands.where = `${landCls.estado} = 1 `;\r\n            const queryTaskLands = new QueryTask(urlLands);\r\n            queryTaskLands.execute(queryLands)\r\n                .then(response => {\r\n                    const result = response.features.length > 0 ? 1 : 0;\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n    };\r\n\r\n    return UtilityCase;\r\n});"]}