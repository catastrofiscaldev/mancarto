{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/UtilityCase.js"],"names":["define","Deferred","QueryTask","Query","StatisticDefinition","geometryEngine","Point","all","esriRequest","UtilityCase","ubigeoFieldName","platformUpdate","estadoInsValue","estadoValue","codUiValue","estadoPartidaValue","tipoResolucionValue","Land","ubigeo","codPre","codUi","estado","coordX","coordY","codVer","codCpu","dirMun","dirUrb","ranCpu","tipVia","nomVia","numMun","idMznC","idPred","tipPred","partida","estadoPartida","piso","PointLot","idLote","secuen","zonaUtm","estadoIns","Lot","idLotP","anoCart","fuente","nomPc","nomUser","codLot","lotUrb","tipLot","Arancel","secEjec","receptionModelRequest","matchWithReceptionModel","object","modelRequests","response","map","land","arrayMatch","forEach","field","attributes","getFeatureSchema","url","geometry","blankFields","deferred","queryTask","query","where","returnGeometry","outFields","num","execute","then","feature","result","features","prop","resolve","catch","reject","err","promise","attributeTransfer","objTarget","objBase","propsUse","propsOmit","updateOnlyNulls","omitPropsDefault","deletePropsDefault","fieldMatch","propsOmitDefault","propsDeleteDefault","includes","length","props1","Object","keys","props2","filter","hasOwnProperty","getValueCodVer","factor","cod_ver_concatenate","toString","slice","cod_ver","split","reverse","join","digit","index","parseInt","reduce","a","b","getBlockFromLot","queryBlock","queryTaskBlock","Error","checkExistLotUrban","block","urlLots","queryLot","spatialRel","LotCls","queryTaskLot","lotsUrban","attr","lots","lot","exist","some","translateFieldsBlockToLot","lotsResults","graphic","lotIdx","clone","calculateTipLot","currentLotsRows","row","Set","calculateFieldsOfLot","lotUrl","codRequests","user","queryLotTask","statDefIdLoteP","statisticType","onStatisticField","outStatisticFieldName","statDefRanCpu","outStatistics","point","x","coords","y","spatialReference","wkid","idx","Date","getFullYear","intersects","translateFieldsLotToPointLot","urlPointLots","newPointLotsGraphics","pointLots","pointLot","graph","pointLotIdx","push","translateFieldsArancelToPointLot","arancelUrl","promises","queryArancelTask","queryArancel","geometryType","element","arancel","arancels","calculateFieldsOfPointLot","pointLotUrl","PointLotCls","queryPointLotTask","queryPointLot","statDef","i","generateCodCpu","generateDirMun","generateDirUrb","translateFieldsPointLotToLand","landUrl","newLandsGraphics","LandCls","lands","landGraphic","landProps","resolutionType","resolutionDocument","floor","id","calculateIdMznC","cadastralBlockUrl","queryCadastralBlockTask","queryCadastralBlock","calculateIdPred","queryLandTask","queryLand","error","getPointLotsOrigin","queryPointLotsOriginTask","queryPointLotsOrigin","distance","units","getLandsOrigin","queryLandsOriginTask","queryLandsOrigin","getLandsOriginByQuery","cpu","updateRowsGeneric","codRequest","getDataOrigin","results","setParametersToAddFeatures","params","content","JSON","stringify","f","handleAs","callbackParamName","setParametersToUpdateFeatures","setParametersToDeleteFeatures","sendDataOriginToHistoric","config","currentPoinLotsRows","currentLandsRows","lotsHistoricRequestOptions","lotHistoricUrl","usePost","pointsLotsHistoricRequestOptions","pointLotHistoricUrl","landsHistoricRequestOptions","landHistoricUrl","deleteDataOrigin","objetidLot","OBJECTID","objetidPointLot","objetidLand","lotsDeleteRequestOptions","pointsLotsDeleteRequestOptions","landsDeleteRequestOptions","updateDataDeactivate","deactivateFeatures","updateDataLotsDeactivate","updateLotFeature","addDataNew","Array","isArray","lotNews","pointLotsNews","landsNews","updateStatusRequests","caseRequest","idLandInactive","responseLands","messageText","idType","predio","fetchUpdateStatus","retry","fetch","updateStatusApplication","method","body","headers","ok","json","errorData","data","checkLotsWithinLands","checkLands","every","checkLandsWithinLot","urlLands","landCls","queryLands","queryTaskLands"],"mappings":"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","file":"UtilityCase.js","sourcesContent":["define([\r\n    \"dojo/Deferred\",\r\n    \"esri/tasks/QueryTask\",\r\n    \"esri/tasks/query\",\r\n    \"esri/tasks/StatisticDefinition\",\r\n    \"esri/geometry/geometryEngine\",\r\n    \"esri/geometry/Point\",\r\n    \"dojo/promise/all\",\r\n    \"esri/request\"\r\n], function (\r\n    Deferred,\r\n    QueryTask,\r\n    Query,\r\n    StatisticDefinition,\r\n    geometryEngine,\r\n    Point,\r\n    all,\r\n    esriRequest\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la subdivisión de lotes\r\n    */\r\n    const UtilityCase = {\r\n\r\n        ubigeoFieldName: 'UBIGEO',\r\n        platformUpdate: 'PCF',\r\n        estadoInsValue: 1,\r\n        estadoValue: 1,\r\n        codUiValue: 1,\r\n        estadoPartidaValue: 0,\r\n        tipoResolucionValue: \"1\",\r\n\r\n        Land() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.codPre = 'COD_PRE';\r\n            this.codUi = 'COD_UI';\r\n            this.estado = 'ESTADO';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.codVer = 'COD_VER';\r\n            this.codCpu = 'COD_CPU';\r\n            this.dirMun = 'DIR_MUN';\r\n            this.dirUrb = 'DIR_URB';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.tipVia = 'TIP_VIA';\r\n            this.nomVia = 'NOM_VIA';\r\n            this.numMun = 'NUM_MUN';\r\n            this.idMznC = 'ID_MZN_C';\r\n            this.idPred = 'ID_PRED';\r\n            this.tipPred = 'TIP_PRED';\r\n            this.partida = 'PARTIDA';\r\n            this.estadoPartida = 'ESTADO_PARTIDA';\r\n            this.piso = 'PISO';\r\n        },\r\n        PointLot() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.idLote = 'ID_LOTE'\r\n            this.secuen = 'SECUEN';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.zonaUtm = 'ZONA_UTM';\r\n            this.estadoIns = 'ESTADO_INS'\r\n        },\r\n        Lot() {\r\n            this.idLotP = 'ID_LOTE_P';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.anoCart = 'ANO_CART';\r\n            this.fuente = 'FUENTE';\r\n            this.nomPc = 'NOM_PC';\r\n            this.nomUser = 'NOM_USER';\r\n            this.codLot = 'COD_LOTE';\r\n            this.lotUrb = 'LOT_URB';\r\n            this.ubigeo = 'UBIGEO';\r\n            this.tipLot = 'TIP_LOT';\r\n            this.estadoIns = 'ESTADO_INS';\r\n        },\r\n        Arancel() {\r\n            this.secEjec = 'SEC_EJEC';\r\n\r\n        },\r\n\r\n        receptionModelRequest() {\r\n            return [\r\n                \"COD_PRE\",\r\n                \"COD_CPU\",\r\n                \"COD_SECT\",\r\n                \"COD_MZN\",\r\n                \"COD_LOTE\",\r\n                \"COD_UU\",\r\n                \"COD_VIA\",\r\n                \"TIPO_UU\",\r\n                \"NOM_UU\",\r\n                \"NOM_REF\",\r\n                \"MZN_URB\",\r\n                \"LOT_URB\",\r\n                \"TIP_VIA\",\r\n                \"NOM_VIA\",\r\n                \"CUADRA\",\r\n                \"LADO\",\r\n                \"DIR_MUN\",\r\n                \"DIR_URB\",\r\n                \"COORD_X\",\r\n                \"COORD_Y\",\r\n                \"RAN_CPU\",\r\n                \"COD_UI\",\r\n                \"COD_VER\",\r\n                \"ID_LOTE_P\",\r\n                \"ID\"\r\n            ]\r\n        },\r\n\r\n        matchWithReceptionModel(object) {\r\n            const modelRequests = this.receptionModelRequest();\r\n            const response = object.map((land) => {\r\n                const arrayMatch = {};\r\n                modelRequests.forEach((field) => {\r\n                    arrayMatch[field] = land.attributes[field];\r\n                })\r\n                return arrayMatch;\r\n            })\r\n            return response;\r\n        },\r\n\r\n        getFeatureSchema(url, geometry = true, blankFields = true) {\r\n            const deferred = new Deferred();\r\n            const queryTask = new QueryTask(url);\r\n            const query = new Query();\r\n            query.where = \"1=1\";\r\n            query.returnGeometry = geometry;\r\n            query.outFields = [\"*\"];\r\n            query.num = 1;\r\n            queryTask.execute(query)\r\n                .then(result => {\r\n                    const feature = result.features[0];\r\n                    if (blankFields) {\r\n                        for (let prop in feature.attributes) {\r\n                            feature.attributes[prop] = null;\r\n                        }\r\n                    }\r\n                    return deferred.resolve(feature);\r\n                })\r\n                .catch(err => {\r\n                    deferred.reject(err);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        attributeTransfer({ objTarget, objBase, propsUse = [], propsOmit = [], updateOnlyNulls = false, omitPropsDefault = true, deletePropsDefault = true }) {\r\n            let fieldMatch = []\r\n            const propsOmitDefault = [\r\n                'FUENTE',\r\n                'NOM_PC',\r\n                'NOM_USER',\r\n                'ANO_CART'\r\n            ]\r\n            const propsDeleteDefault = [\r\n                'OBJECTID',\r\n                'GlobalID',\r\n                'created_date',\r\n                'created_user',\r\n                'last_edited_date',\r\n                'last_edited_user',\r\n                'Shape.STArea()',\r\n                'Shape.STLength()',\r\n            ];\r\n\r\n            if (deletePropsDefault) {\r\n                for (let prop in objTarget) {\r\n                    if (propsDeleteDefault.includes(prop)) {\r\n                        delete objTarget[prop];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (propsUse.length > 0) {\r\n                fieldMatch = propsUse\r\n            } else {\r\n                const props1 = Object.keys(objTarget);\r\n                const props2 = Object.keys(objBase);\r\n                fieldMatch = props1.filter(prop => props2.includes(prop));\r\n            }\r\n            // retirar los campos omitidos\r\n            if (propsOmit.length > 0) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmit.includes(prop));\r\n            }\r\n\r\n            // retirar los campos omitidos por defecto de objBase\r\n            if (omitPropsDefault) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmitDefault.includes(prop));\r\n            }\r\n\r\n            fieldMatch.forEach(prop => {\r\n                if (objBase.hasOwnProperty(prop)) {\r\n                    if (updateOnlyNulls) {\r\n                        if (objTarget[prop] === null) {\r\n                            objTarget[prop] = objBase[prop];\r\n                        }\r\n                    } else {\r\n                        objTarget[prop] = objBase[prop];\r\n                    }\r\n                }\r\n            });\r\n\r\n            return objTarget;\r\n        },\r\n\r\n        getValueCodVer(ranCpu, codUi) {\r\n            const factor = [2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7]\r\n            // Obteniendo código concatenado\r\n            const cod_ver_concatenate = ranCpu.toString() + (\"0000\" + codUi.toString()).slice(-4);\r\n\r\n            // Reversa de código concatenado\r\n            const cod_ver = cod_ver_concatenate.split('').reverse().join('');\r\n\r\n            // Aplicando fórmula\r\n            let response = 11 - (cod_ver.split('').map((digit, index) =>\r\n                parseInt(digit) * factor[index])\r\n                .reduce((a, b) => a + b, 0) % 11);\r\n\r\n            if (response > 9) {\r\n                response = 11 - response;\r\n            }\r\n\r\n            return response\r\n        },\r\n\r\n        getBlockFromLot(geometry, url) {\r\n            const deferred = new Deferred();\r\n\r\n            const queryBlock = new Query();\r\n            queryBlock.geometry = geometry;\r\n            queryBlock.outFields = ['*'];\r\n            queryBlock.returnGeometry = true;\r\n            const queryTaskBlock = new QueryTask(url);\r\n            queryTaskBlock.execute(queryBlock)\r\n                .then(response => {\r\n                    if (response.features.length === 0) {\r\n                        return deferred.reject(new Error(\"No se encontraron manzanas\"));\r\n                    }\r\n                    return deferred.resolve(response.features[0]);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkExistLotUrban(attributes, block, urlLots) {\r\n            const deferred = new Deferred();\r\n            const queryLot = new Query();\r\n            queryLot.geometry = block.geometry\r\n            queryLot.spatialRel = \"within\";\r\n            const LotCls = new this.Lot();\r\n            queryLot.outFields = [LotCls.lotUrb];\r\n            const queryTaskLot = new QueryTask(urlLots);\r\n            const lotsUrban = attributes.map(attr => attr.lotUrb);\r\n            queryTaskLot.execute(queryLot)\r\n                .then(response => {\r\n                    const lots = response.features.map(lot => lot.attributes[LotCls.lotUrb]);\r\n                    const exist = lotsUrban.some(lot => lots.includes(lot));\r\n                    if (exist) {\r\n                        return deferred.reject(new Error(\"Los lotes urbanos registrados ya se encuentran en la manzana actual\"));\r\n                    }\r\n                    return deferred.resolve(block);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsBlockToLot(url, block, lotsResults) {\r\n            const deferred = new Deferred();\r\n\r\n            this.getFeatureSchema(url)\r\n                .then(lot => {\r\n                    const lots = lotsResults.map((graphic) => {\r\n                        const lotIdx = lot.clone();\r\n                        lotIdx.attributes = this.attributeTransfer({\r\n                            objTarget: lotIdx.attributes,\r\n                            objBase: block.attributes,\r\n                        });\r\n                        lotIdx.geometry = graphic.geometry;\r\n                        return lotIdx;\r\n                    });\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateTipLot(currentLotsRows) {\r\n            const LotCls = new this.Lot();\r\n            let tipLot = currentLotsRows.map(row => { return row.attributes[LotCls.tipLot] })\r\n            tipLot = [...new Set(tipLot)] == [2] ? '2' : '1'\r\n            return tipLot\r\n        },\r\n\r\n        calculateFieldsOfLot(lotUrl, lots, ubigeo, codRequests, user, attributes, tipLot) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n\r\n            const queryLotTask = new QueryTask(lotUrl);\r\n\r\n            const queryLot = new Query();\r\n\r\n            queryLot.where = `${this.ubigeoFieldName} = '${ubigeo}'`;\r\n\r\n            const statDefIdLoteP = new StatisticDefinition();\r\n            statDefIdLoteP.statisticType = \"max\";\r\n            statDefIdLoteP.onStatisticField = LotCls.idLotP;\r\n            statDefIdLoteP.outStatisticFieldName = `${LotCls.idLotP}_MAX`;\r\n\r\n            const statDefRanCpu = new StatisticDefinition();\r\n            statDefRanCpu.statisticType = \"max\";\r\n            statDefRanCpu.onStatisticField = LotCls.ranCpu;\r\n            statDefRanCpu.outStatisticFieldName = `${LotCls.ranCpu}_MAX`;\r\n\r\n            queryLot.returnGeometry = false;\r\n            queryLot.outStatistics = [statDefIdLoteP, statDefRanCpu];\r\n\r\n            attributes.forEach((attr) => {\r\n                const point = new Point({\r\n                    x: attr.coords[0],\r\n                    y: attr.coords[1],\r\n                    spatialReference: { wkid: 4326 }\r\n                });\r\n                attr.geometry = point;\r\n            });\r\n\r\n            queryLotTask.execute(queryLot)\r\n                .then(response => {\r\n                    lots.forEach((lot, idx) => {\r\n                        lot.attributes[LotCls.idLotP] = response.features[0].attributes[statDefIdLoteP.outStatisticFieldName] + idx + 1;\r\n                        lot.attributes[LotCls.ranCpu] = response.features[0].attributes[statDefRanCpu.outStatisticFieldName] + idx + 1;\r\n                        lot.attributes[LotCls.anoCart] = new Date().getFullYear();\r\n                        lot.attributes[LotCls.fuente] = codRequests;\r\n                        lot.attributes[LotCls.nomPc] = this.platformUpdate;\r\n                        lot.attributes[LotCls.nomUser] = user;\r\n                        lot.attributes[LotCls.tipLot] = tipLot;\r\n                        lot.attributes[LotCls.estadoIns] = this.estadoInsValue;\r\n\r\n                        for (let attr of attributes) {\r\n                            if (geometryEngine.intersects(lot.geometry, attr.geometry)) {\r\n                                lot.attributes[LotCls.codLot] = attr.codLot;\r\n                                lot.attributes[LotCls.lotUrb] = attr.lotUrb;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // lot.attributes[LotCls.codLot] = attributes[idx].codLot;\r\n                        // lot.attributes[LotCls.lotUrb] = attributes[idx].lotUrb;\r\n                    });\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsLotToPointLot(lots, urlPointLots, newPointLotsGraphics) {\r\n            const deferred = new Deferred();\r\n            const pointLots = [];\r\n\r\n            this.getFeatureSchema(urlPointLots)\r\n                .then(pointLot => {\r\n                    lots.forEach(lot => {\r\n                        pointLot.attributes = this.attributeTransfer({\r\n                            objTarget: pointLot.attributes,\r\n                            objBase: lot.attributes,\r\n                            omitPropsDefault: false,\r\n                            deletePropsDefault: true\r\n                        });\r\n\r\n                        for (let graph of newPointLotsGraphics) {\r\n                            if (!geometryEngine.intersects(lot.geometry, graph.geometry)) {\r\n                                continue;\r\n                            }\r\n\r\n                            const pointLotIdx = pointLot.clone();\r\n                            pointLotIdx.geometry = graph.geometry;\r\n                            pointLots.push(pointLotIdx);\r\n                        };\r\n                    });\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsArancelToPointLot(pointLots, arancelUrl) {\r\n            const deferred = new Deferred();\r\n            const promises = pointLots.map(pointLot => {\r\n                const queryArancelTask = new QueryTask(arancelUrl);\r\n                const queryArancel = new Query();\r\n                queryArancel.returnGeometry = true;\r\n                queryArancel.outFields = [\"*\"];\r\n                queryArancel.geometry = pointLot.geometry;\r\n                queryArancel.geometryType = \"esriGeometryPoint\";\r\n                return queryArancelTask.execute(queryArancel);\r\n            });\r\n            all(promises)\r\n                .then(arancels => {\r\n                    pointLots.forEach((element, index) => {\r\n                        const arancel = arancels[index].features[0].attributes;\r\n                        pointLots[index].attributes = this.attributeTransfer({\r\n                            objTarget: element.attributes,\r\n                            objBase: arancel,\r\n                            updateOnlyNulls: true\r\n                        });\r\n                        return deferred.resolve(pointLots);\r\n                    });\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateFieldsOfPointLot(pointLotUrl, ubigeo, pointLots) {\r\n            const deferred = new Deferred();\r\n            const PointLotCls = new this.PointLot();\r\n\r\n            const queryPointLotTask = new QueryTask(pointLotUrl);\r\n\r\n            const queryPointLot = new Query();\r\n            queryPointLot.where = `${PointLotCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = PointLotCls.secuen;\r\n            statDef.outStatisticFieldName = `${PointLotCls.secuen}_MAX`;\r\n\r\n            queryPointLot.returnGeometry = false;\r\n            queryPointLot.outStatistics = [statDef];\r\n\r\n            queryPointLotTask.execute(queryPointLot)\r\n                .then(response => {\r\n                    let secuen = response.features[0].attributes[statDef.outStatisticFieldName] + 1\r\n                    for (let i of pointLots) {\r\n                        i.attributes[PointLotCls.secuen] = secuen;\r\n                        i.attributes[PointLotCls.idLote] = `${i.attributes[PointLotCls.zonaUtm]}${ubigeo}${secuen}`;\r\n                        i.attributes[PointLotCls.estadoIns] = this.estadoInsValue;\r\n                        secuen += 1;\r\n                    }\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        generateCodCpu(ranCpu, codVer, codUi = 1) {\r\n            codUi = (\"0000\" + codUi.toString()).slice(-4);\r\n            return `${ranCpu}-${codUi}-${codVer}`;\r\n        },\r\n\r\n        generateDirMun(tipVia, nomVia, numMun) {\r\n            return `${tipVia} ${nomVia} ${numMun}`;\r\n        },\r\n\r\n        generateDirUrb(tipVia, nomVia, numMun) {\r\n            return `${tipVia} ${nomVia} ${numMun}`;\r\n        },\r\n\r\n        translateFieldsPointLotToLand(pointLots, landUrl, newLandsGraphics) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n            let lands = [];\r\n\r\n            this.getFeatureSchema(landUrl)\r\n                .then(land => {\r\n                    newLandsGraphics.forEach(landGraphic => {\r\n                        for (i = 0; i < pointLots.length; i++) {\r\n                            if (geometryEngine.intersects(landGraphic.geometry, pointLots[i].geometry)) {\r\n                                const landProps = land.clone();\r\n                                landProps.attributes = this.attributeTransfer({\r\n                                    objTarget: land.attributes,\r\n                                    objBase: pointLots[i].attributes,\r\n                                    omitPropsDefault: false\r\n                                });\r\n                                landProps.attributes[LandCls.codPre] = landGraphic.codPre;\r\n                                landProps.attributes[LandCls.codUi] = this.codUiValue;\r\n                                landProps.attributes[LandCls.estado] = this.estadoValue;\r\n                                landProps.attributes[LandCls.coordX] = landGraphic.geometry.x;\r\n                                landProps.attributes[LandCls.coordY] = landGraphic.geometry.y;\r\n                                landProps.attributes[LandCls.codVer] = this.getValueCodVer(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    this.codUiValue\r\n                                );\r\n                                landProps.attributes[LandCls.codCpu] = this.generateCodCpu(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    landProps.attributes[LandCls.codVer]\r\n                                );\r\n                                landProps.attributes[LandCls.dirMun] = this.generateDirMun(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n                                landProps.attributes[LandCls.dirUrb] = this.generateDirUrb(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n\r\n                                landProps.geometry = landGraphic.geometry;\r\n                                if (landGraphic.resolutionType === this.tipoResolucionValue) {\r\n                                    landProps.attributes[LandCls.partida] = landGraphic.resolutionDocument\r\n                                    landProps.attributes[LandCls.estadoPartida] = this.estadoPartidaValue;\r\n                                }\r\n                                // if (landGraphic.attributes.floor){\r\n                                landProps.attributes[LandCls.piso] = landGraphic.floor;\r\n                                // }\r\n                                landProps.attributes['ID'] = parseInt(landGraphic.id);\r\n                                lands.push(landProps.clone());\r\n                                break;\r\n                            }\r\n                        }\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdMznC(lands, cadastralBlockUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryCadastralBlockTask = new QueryTask(cadastralBlockUrl);\r\n            const queryCadastralBlock = new Query();\r\n            queryCadastralBlock.where = `${LandCls.ubigeo} = '${ubigeo}'`;\r\n            queryCadastralBlock.returnGeometry = true;\r\n            queryCadastralBlock.outFields = [LandCls.idMznC];\r\n            queryCadastralBlock.geometry = lands[0].geometry;\r\n\r\n            queryCadastralBlockTask.execute(queryCadastralBlock)\r\n                .then(response => {\r\n                    lands.forEach(land => {\r\n                        land.attributes[LandCls.idMznC] = response.features[0].attributes[LandCls.idMznC];\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdPred(lands, landUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryLandTask = new QueryTask(landUrl);\r\n            const queryLand = new Query();\r\n            queryLand.returnGeometry = false;\r\n            queryLand.where = `${LandCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = LandCls.idPred;\r\n            statDef.outStatisticFieldName = `${LandCls.idPred}_MAX`;\r\n            queryLand.outStatistics = [statDef];\r\n\r\n            queryLandTask.execute(queryLand)\r\n                .then(function (response) {\r\n                    lands.forEach((land, idx) => {\r\n                        land.attributes[LandCls.idPred] = response.features[0].attributes[statDef.outStatisticFieldName] + idx + 1;\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                }, function (error) {\r\n                    deferred.reject(error);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        getPointLotsOrigin(pointLotUrl, lots) {\r\n            const queryPointLotsOriginTask = new QueryTask(pointLotUrl);\r\n            const queryPointLotsOrigin = new Query();\r\n            queryPointLotsOrigin.returnGeometry = true;\r\n            queryPointLotsOrigin.outFields = [\"*\"];\r\n            queryPointLotsOrigin.geometry = lots.geometry;\r\n            queryPointLotsOrigin.geometryType = \"esriGeometryPolygon\";\r\n            queryPointLotsOrigin.distance = 0.5;\r\n            queryPointLotsOrigin.units = \"meters\";\r\n            return queryPointLotsOriginTask.execute(queryPointLotsOrigin);\r\n        },\r\n\r\n        getLandsOrigin(landUrl, lots) {\r\n            const queryLandsOriginTask = new QueryTask(landUrl);\r\n            const queryLandsOrigin = new Query();\r\n            queryLandsOrigin.returnGeometry = true;\r\n            queryLandsOrigin.outFields = [\"*\"];\r\n            queryLandsOrigin.geometry = lots.geometry;\r\n            queryLandsOrigin.geometryType = \"esriGeometryPolygon\";\r\n            queryLandsOrigin.distance = 0.5;\r\n            queryLandsOrigin.units = \"meters\";\r\n            return queryLandsOriginTask.execute(queryLandsOrigin);\r\n        },\r\n\r\n        getLandsOriginByQuery(landUrl, cpu) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryLandsOriginTask = new QueryTask(landUrl);\r\n            const queryLandsOrigin = new Query();\r\n            queryLandsOrigin.returnGeometry = true;\r\n            queryLandsOrigin.outFields = [\"*\"];\r\n            queryLandsOrigin.where = `${LandCls.codCpu} = '${cpu}'`;\r\n            queryLandsOriginTask.execute(queryLandsOrigin)\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateRowsGeneric(features, codRequest, user) {\r\n            const LandCls = new this.Land();\r\n            const LotCls = new this.Lot();\r\n            features.forEach(feature => {\r\n                feature.attributes[LandCls.estado] = 0;\r\n                feature.attributes[LotCls.fuente] = codRequest;\r\n                feature.attributes[LotCls.nomUser] = user;\r\n                feature.attributes[LotCls.nomPc] = this.platformUpdate;\r\n                feature.attributes[LotCls.anoCart] = new Date().getFullYear();\r\n            });\r\n            return features;\r\n        },\r\n\r\n        getDataOrigin(pointLotUrl, landUrl, lots) {\r\n            // const self = this;\r\n            const deferred = new Deferred();\r\n\r\n            const promises = [\r\n                this.getPointLotsOrigin(pointLotUrl, lots),\r\n                this.getLandsOrigin(landUrl, lots)\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    // self.currentPoinLotsRows = results[0].features;\r\n                    // self.currentLandsRows = results[1].features;\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        setParametersToAddFeatures(url, params) {\r\n            return {\r\n                url: `${url}/addFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToUpdateFeatures(url, params) {\r\n            return {\r\n                url: `${url}/updateFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToDeleteFeatures(url, params) {\r\n            return {\r\n                url: `${url}/deleteFeatures`,\r\n                content: {\r\n                    where: params,\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n\r\n        sendDataOriginToHistoric(config, currentLotsRows, currentPoinLotsRows, currentLandsRows) {\r\n            const deferred = new Deferred();\r\n            const promises = [];\r\n\r\n            if (currentLotsRows) {\r\n                const lotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.lotHistoricUrl,\r\n                    currentLotsRows\r\n                );\r\n                promises.push(esriRequest(lotsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            if (currentPoinLotsRows) {\r\n                const pointsLotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.pointLotHistoricUrl,\r\n                    currentPoinLotsRows\r\n                );\r\n                promises.push(esriRequest(pointsLotsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            if (currentLandsRows) {\r\n                const landsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.landHistoricUrl,\r\n                    currentLandsRows\r\n                );\r\n                promises.push(esriRequest(landsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        deleteDataOrigin(currentLotsRows, currentPoinLotsRows, currentLandsRows, config) {\r\n            const deferred = new Deferred();\r\n\r\n            const objetidLot = currentLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidPointLot = currentPoinLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidLand = currentLandsRows.map(row => row.attributes.OBJECTID);\r\n\r\n            const lotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.lotUrl,\r\n                `OBJECTID IN (${objetidLot.join(\",\")})`,\r\n            );\r\n            const pointsLotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.pointLotUrl,\r\n                `OBJECTID IN (${objetidPointLot.join(\",\")})`,\r\n            );\r\n            const landsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.landUrl,\r\n                `OBJECTID IN (${objetidLand.join(\",\")})`,\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(pointsLotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(landsDeleteRequestOptions, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateDataDeactivate(lands, config) {\r\n            const deferred = new Deferred();\r\n            const deactivateFeatures = this.setParametersToUpdateFeatures(\r\n                config.landUrl,\r\n                lands\r\n            )\r\n\r\n            esriRequest(deactivateFeatures, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateDataLotsDeactivate(lots, config) {\r\n            const deferred = new Deferred();\r\n            const updateLotFeature = this.setParametersToUpdateFeatures(\r\n                config.lotUrl,\r\n                lots\r\n            )\r\n\r\n            esriRequest(updateLotFeature, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        addDataNew(lots, pointLots, lands, config) {\r\n            const deferred = new Deferred();\r\n\r\n            lots = Array.isArray(lots) ? lots : [lots]\r\n\r\n            const lotNews = this.setParametersToAddFeatures(\r\n                config.lotUrl,\r\n                lots\r\n            );\r\n\r\n            pointLots = Array.isArray(pointLots) ? pointLots : [pointLots]\r\n\r\n            const pointLotsNews = this.setParametersToAddFeatures(\r\n                config.pointLotUrl,\r\n                pointLots\r\n            );\r\n\r\n            lands = Array.isArray(lands) ? lands : [lands]\r\n\r\n            const landsNews = this.setParametersToAddFeatures(\r\n                config.landUrl,\r\n                lands\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotNews, { usePost: true }),\r\n                esriRequest(pointLotsNews, { usePost: true }),\r\n                esriRequest(landsNews, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        // updateStatusRequests(lands, codRequests, caseRequest, ubigeo, config, idLandInactive = []) {\r\n        //     const deferred = new Deferred();\r\n        //     const responseLands = UtilityCase.matchWithReceptionModel(lands)\r\n        //     const messageText = `Se actualizó la cartografía, pero no se pudo actualizar el estado de la solicitud. Por favor, contacte al administrador de la plataforma.`;\r\n\r\n        //     const response = {\r\n        //         id: codRequests,\r\n        //         results: responseLands,\r\n        //         idType: parseInt(caseRequest),\r\n        //         idLandInactive: idLandInactive\r\n        //     }\r\n        //     for (let predio of response.results) {\r\n        //         predio['ubigeo'] = ubigeo;\r\n        //     }\r\n\r\n        //     fetch(config.updateStatusApplication, {\r\n        //         method: 'POST',\r\n        //         body: JSON.stringify(response),\r\n        //         headers: {\r\n        //             'Content-Type': 'application/json'\r\n        //         }\r\n        //     })\r\n        //         .then(response => {\r\n        //             if (!response.ok) {\r\n        //                 return response.json()\r\n        //                     .then(errorData => {\r\n        //                         throw new Error(`${messageText}.\\nError: ${errorData.error}`);\r\n        //                     })\r\n        //                     .catch(() => {\r\n        //                         throw new Error(messageText);\r\n        //                     });\r\n        //             }\r\n        //             return response.json();\r\n        //         })\r\n        //         .then(data => deferred.resolve(data))\r\n        //         .catch(err => deferred.reject(err));\r\n        //     return deferred.promise;\r\n        // },\r\n\r\n        updateStatusRequests(lands, codRequests, caseRequest, ubigeo, config, idLandInactive = []) {\r\n            const deferred = new Deferred();\r\n            const responseLands = UtilityCase.matchWithReceptionModel(lands)\r\n            const messageText = `Se actualizó la cartografía, pero no se pudo actualizar el estado de la solicitud. Por favor, contacte al administrador de la plataforma.`;\r\n\r\n            const response = {\r\n                id: codRequests,\r\n                results: responseLands,\r\n                idType: parseInt(caseRequest),\r\n                idLandInactive: idLandInactive\r\n            }\r\n            for (let predio of response.results) {\r\n                predio['ubigeo'] = ubigeo;\r\n            }\r\n\r\n            const fetchUpdateStatus = (retry = false) => {\r\n                fetch(config.updateStatusApplication, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(response),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                    .then(response => {\r\n                        if (!response.ok) {\r\n                            return response.json()\r\n                                .then(errorData => {\r\n                                    throw new Error(`${messageText}.\\nError: ${errorData.error}`);\r\n                                })\r\n                                .catch(() => {\r\n                                    throw new Error(messageText);\r\n                                });\r\n                        }\r\n                        return response.json();\r\n                    })\r\n                    .then(data => deferred.resolve(data))\r\n                    .catch(err => {\r\n                        if (!retry) {\r\n                            // Reintentar una vez más\r\n                            fetchUpdateStatus(true);\r\n                        } else {\r\n                            deferred.reject(err);\r\n                        }\r\n                    });\r\n            };\r\n\r\n            // Iniciar el primer intento de fetch\r\n            fetchUpdateStatus();\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkLotsWithinLands(lots, lands) {\r\n            for (let lot of lots) {\r\n                const checkLands = []\r\n                for (let land of lands) {\r\n                    checkLands.push(geometryEngine.intersects(lot.geometry, land.geometry))\r\n                }\r\n                if (checkLands.every(i => i === false)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        },\r\n\r\n        checkLandsWithinLot(lot, urlLands) {\r\n            const deferred = new Deferred();\r\n            const landCls = new this.Land();\r\n            const queryLands = new Query();\r\n            queryLands.geometry = lot.geometry;\r\n            queryLands.distance = 0.5;\r\n            queryLands.units = \"meters\";\r\n            queryLands.where = `${landCls.estado} = 1 `;\r\n            const queryTaskLands = new QueryTask(urlLands);\r\n            queryTaskLands.execute(queryLands)\r\n                .then(response => {\r\n                    const result = response.features.length > 0 ? 1 : 0;\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n    };\r\n\r\n    return UtilityCase;\r\n});"]}