{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/UtilityCase.js"],"names":["define","Deferred","QueryTask","Query","StatisticDefinition","geometryEngine","all","esriRequest","UtilityCase","ubigeoFieldName","platformUpdate","estadoInsValue","estadoValue","codUiValue","Land","ubigeo","codPre","codUi","estado","coordX","coordY","codVer","codCpu","dirMun","dirUrb","ranCpu","tipVia","nomVia","numMun","idMznC","idPred","tipPred","PointLot","idLote","secuen","zonaUtm","estadoIns","Lot","idLotP","anoCart","fuente","nomPc","nomUser","codLot","lotUrb","tipLot","Arancel","secEjec","receptionModelRequest","matchWithReceptionModel","object","modelRequests","response","map","land","arrayMatch","forEach","field","attributes","getFeatureSchema","url","geometry","blankFields","deferred","queryTask","query","where","returnGeometry","outFields","num","execute","then","feature","result","features","prop","resolve","catch","reject","err","promise","attributeTransfer","objTarget","objBase","propsUse","propsOmit","updateOnlyNulls","omitPropsDefault","deletePropsDefault","fieldMatch","propsOmitDefault","propsDeleteDefault","includes","length","props1","Object","keys","props2","filter","hasOwnProperty","getValueCodVer","factor","cod_ver_concatenate","toString","slice","cod_ver","split","reverse","join","digit","index","parseInt","reduce","a","b","getBlockFromLot","queryBlock","queryTaskBlock","translateFieldsBlockToLot","block","lotsResults","lots","graphic","lotIdx","lot","clone","calculateTipLot","currentLotsRows","LotCls","row","Set","calculateFieldsOfLot","lotUrl","codRequests","user","queryLotTask","queryLot","statDefIdLoteP","statisticType","onStatisticField","outStatisticFieldName","statDefRanCpu","outStatistics","idx","Date","getFullYear","translateFieldsLotToPointLot","urlPointLots","newPointLotsGraphics","pointLots","pointLot","graph","intersects","pointLotIdx","push","translateFieldsArancelToPointLot","arancelUrl","promises","queryArancelTask","queryArancel","geometryType","element","arancel","arancels","calculateFieldsOfPointLot","pointLotUrl","PointLotCls","queryPointLotTask","queryPointLot","statDef","i","generateCodCpu","generateDirMun","generateDirUrb","translateFieldsPointLotToLand","landUrl","newLandsGraphics","LandCls","lands","landGraphic","landProps","x","y","calculateIdMznC","cadastralBlockUrl","queryCadastralBlockTask","queryCadastralBlock","calculateIdPred","queryLandTask","queryLand","error","getPointLotsOrigin","queryPointLotsOriginTask","queryPointLotsOrigin","distance","units","getLandsOrigin","queryLandsOriginTask","queryLandsOrigin","getDataOrigin","results","setParametersToAddFeatures","params","content","JSON","stringify","f","handleAs","callbackParamName","setParametersToUpdateFeatures","setParametersToDeleteFeatures","sendDataOriginToHistoric","config","currentPoinLotsRows","currentLandsRows","lotsHistoricRequestOptions","lotHistoricUrl","pointsLotsHistoricRequestOptions","pointLotHistoricUrl","landsHistoricRequestOptions","landHistoricUrl","usePost","deleteDataOrigin","objetidLot","OBJECTID","objetidPointLot","objetidLand","lotsDeleteRequestOptions","pointsLotsDeleteRequestOptions","landsDeleteRequestOptions","addDataNew","Array","isArray","lotNews","pointLotsNews","landsNews","updateStatusRequests","caseRequest","console","log","responseLands","id","idType","predio","fetch","updateStatusApplication","method","body","headers","json","data","checkLotsWithinLands","checkLands","every"],"mappings":";;AAAAA,OAAO,CACH,eADG,EAEH,sBAFG,EAGH,kBAHG,EAIH,gCAJG,EAKH,8BALG,EAMH,kBANG,EAOH,cAPG,CAAP,EAQG,UACCC,QADD,EAECC,SAFD,EAGCC,KAHD,EAICC,mBAJD,EAKCC,cALD,EAMCC,GAND,EAOCC,WAPD,EAQD;AACE;;;AAGA,QAAMC,cAAc;;AAEhBC,yBAAiB,QAFD;AAGhBC,wBAAgB,KAHA;AAIhBC,wBAAgB,CAJA;AAKhBC,qBAAa,CALG;AAMhBC,oBAAY,CANI;;AAQhBC,YARgB,kBAQT;AACH,iBAAKC,MAAL,GAAc,QAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,KAAL,GAAa,QAAb;AACA,iBAAKC,MAAL,GAAc,QAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,UAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKC,OAAL,GAAe,UAAf;AACH,SA1Be;AA2BhBC,gBA3BgB,sBA2BL;AACP,iBAAKjB,MAAL,GAAc,QAAd;AACA,iBAAKkB,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,QAAd;AACA,iBAAKf,MAAL,GAAc,SAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAKe,OAAL,GAAe,UAAf;AACA,iBAAKC,SAAL,GAAiB,YAAjB;AACH,SAnCe;AAoChBC,WApCgB,iBAoCV;AACF,iBAAKC,MAAL,GAAc,WAAd;AACA,iBAAKb,MAAL,GAAc,SAAd;AACA,iBAAKc,OAAL,GAAe,UAAf;AACA,iBAAKC,MAAL,GAAc,QAAd;AACA,iBAAKC,KAAL,GAAa,QAAb;AACA,iBAAKC,OAAL,GAAe,UAAf;AACA,iBAAKC,MAAL,GAAc,UAAd;AACA,iBAAKC,MAAL,GAAc,SAAd;AACA,iBAAK7B,MAAL,GAAc,QAAd;AACA,iBAAK8B,MAAL,GAAc,SAAd;AACH,SA/Ce;AAgDhBC,eAhDgB,qBAgDN;AACN,iBAAKC,OAAL,GAAe,UAAf;AAEH,SAnDe;AAqDhBC,6BArDgB,mCAqDQ;AACpB,mBAAO,CACH,SADG,EAEH,SAFG,EAGH,UAHG,EAIH,SAJG,EAKH,UALG,EAMH,QANG,EAOH,SAPG,EAQH,SARG,EASH,QATG,EAUH,SAVG,EAWH,SAXG,EAYH,SAZG,EAaH,SAbG,EAcH,SAdG,EAeH,QAfG,EAgBH,MAhBG,EAiBH,SAjBG,EAkBH,SAlBG,EAmBH,SAnBG,EAoBH,SApBG,EAqBH,SArBG,EAsBH,QAtBG,EAuBH,SAvBG,CAAP;AAyBH,SA/Ee;AAiFhBC,+BAjFgB,mCAiFQC,MAjFR,EAiFgB;AAC5B,gBAAMC,gBAAgB,KAAKH,qBAAL,EAAtB;AACA,gBAAMI,WAAWF,OAAOG,GAAP,CAAW,UAACC,IAAD,EAAU;AAClC,oBAAMC,aAAa,EAAnB;AACAJ,8BAAcK,OAAd,CAAsB,UAACC,KAAD,EAAW;AAC7BF,+BAAWE,KAAX,IAAoBH,KAAKI,UAAL,CAAgBD,KAAhB,CAApB;AACH,iBAFD;AAGA,uBAAOF,UAAP;AACH,aANgB,CAAjB;AAOA,mBAAOH,QAAP;AACH,SA3Fe;AA6FhBO,wBA7FgB,4BA6FCC,GA7FD,EA6F2C;AAAA,gBAArCC,QAAqC,uEAA1B,IAA0B;AAAA,gBAApBC,WAAoB,uEAAN,IAAM;;AACvD,gBAAMC,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAM+D,YAAY,IAAI9D,SAAJ,CAAc0D,GAAd,CAAlB;AACA,gBAAMK,QAAQ,IAAI9D,KAAJ,EAAd;AACA8D,kBAAMC,KAAN,GAAc,KAAd;AACAD,kBAAME,cAAN,GAAuBN,QAAvB;AACAI,kBAAMG,SAAN,GAAkB,CAAC,GAAD,CAAlB;AACAH,kBAAMI,GAAN,GAAY,CAAZ;AACAL,sBAAUM,OAAV,CAAkBL,KAAlB,EACKM,IADL,CACU,kBAAU;AACZ,oBAAMC,UAAUC,OAAOC,QAAP,CAAgB,CAAhB,CAAhB;AACA,oBAAIZ,WAAJ,EAAiB;AACb,yBAAK,IAAIa,IAAT,IAAiBH,QAAQd,UAAzB,EAAqC;AACjCc,gCAAQd,UAAR,CAAmBiB,IAAnB,IAA2B,IAA3B;AACH;AACJ;AACD,uBAAOZ,SAASa,OAAT,CAAiBJ,OAAjB,CAAP;AACH,aATL,EAUKK,KAVL,CAUW,eAAO;AACVd,yBAASe,MAAT,CAAgBC,GAAhB;AACH,aAZL;AAaA,mBAAOhB,SAASiB,OAAhB;AACH,SAnHe;AAqHhBC,yBArHgB,mCAqHsI;AAAA,gBAAlIC,SAAkI,QAAlIA,SAAkI;AAAA,gBAAvHC,OAAuH,QAAvHA,OAAuH;AAAA,qCAA9GC,QAA8G;AAAA,gBAA9GA,QAA8G,iCAAnG,EAAmG;AAAA,sCAA/FC,SAA+F;AAAA,gBAA/FA,SAA+F,kCAAnF,EAAmF;AAAA,4CAA/EC,eAA+E;AAAA,gBAA/EA,eAA+E,wCAA7D,KAA6D;AAAA,6CAAtDC,gBAAsD;AAAA,gBAAtDA,gBAAsD,yCAAnC,IAAmC;AAAA,6CAA7BC,kBAA6B;AAAA,gBAA7BA,kBAA6B,yCAAR,IAAQ;;AAClJ,gBAAIC,aAAa,EAAjB;AACA,gBAAMC,mBAAmB,CACrB,QADqB,EAErB,QAFqB,EAGrB,UAHqB,EAIrB,UAJqB,CAAzB;AAMA,gBAAMC,qBAAqB,CACvB,UADuB,EAEvB,UAFuB,EAGvB,cAHuB,EAIvB,cAJuB,EAKvB,kBALuB,EAMvB,kBANuB,EAOvB,gBAPuB,EAQvB,kBARuB,CAA3B;;AAWA,gBAAIH,kBAAJ,EAAwB;AACpB,qBAAK,IAAIb,IAAT,IAAiBO,SAAjB,EAA4B;AACxB,wBAAIS,mBAAmBC,QAAnB,CAA4BjB,IAA5B,CAAJ,EAAuC;AACnC,+BAAOO,UAAUP,IAAV,CAAP;AACH;AACJ;AACJ;;AAED,gBAAIS,SAASS,MAAT,GAAkB,CAAtB,EAAyB;AACrBJ,6BAAaL,QAAb;AACH,aAFD,MAEO;AACH,oBAAMU,SAASC,OAAOC,IAAP,CAAYd,SAAZ,CAAf;AACA,oBAAMe,SAASF,OAAOC,IAAP,CAAYb,OAAZ,CAAf;AACAM,6BAAaK,OAAOI,MAAP,CAAc;AAAA,2BAAQD,OAAOL,QAAP,CAAgBjB,IAAhB,CAAR;AAAA,iBAAd,CAAb;AACH;AACD;AACA,gBAAIU,UAAUQ,MAAV,GAAmB,CAAvB,EAA0B;AACtBJ,6BAAaA,WAAWS,MAAX,CAAkB;AAAA,2BAAQ,CAACb,UAAUO,QAAV,CAAmBjB,IAAnB,CAAT;AAAA,iBAAlB,CAAb;AACH;;AAED;AACA,gBAAIY,gBAAJ,EAAsB;AAClBE,6BAAaA,WAAWS,MAAX,CAAkB;AAAA,2BAAQ,CAACR,iBAAiBE,QAAjB,CAA0BjB,IAA1B,CAAT;AAAA,iBAAlB,CAAb;AACH;;AAEDc,uBAAWjC,OAAX,CAAmB,gBAAQ;AACvB,oBAAI2B,QAAQgB,cAAR,CAAuBxB,IAAvB,CAAJ,EAAkC;AAC9B,wBAAIW,eAAJ,EAAqB;AACjB,4BAAIJ,UAAUP,IAAV,MAAoB,IAAxB,EAA8B;AAC1BO,sCAAUP,IAAV,IAAkBQ,QAAQR,IAAR,CAAlB;AACH;AACJ,qBAJD,MAIO;AACHO,kCAAUP,IAAV,IAAkBQ,QAAQR,IAAR,CAAlB;AACH;AACJ;AACJ,aAVD;;AAYA,mBAAOO,SAAP;AACH,SA9Ke;AAgLhBkB,sBAhLgB,0BAgLD3E,MAhLC,EAgLOR,KAhLP,EAgLc;AAC1B,gBAAMoF,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CAAf;AACA;AACA,gBAAMC,sBAAsB7E,OAAO8E,QAAP,KAAoB,CAAC,SAAStF,MAAMsF,QAAN,EAAV,EAA4BC,KAA5B,CAAkC,CAAC,CAAnC,CAAhD;;AAEA;AACA,gBAAMC,UAAUH,oBAAoBI,KAApB,CAA0B,EAA1B,EAA8BC,OAA9B,GAAwCC,IAAxC,CAA6C,EAA7C,CAAhB;;AAEA;AACA,gBAAIxD,WAAW,KAAMqD,QAAQC,KAAR,CAAc,EAAd,EAAkBrD,GAAlB,CAAsB,UAACwD,KAAD,EAAQC,KAAR;AAAA,uBACvCC,SAASF,KAAT,IAAkBR,OAAOS,KAAP,CADqB;AAAA,aAAtB,EAEhBE,MAFgB,CAET,UAACC,CAAD,EAAIC,CAAJ;AAAA,uBAAUD,IAAIC,CAAd;AAAA,aAFS,EAEQ,CAFR,IAEa,EAFlC;;AAIA,gBAAI9D,WAAW,CAAf,EAAkB;AACdA,2BAAW,KAAKA,QAAhB;AACH;;AAED,mBAAOA,QAAP;AACH,SAlMe;AAoMhB+D,uBApMgB,2BAoMAtD,QApMA,EAoMUD,GApMV,EAoMe;AAC3B,gBAAMG,WAAW,IAAI9D,QAAJ,EAAjB;;AAEA,gBAAMmH,aAAa,IAAIjH,KAAJ,EAAnB;AACAiH,uBAAWvD,QAAX,GAAsBA,QAAtB;AACAuD,uBAAWhD,SAAX,GAAuB,CAAC,GAAD,CAAvB;AACAgD,uBAAWjD,cAAX,GAA4B,IAA5B;AACA,gBAAMkD,iBAAiB,IAAInH,SAAJ,CAAc0D,GAAd,CAAvB;AACAyD,2BAAe/C,OAAf,CAAuB8C,UAAvB,EACK7C,IADL,CACU,oBAAY;AACd,oBAAInB,SAASsB,QAAT,CAAkBmB,MAAlB,KAA6B,CAAjC,EAAoC;AAChC,2BAAO9B,SAASe,MAAT,CAAgB,4BAAhB,CAAP;AACH;AACD,uBAAOf,SAASa,OAAT,CAAiBxB,SAASsB,QAAT,CAAkB,CAAlB,CAAjB,CAAP;AACH,aANL,EAOKG,KAPL,CAOW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAPX;;AASA,mBAAOhB,SAASiB,OAAhB;AACH,SAtNe;AAwNhBsC,iCAxNgB,qCAwNU1D,GAxNV,EAwNe2D,KAxNf,EAwNsBC,WAxNtB,EAwNmC;AAAA;;AAC/C,gBAAMzD,WAAW,IAAI9D,QAAJ,EAAjB;;AAEA,iBAAK0D,gBAAL,CAAsBC,GAAtB,EACKW,IADL,CACU,eAAO;AACT,oBAAMkD,OAAOD,YAAYnE,GAAZ,CAAgB,UAACqE,OAAD,EAAa;AACtC,wBAAMC,SAASC,IAAIC,KAAJ,EAAf;AACAF,2BAAOjE,UAAP,GAAoB,MAAKuB,iBAAL,CAAuB;AACvCC,mCAAWyC,OAAOjE,UADqB;AAEvCyB,iCAASoC,MAAM7D;AAFwB,qBAAvB,CAApB;AAIAiE,2BAAO9D,QAAP,GAAkB6D,QAAQ7D,QAA1B;AACA,2BAAO8D,MAAP;AACH,iBARY,CAAb;AASA,uBAAO5D,SAASa,OAAT,CAAiB6C,IAAjB,CAAP;AACH,aAZL,EAaK5C,KAbL,CAaW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAbX;;AAeA,mBAAOhB,SAASiB,OAAhB;AACH,SA3Oe;AA6OhB8C,uBA7OgB,2BA6OAC,eA7OA,EA6OiB;AAC7B,gBAAMC,SAAS,IAAI,KAAK3F,GAAT,EAAf;AACA,gBAAIQ,SAASkF,gBAAgB1E,GAAhB,CAAoB,eAAO;AAAE,uBAAO4E,IAAIvE,UAAJ,CAAesE,OAAOnF,MAAtB,CAAP;AAAsC,aAAnE,CAAb;AACAA,qBAAS,6BAAI,IAAIqF,GAAJ,CAAQrF,MAAR,CAAJ,MAAwB,CAAC,CAAD,CAAxB,GAA8B,GAA9B,GAAoC,GAA7C;AACA,mBAAOA,MAAP;AACH,SAlPe;AAoPhBsF,4BApPgB,gCAoPKC,MApPL,EAoPaX,IApPb,EAoPmB1G,MApPnB,EAoP2BsH,WApP3B,EAoPwCC,IApPxC,EAoP8C5E,UApP9C,EAoP0Db,MApP1D,EAoPkE;AAAA;;AAC9E;AACA,gBAAMkB,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAM+H,SAAS,IAAI,KAAK3F,GAAT,EAAf;;AAEA,gBAAMkG,eAAe,IAAIrI,SAAJ,CAAckI,MAAd,CAArB;;AAEA,gBAAMI,WAAW,IAAIrI,KAAJ,EAAjB;;AAEAqI,qBAAStE,KAAT,GAAoB,KAAKzD,eAAzB,YAA+CM,MAA/C;;AAEA,gBAAM0H,iBAAiB,IAAIrI,mBAAJ,EAAvB;AACAqI,2BAAeC,aAAf,GAA+B,KAA/B;AACAD,2BAAeE,gBAAf,GAAkCX,OAAO1F,MAAzC;AACAmG,2BAAeG,qBAAf,GAA0CZ,OAAO1F,MAAjD;;AAEA,gBAAMuG,gBAAgB,IAAIzI,mBAAJ,EAAtB;AACAyI,0BAAcH,aAAd,GAA8B,KAA9B;AACAG,0BAAcF,gBAAd,GAAiCX,OAAOvG,MAAxC;AACAoH,0BAAcD,qBAAd,GAAyCZ,OAAOvG,MAAhD;;AAEA+G,qBAASrE,cAAT,GAA0B,KAA1B;AACAqE,qBAASM,aAAT,GAAyB,CAACL,cAAD,EAAiBI,aAAjB,CAAzB;;AAEAN,yBAAajE,OAAb,CAAqBkE,QAArB,EACKjE,IADL,CACU,oBAAY;AACdkD,qBAAKjE,OAAL,CAAa,UAACoE,GAAD,EAAMmB,GAAN,EAAc;AACvBnB,wBAAIlE,UAAJ,CAAesE,OAAO1F,MAAtB,IAAgCc,SAASsB,QAAT,CAAkB,CAAlB,EAAqBhB,UAArB,CAAgC+E,eAAeG,qBAA/C,IAAwEG,GAAxE,GAA8E,CAA9G;AACAnB,wBAAIlE,UAAJ,CAAesE,OAAOvG,MAAtB,IAAgC2B,SAASsB,QAAT,CAAkB,CAAlB,EAAqBhB,UAArB,CAAgCmF,cAAcD,qBAA9C,IAAuEG,GAAvE,GAA6E,CAA7G;AACAnB,wBAAIlE,UAAJ,CAAesE,OAAOzF,OAAtB,IAAiC,IAAIyG,IAAJ,GAAWC,WAAX,EAAjC;AACArB,wBAAIlE,UAAJ,CAAesE,OAAOxF,MAAtB,IAAgC6F,WAAhC;AACAT,wBAAIlE,UAAJ,CAAesE,OAAOvF,KAAtB,IAA+B,OAAK/B,cAApC;AACAkH,wBAAIlE,UAAJ,CAAesE,OAAOtF,OAAtB,IAAiC4F,IAAjC;AACAV,wBAAIlE,UAAJ,CAAesE,OAAOrF,MAAtB,IAAgCe,WAAWqF,GAAX,EAAgBpG,MAAhD;AACAiF,wBAAIlE,UAAJ,CAAesE,OAAOpF,MAAtB,IAAgCc,WAAWqF,GAAX,EAAgBnG,MAAhD;AACAgF,wBAAIlE,UAAJ,CAAesE,OAAOnF,MAAtB,IAAgCA,MAAhC;AACH,iBAVD;AAWA,uBAAOkB,SAASa,OAAT,CAAiB6C,IAAjB,CAAP;AACH,aAdL,EAeK5C,KAfL,CAeW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAfX;AAgBA,mBAAOhB,SAASiB,OAAhB;AACH,SA7Re;AA+RhBkE,oCA/RgB,wCA+RazB,IA/Rb,EA+RmB0B,YA/RnB,EA+RiCC,oBA/RjC,EA+RuD;AAAA;;AACnE,gBAAMrF,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAMoJ,YAAY,EAAlB;;AAEA,iBAAK1F,gBAAL,CAAsBwF,YAAtB,EACK5E,IADL,CACU,oBAAY;AACdkD,qBAAKjE,OAAL,CAAa,eAAO;AAChB8F,6BAAS5F,UAAT,GAAsB,OAAKuB,iBAAL,CAAuB;AACzCC,mCAAWoE,SAAS5F,UADqB;AAEzCyB,iCAASyC,IAAIlE,UAF4B;AAGzC6B,0CAAkB,KAHuB;AAIzCC,4CAAoB;AAJqB,qBAAvB,CAAtB;;AADgB;AAAA;AAAA;;AAAA;AAQhB,6CAAkB4D,oBAAlB,8HAAwC;AAAA,gCAA/BG,KAA+B;;AACpC,gCAAI,CAAClJ,eAAemJ,UAAf,CAA0B5B,IAAI/D,QAA9B,EAAwC0F,MAAM1F,QAA9C,CAAL,EAA8D;AAC1D;AACH;;AAED,gCAAM4F,cAAcH,SAASzB,KAAT,EAApB;AACA4B,wCAAY5F,QAAZ,GAAuB0F,MAAM1F,QAA7B;AACAwF,sCAAUK,IAAV,CAAeD,WAAf;AACH;AAhBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBf;AACJ,iBAjBD;AAkBA,uBAAO1F,SAASa,OAAT,CAAiByE,SAAjB,CAAP;AACH,aArBL,EAsBKxE,KAtBL,CAsBW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAtBX;AAuBA,mBAAOhB,SAASiB,OAAhB;AACH,SA3Te;AA6ThB2E,wCA7TgB,4CA6TiBN,SA7TjB,EA6T4BO,UA7T5B,EA6TwC;AAAA;;AACpD,gBAAM7F,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAM4J,WAAWR,UAAUhG,GAAV,CAAc,oBAAY;AACvC,oBAAMyG,mBAAmB,IAAI5J,SAAJ,CAAc0J,UAAd,CAAzB;AACA,oBAAMG,eAAe,IAAI5J,KAAJ,EAArB;AACA4J,6BAAa5F,cAAb,GAA8B,IAA9B;AACA4F,6BAAa3F,SAAb,GAAyB,CAAC,GAAD,CAAzB;AACA2F,6BAAalG,QAAb,GAAwByF,SAASzF,QAAjC;AACAkG,6BAAaC,YAAb,GAA4B,mBAA5B;AACA,uBAAOF,iBAAiBxF,OAAjB,CAAyByF,YAAzB,CAAP;AACH,aARgB,CAAjB;AASAzJ,gBAAIuJ,QAAJ,EACKtF,IADL,CACU,oBAAY;AACd8E,0BAAU7F,OAAV,CAAkB,UAACyG,OAAD,EAAUnD,KAAV,EAAoB;AAClC,wBAAMoD,UAAUC,SAASrD,KAAT,EAAgBpC,QAAhB,CAAyB,CAAzB,EAA4BhB,UAA5C;AACA2F,8BAAUvC,KAAV,EAAiBpD,UAAjB,GAA8B,OAAKuB,iBAAL,CAAuB;AACjDC,mCAAW+E,QAAQvG,UAD8B;AAEjDyB,iCAAS+E,OAFwC;AAGjD5E,yCAAiB;AAHgC,qBAAvB,CAA9B;AAKA,2BAAOvB,SAASa,OAAT,CAAiByE,SAAjB,CAAP;AACH,iBARD;AASH,aAXL,EAYKxE,KAZL,CAYW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAZX;AAaA,mBAAOhB,SAASiB,OAAhB;AACH,SAtVe;AAwVhBoF,iCAxVgB,qCAwVUC,WAxVV,EAwVuBtJ,MAxVvB,EAwV+BsI,SAxV/B,EAwV0C;AAAA;;AACtD,gBAAMtF,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAMqK,cAAc,IAAI,KAAKtI,QAAT,EAApB;;AAEA,gBAAMuI,oBAAoB,IAAIrK,SAAJ,CAAcmK,WAAd,CAA1B;;AAEA,gBAAMG,gBAAgB,IAAIrK,KAAJ,EAAtB;AACAqK,0BAActG,KAAd,GAAyBoG,YAAYvJ,MAArC,YAAkDA,MAAlD;AACA,gBAAM0J,UAAU,IAAIrK,mBAAJ,EAAhB;AACAqK,oBAAQ/B,aAAR,GAAwB,KAAxB;AACA+B,oBAAQ9B,gBAAR,GAA2B2B,YAAYpI,MAAvC;AACAuI,oBAAQ7B,qBAAR,GAAmC0B,YAAYpI,MAA/C;;AAEAsI,0BAAcrG,cAAd,GAA+B,KAA/B;AACAqG,0BAAc1B,aAAd,GAA8B,CAAC2B,OAAD,CAA9B;;AAEAF,8BAAkBjG,OAAlB,CAA0BkG,aAA1B,EACKjG,IADL,CACU,oBAAY;AACd,oBAAIrC,SAASkB,SAASsB,QAAT,CAAkB,CAAlB,EAAqBhB,UAArB,CAAgC+G,QAAQ7B,qBAAxC,IAAiE,CAA9E;AADc;AAAA;AAAA;;AAAA;AAEd,0CAAcS,SAAd,mIAAyB;AAAA,4BAAhBqB,EAAgB;;AACrBA,2BAAEhH,UAAF,CAAa4G,YAAYpI,MAAzB,IAAmCA,MAAnC;AACAwI,2BAAEhH,UAAF,CAAa4G,YAAYrI,MAAzB,SAAsCyI,GAAEhH,UAAF,CAAa4G,YAAYnI,OAAzB,CAAtC,GAA0EpB,MAA1E,GAAmFmB,MAAnF;AACAwI,2BAAEhH,UAAF,CAAa4G,YAAYlI,SAAzB,IAAsC,OAAKzB,cAA3C;AACAuB,kCAAU,CAAV;AACH;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQd,uBAAO6B,SAASa,OAAT,CAAiByE,SAAjB,CAAP;AACH,aAVL,EAWKxE,KAXL,CAWW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAXX;AAYA,mBAAOhB,SAASiB,OAAhB;AACH,SArXe;AAuXhB2F,sBAvXgB,0BAuXDlJ,MAvXC,EAuXOJ,MAvXP,EAuXe;AAC3B,mBAAUI,MAAV,cAAyBJ,MAAzB;AACH,SAzXe;AA2XhBuJ,sBA3XgB,0BA2XDlJ,MA3XC,EA2XOC,MA3XP,EA2XeC,MA3Xf,EA2XuB;AACnC,mBAAUF,MAAV,SAAoBC,MAApB,SAA8BC,MAA9B;AACH,SA7Xe;AA+XhBiJ,sBA/XgB,0BA+XDnJ,MA/XC,EA+XOC,MA/XP,EA+XeC,MA/Xf,EA+XuB;AACnC,mBAAUF,MAAV,SAAoBC,MAApB,SAA8BC,MAA9B;AACH,SAjYe;AAmYhBkJ,qCAnYgB,yCAmYczB,SAnYd,EAmYyB0B,OAnYzB,EAmYkCC,gBAnYlC,EAmYoD;AAAA;;AAChE,gBAAMjH,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAMgL,UAAU,IAAI,KAAKnK,IAAT,EAAhB;AACA,gBAAIoK,QAAQ,EAAZ;;AAEA,iBAAKvH,gBAAL,CAAsBoH,OAAtB,EACKxG,IADL,CACU,gBAAQ;AACVyG,iCAAiBxH,OAAjB,CAAyB,uBAAe;AACpC,yBAAKkH,IAAI,CAAT,EAAYA,IAAIrB,UAAUxD,MAA1B,EAAkC6E,GAAlC,EAAuC;AACnC,4BAAIrK,eAAemJ,UAAf,CAA0B2B,YAAYtH,QAAtC,EAAgDwF,UAAUqB,CAAV,EAAa7G,QAA7D,CAAJ,EAA4E;AACxE,gCAAMuH,YAAY9H,KAAKuE,KAAL,EAAlB;AACAuD,sCAAU1H,UAAV,GAAuB,OAAKuB,iBAAL,CAAuB;AAC1CC,2CAAW5B,KAAKI,UAD0B;AAE1CyB,yCAASkE,UAAUqB,CAAV,EAAahH,UAFoB;AAG1C6B,kDAAkB;AAHwB,6BAAvB,CAAvB;AAKA6F,sCAAU1H,UAAV,CAAqBuH,QAAQjK,MAA7B,IAAuCmK,YAAYnK,MAAnD;AACAoK,sCAAU1H,UAAV,CAAqBuH,QAAQhK,KAA7B,IAAsC,OAAKJ,UAA3C;AACAuK,sCAAU1H,UAAV,CAAqBuH,QAAQ/J,MAA7B,IAAuC,OAAKN,WAA5C;AACAwK,sCAAU1H,UAAV,CAAqBuH,QAAQ9J,MAA7B,IAAuCgK,YAAYtH,QAAZ,CAAqBwH,CAA5D;AACAD,sCAAU1H,UAAV,CAAqBuH,QAAQ7J,MAA7B,IAAuC+J,YAAYtH,QAAZ,CAAqByH,CAA5D;AACAF,sCAAU1H,UAAV,CAAqBuH,QAAQ5J,MAA7B,IAAuC,OAAK+E,cAAL,CACnCgF,UAAU1H,UAAV,CAAqBuH,QAAQxJ,MAA7B,CADmC,EAEnC,OAAKZ,UAF8B,CAAvC;AAIAuK,sCAAU1H,UAAV,CAAqBuH,QAAQ3J,MAA7B,IAAuC,OAAKqJ,cAAL,CACnCS,UAAU1H,UAAV,CAAqBuH,QAAQxJ,MAA7B,CADmC,EAEnC2J,UAAU1H,UAAV,CAAqBuH,QAAQ5J,MAA7B,CAFmC,CAAvC;AAIA+J,sCAAU1H,UAAV,CAAqBuH,QAAQ1J,MAA7B,IAAuC,OAAKqJ,cAAL,CACnCQ,UAAU1H,UAAV,CAAqBuH,QAAQvJ,MAA7B,CADmC,EAEnC0J,UAAU1H,UAAV,CAAqBuH,QAAQtJ,MAA7B,CAFmC,EAGnCyJ,UAAU1H,UAAV,CAAqBuH,QAAQrJ,MAA7B,CAHmC,CAAvC;AAKAwJ,sCAAU1H,UAAV,CAAqBuH,QAAQzJ,MAA7B,IAAuC,OAAKqJ,cAAL,CACnCO,UAAU1H,UAAV,CAAqBuH,QAAQvJ,MAA7B,CADmC,EAEnC0J,UAAU1H,UAAV,CAAqBuH,QAAQtJ,MAA7B,CAFmC,EAGnCyJ,UAAU1H,UAAV,CAAqBuH,QAAQrJ,MAA7B,CAHmC,CAAvC;AAKAwJ,sCAAUvH,QAAV,GAAqBsH,YAAYtH,QAAjC;AACAqH,kCAAMxB,IAAN,CAAW0B,UAAUvD,KAAV,EAAX;AACA;AACH;AACJ;AACJ,iBArCD;AAsCA,uBAAO9D,SAASa,OAAT,CAAiBsG,KAAjB,CAAP;AACH,aAzCL,EA0CKrG,KA1CL,CA0CW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aA1CX;AA2CA,mBAAOhB,SAASiB,OAAhB;AACH,SApbe;AAsbhBuG,uBAtbgB,2BAsbAL,KAtbA,EAsbOM,iBAtbP,EAsb0BzK,MAtb1B,EAsbkC;AAC9C,gBAAMgD,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAMgL,UAAU,IAAI,KAAKnK,IAAT,EAAhB;;AAEA,gBAAM2K,0BAA0B,IAAIvL,SAAJ,CAAcsL,iBAAd,CAAhC;AACA,gBAAME,sBAAsB,IAAIvL,KAAJ,EAA5B;AACAuL,gCAAoBxH,KAApB,GAA+B+G,QAAQlK,MAAvC,YAAoDA,MAApD;AACA2K,gCAAoBvH,cAApB,GAAqC,IAArC;AACAuH,gCAAoBtH,SAApB,GAAgC,CAAC6G,QAAQpJ,MAAT,CAAhC;AACA6J,gCAAoB7H,QAApB,GAA+BqH,MAAM,CAAN,EAASrH,QAAxC;;AAEA4H,oCAAwBnH,OAAxB,CAAgCoH,mBAAhC,EACKnH,IADL,CACU,oBAAY;AACd2G,sBAAM1H,OAAN,CAAc,gBAAQ;AAClBF,yBAAKI,UAAL,CAAgBuH,QAAQpJ,MAAxB,IAAkCuB,SAASsB,QAAT,CAAkB,CAAlB,EAAqBhB,UAArB,CAAgCuH,QAAQpJ,MAAxC,CAAlC;AACH,iBAFD;AAGA,uBAAOkC,SAASa,OAAT,CAAiBsG,KAAjB,CAAP;AACH,aANL,EAOKrG,KAPL,CAOW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAPX;AAQA,mBAAOhB,SAASiB,OAAhB;AACH,SA1ce;AA4chB2G,uBA5cgB,2BA4cAT,KA5cA,EA4cOH,OA5cP,EA4cgBhK,MA5chB,EA4cwB;AACpC,gBAAMgD,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAMgL,UAAU,IAAI,KAAKnK,IAAT,EAAhB;;AAEA,gBAAM8K,gBAAgB,IAAI1L,SAAJ,CAAc6K,OAAd,CAAtB;AACA,gBAAMc,YAAY,IAAI1L,KAAJ,EAAlB;AACA0L,sBAAU1H,cAAV,GAA2B,KAA3B;AACA0H,sBAAU3H,KAAV,GAAqB+G,QAAQlK,MAA7B,YAA0CA,MAA1C;AACA,gBAAM0J,UAAU,IAAIrK,mBAAJ,EAAhB;AACAqK,oBAAQ/B,aAAR,GAAwB,KAAxB;AACA+B,oBAAQ9B,gBAAR,GAA2BsC,QAAQnJ,MAAnC;AACA2I,oBAAQ7B,qBAAR,GAAmCqC,QAAQnJ,MAA3C;AACA+J,sBAAU/C,aAAV,GAA0B,CAAC2B,OAAD,CAA1B;;AAEAmB,0BAActH,OAAd,CAAsBuH,SAAtB,EACKtH,IADL,CACU,UAAUnB,QAAV,EAAoB;AACtB8H,sBAAM1H,OAAN,CAAc,UAACF,IAAD,EAAOyF,GAAP,EAAe;AACzBzF,yBAAKI,UAAL,CAAgBuH,QAAQnJ,MAAxB,IAAkCsB,SAASsB,QAAT,CAAkB,CAAlB,EAAqBhB,UAArB,CAAgC+G,QAAQ7B,qBAAxC,IAAiEG,GAAjE,GAAuE,CAAzG;AACH,iBAFD;AAGA,uBAAOhF,SAASa,OAAT,CAAiBsG,KAAjB,CAAP;AACH,aANL,EAMO,UAAUY,KAAV,EAAiB;AAChB/H,yBAASe,MAAT,CAAgBgH,KAAhB;AACH,aARL;AASA,mBAAO/H,SAASiB,OAAhB;AACH,SApee;AAsehB+G,0BAtegB,8BAseG1B,WAteH,EAsegB5C,IAtehB,EAsesB;AAClC,gBAAMuE,2BAA2B,IAAI9L,SAAJ,CAAcmK,WAAd,CAAjC;AACA,gBAAM4B,uBAAuB,IAAI9L,KAAJ,EAA7B;AACA8L,iCAAqB9H,cAArB,GAAsC,IAAtC;AACA8H,iCAAqB7H,SAArB,GAAiC,CAAC,GAAD,CAAjC;AACA6H,iCAAqBpI,QAArB,GAAgC4D,KAAK5D,QAArC;AACAoI,iCAAqBjC,YAArB,GAAoC,qBAApC;AACAiC,iCAAqBC,QAArB,GAAgC,GAAhC;AACAD,iCAAqBE,KAArB,GAA6B,QAA7B;AACA,mBAAOH,yBAAyB1H,OAAzB,CAAiC2H,oBAAjC,CAAP;AACH,SAhfe;AAkfhBG,sBAlfgB,0BAkfDrB,OAlfC,EAkfQtD,IAlfR,EAkfc;AAC1B,gBAAM4E,uBAAuB,IAAInM,SAAJ,CAAc6K,OAAd,CAA7B;AACA,gBAAMuB,mBAAmB,IAAInM,KAAJ,EAAzB;AACAmM,6BAAiBnI,cAAjB,GAAkC,IAAlC;AACAmI,6BAAiBlI,SAAjB,GAA6B,CAAC,GAAD,CAA7B;AACAkI,6BAAiBzI,QAAjB,GAA4B4D,KAAK5D,QAAjC;AACAyI,6BAAiBtC,YAAjB,GAAgC,qBAAhC;AACAsC,6BAAiBJ,QAAjB,GAA4B,GAA5B;AACAI,6BAAiBH,KAAjB,GAAyB,QAAzB;AACA,mBAAOE,qBAAqB/H,OAArB,CAA6BgI,gBAA7B,CAAP;AACH,SA5fe;AA8fhBC,qBA9fgB,yBA8fFlC,WA9fE,EA8fWU,OA9fX,EA8foBtD,IA9fpB,EA8f0B;AACtC;AACA,gBAAM1D,WAAW,IAAI9D,QAAJ,EAAjB;;AAEA,gBAAM4J,WAAW,CACb,KAAKkC,kBAAL,CAAwB1B,WAAxB,EAAqC5C,IAArC,CADa,EAEb,KAAK2E,cAAL,CAAoBrB,OAApB,EAA6BtD,IAA7B,CAFa,CAAjB;;AAKAnH,gBAAIuJ,QAAJ,EACKtF,IADL,CACU,mBAAW;AACb;AACA;AACA,uBAAOR,SAASa,OAAT,CAAiB4H,OAAjB,CAAP;AACH,aALL,EAMK3H,KANL,CAMW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aANX;AAOA,mBAAOhB,SAASiB,OAAhB;AACH,SA/gBe;AAihBhByH,kCAjhBgB,sCAihBW7I,GAjhBX,EAihBgB8I,MAjhBhB,EAihBwB;AACpC,mBAAO;AACH9I,qBAAQA,GAAR,iBADG;AAEH+I,yBAAS;AACLjI,8BAAUkI,KAAKC,SAAL,CAAeH,MAAf,CADL;AAELI,uBAAG;AAFE,iBAFN;AAMHC,0BAAU,MANP;AAOHC,mCAAmB;AAPhB,aAAP;AASH,SA3hBe;AA6hBhBC,qCA7hBgB,yCA6hBcrJ,GA7hBd,EA6hBmB8I,MA7hBnB,EA6hB2B;AACvC,mBAAO;AACH9I,qBAAQA,GAAR,oBADG;AAEH+I,yBAAS;AACLjI,8BAAUkI,KAAKC,SAAL,CAAeH,MAAf,CADL;AAELI,uBAAG;AAFE,iBAFN;AAMHC,0BAAU,MANP;AAOHC,mCAAmB;AAPhB,aAAP;AASH,SAviBe;AAyiBhBE,qCAziBgB,yCAyiBctJ,GAziBd,EAyiBmB8I,MAziBnB,EAyiB2B;AACvC,mBAAO;AACH9I,qBAAQA,GAAR,oBADG;AAEH+I,yBAAS;AACLzI,2BAAOwI,MADF;AAELI,uBAAG;AAFE,iBAFN;AAMHC,0BAAU,MANP;AAOHC,mCAAmB;AAPhB,aAAP;AASH,SAnjBe;AAqjBhBG,gCArjBgB,oCAqjBSC,MArjBT,EAqjBiBrF,eArjBjB,EAqjBkCsF,mBArjBlC,EAqjBuDC,gBArjBvD,EAqjByE;AACrF,gBAAMvJ,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAMsN,6BAA6B,KAAKd,0BAAL,CAC/BW,OAAOI,cADwB,EAE/BzF,eAF+B,CAAnC;AAIA,gBAAM0F,mCAAmC,KAAKhB,0BAAL,CACrCW,OAAOM,mBAD8B,EAErCL,mBAFqC,CAAzC;AAIA,gBAAMM,8BAA8B,KAAKlB,0BAAL,CAChCW,OAAOQ,eADyB,EAEhCN,gBAFgC,CAApC;AAIA,gBAAMzD,WAAW,CACbtJ,YAAYgN,0BAAZ,EAAwC,EAAEM,SAAS,IAAX,EAAxC,CADa,EAEbtN,YAAYkN,gCAAZ,EAA8C,EAAEI,SAAS,IAAX,EAA9C,CAFa,EAGbtN,YAAYoN,2BAAZ,EAAyC,EAAEE,SAAS,IAAX,EAAzC,CAHa,CAAjB;;AAMAvN,gBAAIuJ,QAAJ,EACKtF,IADL,CACU,mBAAW;AACb,uBAAOR,SAASa,OAAT,CAAiB4H,OAAjB,CAAP;AACH,aAHL,EAIK3H,KAJL,CAIW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAJX;AAKA,mBAAOhB,SAASiB,OAAhB;AACH,SA/kBe;AAilBhB8I,wBAjlBgB,4BAilBC/F,eAjlBD,EAilBkBsF,mBAjlBlB,EAilBuCC,gBAjlBvC,EAilByDF,MAjlBzD,EAilBiE;AAC7E,gBAAMrJ,WAAW,IAAI9D,QAAJ,EAAjB;;AAEA,gBAAM8N,aAAahG,gBAAgB1E,GAAhB,CAAoB;AAAA,uBAAO4E,IAAIvE,UAAJ,CAAesK,QAAtB;AAAA,aAApB,CAAnB;AACA,gBAAMC,kBAAkBZ,oBAAoBhK,GAApB,CAAwB;AAAA,uBAAO4E,IAAIvE,UAAJ,CAAesK,QAAtB;AAAA,aAAxB,CAAxB;AACA,gBAAME,cAAcZ,iBAAiBjK,GAAjB,CAAqB;AAAA,uBAAO4E,IAAIvE,UAAJ,CAAesK,QAAtB;AAAA,aAArB,CAApB;;AAEA,gBAAMG,2BAA2B,KAAKjB,6BAAL,CAC7BE,OAAOhF,MADsB,oBAEb2F,WAAWnH,IAAX,CAAgB,GAAhB,CAFa,OAAjC;AAIA,gBAAMwH,iCAAiC,KAAKlB,6BAAL,CACnCE,OAAO/C,WAD4B,oBAEnB4D,gBAAgBrH,IAAhB,CAAqB,GAArB,CAFmB,OAAvC;AAIA,gBAAMyH,4BAA4B,KAAKnB,6BAAL,CAC9BE,OAAOrC,OADuB,oBAEdmD,YAAYtH,IAAZ,CAAiB,GAAjB,CAFc,OAAlC;;AAKA,gBAAMiD,WAAW,CACbtJ,YAAY4N,wBAAZ,EAAsC,EAAEN,SAAS,IAAX,EAAtC,CADa,EAEbtN,YAAY6N,8BAAZ,EAA4C,EAAEP,SAAS,IAAX,EAA5C,CAFa,EAGbtN,YAAY8N,yBAAZ,EAAuC,EAAER,SAAS,IAAX,EAAvC,CAHa,CAAjB;;AAMAvN,gBAAIuJ,QAAJ,EACKtF,IADL,CACU,mBAAW;AACb,uBAAOR,SAASa,OAAT,CAAiB4H,OAAjB,CAAP;AACH,aAHL,EAIK3H,KAJL,CAIW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAJX;AAKA,mBAAOhB,SAASiB,OAAhB;AACH,SAjnBe;AAmnBhBsJ,kBAnnBgB,sBAmnBL7G,IAnnBK,EAmnBC4B,SAnnBD,EAmnBY6B,KAnnBZ,EAmnBmBkC,MAnnBnB,EAmnB2B;AACvC,gBAAMrJ,WAAW,IAAI9D,QAAJ,EAAjB;;AAEAwH,mBAAO8G,MAAMC,OAAN,CAAc/G,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAApC;;AAEA,gBAAMgH,UAAU,KAAKhC,0BAAL,CACZW,OAAOhF,MADK,EAEZX,IAFY,CAAhB;;AAKA4B,wBAAYkF,MAAMC,OAAN,CAAcnF,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAAnD;;AAEA,gBAAMqF,gBAAgB,KAAKjC,0BAAL,CAClBW,OAAO/C,WADW,EAElBhB,SAFkB,CAAtB;;AAKA6B,oBAAQqD,MAAMC,OAAN,CAActD,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAvC;;AAEA,gBAAMyD,YAAY,KAAKlC,0BAAL,CACdW,OAAOrC,OADO,EAEdG,KAFc,CAAlB;;AAKA,gBAAMrB,WAAW,CACbtJ,YAAYkO,OAAZ,EAAqB,EAAEZ,SAAS,IAAX,EAArB,CADa,EAEbtN,YAAYmO,aAAZ,EAA2B,EAAEb,SAAS,IAAX,EAA3B,CAFa,EAGbtN,YAAYoO,SAAZ,EAAuB,EAAEd,SAAS,IAAX,EAAvB,CAHa,CAAjB;;AAMAvN,gBAAIuJ,QAAJ,EACKtF,IADL,CACU,mBAAW;AACb,uBAAOR,SAASa,OAAT,CAAiB4H,OAAjB,CAAP;AACH,aAHL,EAIK3H,KAJL,CAIW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aAJX;AAKA,mBAAOhB,SAASiB,OAAhB;AACH,SAvpBe;AAypBhB4J,4BAzpBgB,gCAypBK1D,KAzpBL,EAypBY7C,WAzpBZ,EAypByBwG,WAzpBzB,EAypBsC9N,MAzpBtC,EAypB8CqM,MAzpB9C,EAypBsD;AAClE0B,oBAAQC,GAAR,CAAY7D,KAAZ;AACA,gBAAMnH,WAAW,IAAI9D,QAAJ,EAAjB;AACA,gBAAM+O,gBAAgBxO,YAAYyC,uBAAZ,CAAoCiI,KAApC,CAAtB;AACA,gBAAI9H,WAAW;AACX6L,oBAAI5G,WADO;AAEXmE,yBAASwC,aAFE;AAGXE,wBAAQnI,SAAS8H,WAAT;AAHG,aAAf;AAJkE;AAAA;AAAA;;AAAA;AASlE,sCAAmBzL,SAASoJ,OAA5B,mIAAqC;AAAA,wBAA5B2C,MAA4B;;AACjCA,2BAAO,QAAP,IAAmBpO,MAAnB;AACH;AAXiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAalEqO,kBAAMhC,OAAOiC,uBAAb,EAAsC;AAClCC,wBAAQ,MAD0B;AAElCC,sBAAM3C,KAAKC,SAAL,CAAezJ,QAAf,CAF4B;AAGlCoM,yBAAS;AACL,oCAAgB;AADX;AAHyB,aAAtC,EAOKjL,IAPL,CAOU;AAAA,uBAAYnB,SAASqM,IAAT,EAAZ;AAAA,aAPV,EAQKlL,IARL,CAQU;AAAA,uBAAQR,SAASa,OAAT,CAAiB8K,IAAjB,CAAR;AAAA,aARV,EASK7K,KATL,CASW;AAAA,uBAAOd,SAASe,MAAT,CAAgBC,GAAhB,CAAP;AAAA,aATX;AAUA,mBAAOhB,SAASiB,OAAhB;AACH,SAjrBe;AAmrBhB2K,4BAnrBgB,gCAmrBKlI,IAnrBL,EAmrBWyD,KAnrBX,EAmrBkB;AAAA;AAAA;AAAA;;AAAA;AAC9B,sCAAgBzD,IAAhB,mIAAsB;AAAA,wBAAbG,GAAa;;AAClB,wBAAMgI,aAAa,EAAnB;AADkB;AAAA;AAAA;;AAAA;AAElB,8CAAiB1E,KAAjB,mIAAwB;AAAA,gCAAf5H,IAAe;;AACpBsM,uCAAWlG,IAAX,CAAgBrJ,eAAemJ,UAAf,CAA0B5B,IAAI/D,QAA9B,EAAwCP,KAAKO,QAA7C,CAAhB;AACH;AAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKlB,wBAAI+L,WAAWC,KAAX,CAAiB;AAAA,+BAAKnF,MAAM,KAAX;AAAA,qBAAjB,CAAJ,EAAwC;AACpC,+BAAO,KAAP;AACH;AACJ;AAT6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAU9B,mBAAO,IAAP;AACH;AA9rBe,KAApB;;AAksBA,WAAOlK,WAAP;AACH,CAvtBD","file":"UtilityCase.js","sourcesContent":["define([\r\n    \"dojo/Deferred\",\r\n    \"esri/tasks/QueryTask\",\r\n    \"esri/tasks/query\",\r\n    \"esri/tasks/StatisticDefinition\",\r\n    \"esri/geometry/geometryEngine\",\r\n    \"dojo/promise/all\",\r\n    \"esri/request\"\r\n], function (\r\n    Deferred,\r\n    QueryTask,\r\n    Query,\r\n    StatisticDefinition,\r\n    geometryEngine,\r\n    all,\r\n    esriRequest\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la subdivisión de lotes\r\n    */\r\n    const UtilityCase = {\r\n\r\n        ubigeoFieldName: 'UBIGEO',\r\n        platformUpdate: 'PCF',\r\n        estadoInsValue: 1,\r\n        estadoValue: 1,\r\n        codUiValue: 1,\r\n\r\n        Land() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.codPre = 'COD_PRE';\r\n            this.codUi = 'COD_UI';\r\n            this.estado = 'ESTADO';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.codVer = 'COD_VER';\r\n            this.codCpu = 'COD_CPU';\r\n            this.dirMun = 'DIR_MUN';\r\n            this.dirUrb = 'DIR_URB';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.tipVia = 'TIP_VIA';\r\n            this.nomVia = 'NOM_VIA';\r\n            this.numMun = 'NUM_MUN';\r\n            this.idMznC = 'ID_MZN_C';\r\n            this.idPred = 'ID_PRED';\r\n            this.tipPred = 'TIP_PRED';\r\n        },\r\n        PointLot() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.idLote = 'ID_LOTE'\r\n            this.secuen = 'SECUEN';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.zonaUtm = 'ZONA_UTM';\r\n            this.estadoIns = 'ESTADO_INS'\r\n        },\r\n        Lot() {\r\n            this.idLotP = 'ID_LOTE_P';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.anoCart = 'ANO_CART';\r\n            this.fuente = 'FUENTE';\r\n            this.nomPc = 'NOM_PC';\r\n            this.nomUser = 'NOM_USER';\r\n            this.codLot = 'COD_LOTE';\r\n            this.lotUrb = 'LOT_URB';\r\n            this.ubigeo = 'UBIGEO';\r\n            this.tipLot = 'TIP_LOT';\r\n        },\r\n        Arancel() {\r\n            this.secEjec = 'SEC_EJEC';\r\n\r\n        },\r\n\r\n        receptionModelRequest() {\r\n            return [\r\n                \"COD_PRE\",\r\n                \"COD_CPU\",\r\n                \"COD_SECT\",\r\n                \"COD_MZN\",\r\n                \"COD_LOTE\",\r\n                \"COD_UU\",\r\n                \"COD_VIA\",\r\n                \"TIPO_UU\",\r\n                \"NOM_UU\",\r\n                \"NOM_REF\",\r\n                \"MZN_URB\",\r\n                \"LOT_URB\",\r\n                \"TIP_VIA\",\r\n                \"NOM_VIA\",\r\n                \"CUADRA\",\r\n                \"LADO\",\r\n                \"DIR_MUN\",\r\n                \"DIR_URB\",\r\n                \"COORD_X\",\r\n                \"COORD_Y\",\r\n                \"RAN_CPU\",\r\n                \"COD_UI\",\r\n                \"COD_VER\",\r\n            ]\r\n        },\r\n\r\n        matchWithReceptionModel(object) {\r\n            const modelRequests = this.receptionModelRequest();\r\n            const response = object.map((land) => {\r\n                const arrayMatch = {};\r\n                modelRequests.forEach((field) => {\r\n                    arrayMatch[field] = land.attributes[field];\r\n                })\r\n                return arrayMatch;\r\n            })\r\n            return response;\r\n        },\r\n\r\n        getFeatureSchema(url, geometry = true, blankFields = true) {\r\n            const deferred = new Deferred();\r\n            const queryTask = new QueryTask(url);\r\n            const query = new Query();\r\n            query.where = \"1=1\";\r\n            query.returnGeometry = geometry;\r\n            query.outFields = [\"*\"];\r\n            query.num = 1;\r\n            queryTask.execute(query)\r\n                .then(result => {\r\n                    const feature = result.features[0];\r\n                    if (blankFields) {\r\n                        for (let prop in feature.attributes) {\r\n                            feature.attributes[prop] = null;\r\n                        }\r\n                    }\r\n                    return deferred.resolve(feature);\r\n                })\r\n                .catch(err => {\r\n                    deferred.reject(err);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        attributeTransfer({ objTarget, objBase, propsUse = [], propsOmit = [], updateOnlyNulls = false, omitPropsDefault = true, deletePropsDefault = true }) {\r\n            let fieldMatch = []\r\n            const propsOmitDefault = [\r\n                'FUENTE',\r\n                'NOM_PC',\r\n                'NOM_USER',\r\n                'ANO_CART'\r\n            ]\r\n            const propsDeleteDefault = [\r\n                'OBJECTID',\r\n                'GlobalID',\r\n                'created_date',\r\n                'created_user',\r\n                'last_edited_date',\r\n                'last_edited_user',\r\n                'Shape.STArea()',\r\n                'Shape.STLength()',\r\n            ];\r\n\r\n            if (deletePropsDefault) {\r\n                for (let prop in objTarget) {\r\n                    if (propsDeleteDefault.includes(prop)) {\r\n                        delete objTarget[prop];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (propsUse.length > 0) {\r\n                fieldMatch = propsUse\r\n            } else {\r\n                const props1 = Object.keys(objTarget);\r\n                const props2 = Object.keys(objBase);\r\n                fieldMatch = props1.filter(prop => props2.includes(prop));\r\n            }\r\n            // retirar los campos omitidos\r\n            if (propsOmit.length > 0) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmit.includes(prop));\r\n            }\r\n\r\n            // retirar los campos omitidos por defecto de objBase\r\n            if (omitPropsDefault) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmitDefault.includes(prop));\r\n            }\r\n\r\n            fieldMatch.forEach(prop => {\r\n                if (objBase.hasOwnProperty(prop)) {\r\n                    if (updateOnlyNulls) {\r\n                        if (objTarget[prop] === null) {\r\n                            objTarget[prop] = objBase[prop];\r\n                        }\r\n                    } else {\r\n                        objTarget[prop] = objBase[prop];\r\n                    }\r\n                }\r\n            });\r\n\r\n            return objTarget;\r\n        },\r\n\r\n        getValueCodVer(ranCpu, codUi) {\r\n            const factor = [2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7]\r\n            // Obteniendo código concatenado\r\n            const cod_ver_concatenate = ranCpu.toString() + (\"0000\" + codUi.toString()).slice(-4);\r\n\r\n            // Reversa de código concatenado\r\n            const cod_ver = cod_ver_concatenate.split('').reverse().join('');\r\n\r\n            // Aplicando fórmula\r\n            let response = 11 - (cod_ver.split('').map((digit, index) =>\r\n                parseInt(digit) * factor[index])\r\n                .reduce((a, b) => a + b, 0) % 11);\r\n\r\n            if (response > 9) {\r\n                response = 11 - response;\r\n            }\r\n\r\n            return response\r\n        },\r\n\r\n        getBlockFromLot(geometry, url) {\r\n            const deferred = new Deferred();\r\n\r\n            const queryBlock = new Query();\r\n            queryBlock.geometry = geometry;\r\n            queryBlock.outFields = ['*'];\r\n            queryBlock.returnGeometry = true;\r\n            const queryTaskBlock = new QueryTask(url);\r\n            queryTaskBlock.execute(queryBlock)\r\n                .then(response => {\r\n                    if (response.features.length === 0) {\r\n                        return deferred.reject(\"No se encontraron manzanas\");\r\n                    }\r\n                    return deferred.resolve(response.features[0]);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsBlockToLot(url, block, lotsResults) {\r\n            const deferred = new Deferred();\r\n\r\n            this.getFeatureSchema(url)\r\n                .then(lot => {\r\n                    const lots = lotsResults.map((graphic) => {\r\n                        const lotIdx = lot.clone();\r\n                        lotIdx.attributes = this.attributeTransfer({\r\n                            objTarget: lotIdx.attributes,\r\n                            objBase: block.attributes,\r\n                        });\r\n                        lotIdx.geometry = graphic.geometry;\r\n                        return lotIdx;\r\n                    });\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateTipLot(currentLotsRows) {\r\n            const LotCls = new this.Lot();\r\n            let tipLot = currentLotsRows.map(row => { return row.attributes[LotCls.tipLot] })\r\n            tipLot = [...new Set(tipLot)] == [2] ? '2' : '1'\r\n            return tipLot\r\n        },\r\n\r\n        calculateFieldsOfLot(lotUrl, lots, ubigeo, codRequests, user, attributes, tipLot) {\r\n            // console.log(attributes)\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n\r\n            const queryLotTask = new QueryTask(lotUrl);\r\n\r\n            const queryLot = new Query();\r\n\r\n            queryLot.where = `${this.ubigeoFieldName} = '${ubigeo}'`;\r\n\r\n            const statDefIdLoteP = new StatisticDefinition();\r\n            statDefIdLoteP.statisticType = \"max\";\r\n            statDefIdLoteP.onStatisticField = LotCls.idLotP;\r\n            statDefIdLoteP.outStatisticFieldName = `${LotCls.idLotP}_MAX`;\r\n\r\n            const statDefRanCpu = new StatisticDefinition();\r\n            statDefRanCpu.statisticType = \"max\";\r\n            statDefRanCpu.onStatisticField = LotCls.ranCpu;\r\n            statDefRanCpu.outStatisticFieldName = `${LotCls.ranCpu}_MAX`;\r\n\r\n            queryLot.returnGeometry = false;\r\n            queryLot.outStatistics = [statDefIdLoteP, statDefRanCpu];\r\n\r\n            queryLotTask.execute(queryLot)\r\n                .then(response => {\r\n                    lots.forEach((lot, idx) => {\r\n                        lot.attributes[LotCls.idLotP] = response.features[0].attributes[statDefIdLoteP.outStatisticFieldName] + idx + 1;\r\n                        lot.attributes[LotCls.ranCpu] = response.features[0].attributes[statDefRanCpu.outStatisticFieldName] + idx + 1;\r\n                        lot.attributes[LotCls.anoCart] = new Date().getFullYear();\r\n                        lot.attributes[LotCls.fuente] = codRequests;\r\n                        lot.attributes[LotCls.nomPc] = this.platformUpdate;\r\n                        lot.attributes[LotCls.nomUser] = user;\r\n                        lot.attributes[LotCls.codLot] = attributes[idx].codLot;\r\n                        lot.attributes[LotCls.lotUrb] = attributes[idx].lotUrb;\r\n                        lot.attributes[LotCls.tipLot] = tipLot;\r\n                    });\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsLotToPointLot(lots, urlPointLots, newPointLotsGraphics) {\r\n            const deferred = new Deferred();\r\n            const pointLots = [];\r\n\r\n            this.getFeatureSchema(urlPointLots)\r\n                .then(pointLot => {\r\n                    lots.forEach(lot => {\r\n                        pointLot.attributes = this.attributeTransfer({\r\n                            objTarget: pointLot.attributes,\r\n                            objBase: lot.attributes,\r\n                            omitPropsDefault: false,\r\n                            deletePropsDefault: true\r\n                        });\r\n\r\n                        for (let graph of newPointLotsGraphics) {\r\n                            if (!geometryEngine.intersects(lot.geometry, graph.geometry)) {\r\n                                continue;\r\n                            }\r\n\r\n                            const pointLotIdx = pointLot.clone();\r\n                            pointLotIdx.geometry = graph.geometry;\r\n                            pointLots.push(pointLotIdx);\r\n                        };\r\n                    });\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsArancelToPointLot(pointLots, arancelUrl) {\r\n            const deferred = new Deferred();\r\n            const promises = pointLots.map(pointLot => {\r\n                const queryArancelTask = new QueryTask(arancelUrl);\r\n                const queryArancel = new Query();\r\n                queryArancel.returnGeometry = true;\r\n                queryArancel.outFields = [\"*\"];\r\n                queryArancel.geometry = pointLot.geometry;\r\n                queryArancel.geometryType = \"esriGeometryPoint\";\r\n                return queryArancelTask.execute(queryArancel);\r\n            });\r\n            all(promises)\r\n                .then(arancels => {\r\n                    pointLots.forEach((element, index) => {\r\n                        const arancel = arancels[index].features[0].attributes;\r\n                        pointLots[index].attributes = this.attributeTransfer({\r\n                            objTarget: element.attributes,\r\n                            objBase: arancel,\r\n                            updateOnlyNulls: true\r\n                        });\r\n                        return deferred.resolve(pointLots);\r\n                    });\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateFieldsOfPointLot(pointLotUrl, ubigeo, pointLots) {\r\n            const deferred = new Deferred();\r\n            const PointLotCls = new this.PointLot();\r\n\r\n            const queryPointLotTask = new QueryTask(pointLotUrl);\r\n\r\n            const queryPointLot = new Query();\r\n            queryPointLot.where = `${PointLotCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = PointLotCls.secuen;\r\n            statDef.outStatisticFieldName = `${PointLotCls.secuen}_MAX`;\r\n\r\n            queryPointLot.returnGeometry = false;\r\n            queryPointLot.outStatistics = [statDef];\r\n\r\n            queryPointLotTask.execute(queryPointLot)\r\n                .then(response => {\r\n                    let secuen = response.features[0].attributes[statDef.outStatisticFieldName] + 1\r\n                    for (let i of pointLots) {\r\n                        i.attributes[PointLotCls.secuen] = secuen;\r\n                        i.attributes[PointLotCls.idLote] = `${i.attributes[PointLotCls.zonaUtm]}${ubigeo}${secuen}`;\r\n                        i.attributes[PointLotCls.estadoIns] = this.estadoInsValue;\r\n                        secuen += 1;\r\n                    }\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        generateCodCpu(ranCpu, codVer) {\r\n            return `${ranCpu}-0001-${codVer}`;\r\n        },\r\n\r\n        generateDirMun(tipVia, nomVia, numMun) {\r\n            return `${tipVia} ${nomVia} ${numMun}`;\r\n        },\r\n\r\n        generateDirUrb(tipVia, nomVia, numMun) {\r\n            return `${tipVia} ${nomVia} ${numMun}`;\r\n        },\r\n\r\n        translateFieldsPointLotToLand(pointLots, landUrl, newLandsGraphics) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n            let lands = [];\r\n\r\n            this.getFeatureSchema(landUrl)\r\n                .then(land => {\r\n                    newLandsGraphics.forEach(landGraphic => {\r\n                        for (i = 0; i < pointLots.length; i++) {\r\n                            if (geometryEngine.intersects(landGraphic.geometry, pointLots[i].geometry)) {\r\n                                const landProps = land.clone();\r\n                                landProps.attributes = this.attributeTransfer({\r\n                                    objTarget: land.attributes,\r\n                                    objBase: pointLots[i].attributes,\r\n                                    omitPropsDefault: false\r\n                                });\r\n                                landProps.attributes[LandCls.codPre] = landGraphic.codPre;\r\n                                landProps.attributes[LandCls.codUi] = this.codUiValue;\r\n                                landProps.attributes[LandCls.estado] = this.estadoValue;\r\n                                landProps.attributes[LandCls.coordX] = landGraphic.geometry.x;\r\n                                landProps.attributes[LandCls.coordY] = landGraphic.geometry.y;\r\n                                landProps.attributes[LandCls.codVer] = this.getValueCodVer(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    this.codUiValue\r\n                                );\r\n                                landProps.attributes[LandCls.codCpu] = this.generateCodCpu(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    landProps.attributes[LandCls.codVer]\r\n                                );\r\n                                landProps.attributes[LandCls.dirMun] = this.generateDirMun(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n                                landProps.attributes[LandCls.dirUrb] = this.generateDirUrb(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n                                landProps.geometry = landGraphic.geometry;\r\n                                lands.push(landProps.clone());\r\n                                break;\r\n                            }\r\n                        }\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdMznC(lands, cadastralBlockUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryCadastralBlockTask = new QueryTask(cadastralBlockUrl);\r\n            const queryCadastralBlock = new Query();\r\n            queryCadastralBlock.where = `${LandCls.ubigeo} = '${ubigeo}'`;\r\n            queryCadastralBlock.returnGeometry = true;\r\n            queryCadastralBlock.outFields = [LandCls.idMznC];\r\n            queryCadastralBlock.geometry = lands[0].geometry;\r\n\r\n            queryCadastralBlockTask.execute(queryCadastralBlock)\r\n                .then(response => {\r\n                    lands.forEach(land => {\r\n                        land.attributes[LandCls.idMznC] = response.features[0].attributes[LandCls.idMznC];\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdPred(lands, landUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryLandTask = new QueryTask(landUrl);\r\n            const queryLand = new Query();\r\n            queryLand.returnGeometry = false;\r\n            queryLand.where = `${LandCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = LandCls.idPred;\r\n            statDef.outStatisticFieldName = `${LandCls.idPred}_MAX`;\r\n            queryLand.outStatistics = [statDef];\r\n\r\n            queryLandTask.execute(queryLand)\r\n                .then(function (response) {\r\n                    lands.forEach((land, idx) => {\r\n                        land.attributes[LandCls.idPred] = response.features[0].attributes[statDef.outStatisticFieldName] + idx + 1;\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                }, function (error) {\r\n                    deferred.reject(error);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        getPointLotsOrigin(pointLotUrl, lots) {\r\n            const queryPointLotsOriginTask = new QueryTask(pointLotUrl);\r\n            const queryPointLotsOrigin = new Query();\r\n            queryPointLotsOrigin.returnGeometry = true;\r\n            queryPointLotsOrigin.outFields = [\"*\"];\r\n            queryPointLotsOrigin.geometry = lots.geometry;\r\n            queryPointLotsOrigin.geometryType = \"esriGeometryPolygon\";\r\n            queryPointLotsOrigin.distance = 0.5;\r\n            queryPointLotsOrigin.units = \"meters\";\r\n            return queryPointLotsOriginTask.execute(queryPointLotsOrigin);\r\n        },\r\n\r\n        getLandsOrigin(landUrl, lots) {\r\n            const queryLandsOriginTask = new QueryTask(landUrl);\r\n            const queryLandsOrigin = new Query();\r\n            queryLandsOrigin.returnGeometry = true;\r\n            queryLandsOrigin.outFields = [\"*\"];\r\n            queryLandsOrigin.geometry = lots.geometry;\r\n            queryLandsOrigin.geometryType = \"esriGeometryPolygon\";\r\n            queryLandsOrigin.distance = 0.5;\r\n            queryLandsOrigin.units = \"meters\";\r\n            return queryLandsOriginTask.execute(queryLandsOrigin);\r\n        },\r\n\r\n        getDataOrigin(pointLotUrl, landUrl, lots) {\r\n            // const self = this;\r\n            const deferred = new Deferred();\r\n\r\n            const promises = [\r\n                this.getPointLotsOrigin(pointLotUrl, lots),\r\n                this.getLandsOrigin(landUrl, lots)\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    // self.currentPoinLotsRows = results[0].features;\r\n                    // self.currentLandsRows = results[1].features;\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        setParametersToAddFeatures(url, params) {\r\n            return {\r\n                url: `${url}/addFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToUpdateFeatures(url, params) {\r\n            return {\r\n                url: `${url}/updateFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToDeleteFeatures(url, params) {\r\n            return {\r\n                url: `${url}/deleteFeatures`,\r\n                content: {\r\n                    where: params,\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        sendDataOriginToHistoric(config, currentLotsRows, currentPoinLotsRows, currentLandsRows) {\r\n            const deferred = new Deferred();\r\n            const lotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                config.lotHistoricUrl,\r\n                currentLotsRows\r\n            );\r\n            const pointsLotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                config.pointLotHistoricUrl,\r\n                currentPoinLotsRows\r\n            );\r\n            const landsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                config.landHistoricUrl,\r\n                currentLandsRows\r\n            );\r\n            const promises = [\r\n                esriRequest(lotsHistoricRequestOptions, { usePost: true }),\r\n                esriRequest(pointsLotsHistoricRequestOptions, { usePost: true }),\r\n                esriRequest(landsHistoricRequestOptions, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        deleteDataOrigin(currentLotsRows, currentPoinLotsRows, currentLandsRows, config) {\r\n            const deferred = new Deferred();\r\n\r\n            const objetidLot = currentLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidPointLot = currentPoinLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidLand = currentLandsRows.map(row => row.attributes.OBJECTID);\r\n\r\n            const lotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.lotUrl,\r\n                `OBJECTID IN (${objetidLot.join(\",\")})`,\r\n            );\r\n            const pointsLotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.pointLotUrl,\r\n                `OBJECTID IN (${objetidPointLot.join(\",\")})`,\r\n            );\r\n            const landsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.landUrl,\r\n                `OBJECTID IN (${objetidLand.join(\",\")})`,\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(pointsLotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(landsDeleteRequestOptions, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        addDataNew(lots, pointLots, lands, config) {\r\n            const deferred = new Deferred();\r\n\r\n            lots = Array.isArray(lots) ? lots : [lots]\r\n\r\n            const lotNews = this.setParametersToAddFeatures(\r\n                config.lotUrl,\r\n                lots\r\n            );\r\n\r\n            pointLots = Array.isArray(pointLots) ? pointLots : [pointLots]\r\n\r\n            const pointLotsNews = this.setParametersToAddFeatures(\r\n                config.pointLotUrl,\r\n                pointLots\r\n            );\r\n\r\n            lands = Array.isArray(lands) ? lands : [lands]\r\n\r\n            const landsNews = this.setParametersToAddFeatures(\r\n                config.landUrl,\r\n                lands\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotNews, { usePost: true }),\r\n                esriRequest(pointLotsNews, { usePost: true }),\r\n                esriRequest(landsNews, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateStatusRequests(lands, codRequests, caseRequest, ubigeo, config) {\r\n            console.log(lands)\r\n            const deferred = new Deferred();\r\n            const responseLands = UtilityCase.matchWithReceptionModel(lands)\r\n            let response = {\r\n                id: codRequests,\r\n                results: responseLands,\r\n                idType: parseInt(caseRequest)\r\n            }\r\n            for (let predio of response.results) {\r\n                predio['ubigeo'] = ubigeo;\r\n            }\r\n\r\n            fetch(config.updateStatusApplication, {\r\n                method: 'POST',\r\n                body: JSON.stringify(response),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => deferred.resolve(data))\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkLotsWithinLands(lots, lands) {\r\n            for (let lot of lots) {\r\n                const checkLands = []\r\n                for (let land of lands) {\r\n                    checkLands.push(geometryEngine.intersects(lot.geometry, land.geometry))\r\n                }\r\n                if (checkLands.every(i => i === false)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        },\r\n\r\n    };\r\n\r\n    return UtilityCase;\r\n});"]}