{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/UtilityCase.js"],"names":["define","Deferred","QueryTask","Query","StatisticDefinition","geometryEngine","Point","Message","all","esriRequest","CustomException","UtilityCase","ubigeoFieldName","platformUpdate","estadoInsValue","estadoValue","codUiValue","estadoPartidaValue","tipoResolucionValue","Land","ubigeo","codPre","codUi","estado","coordX","coordY","codVer","codCpu","dirMun","dirUrb","ranCpu","tipVia","nomVia","numMun","idMznC","idPred","tipPred","partida","estadoPartida","piso","PointLot","idLote","secuen","zonaUtm","estadoIns","tipLot","Lot","idLotP","anoCart","fuente","nomPc","nomUser","codLot","lotUrb","Arancel","secEjec","receptionModelRequest","matchWithReceptionModel","object","modelRequests","response","map","land","arrayMatch","forEach","field","attributes","getFeatureSchema","url","geometry","blankFields","deferred","queryTask","query","where","returnGeometry","outFields","num","execute","then","feature","result","features","prop","resolve","catch","reject","err","promise","attributeTransfer","objTarget","objBase","propsUse","propsOmit","updateOnlyNulls","omitPropsDefault","deletePropsDefault","fieldMatch","propsOmitDefault","propsDeleteDefault","includes","length","props1","Object","keys","props2","filter","hasOwnProperty","getValueCodVer","factor","cod_ver_concatenate","toString","slice","cod_ver","split","reverse","join","digit","index","parseInt","reduce","a","b","getBlockFromLot","queryBlock","queryTaskBlock","Error","checkExistLotUrban","block","urlLots","currentLots","LotCls","queryLot","idLotPArray","i","spatialRel","queryTaskLot","lotsUrban","attr","lots","lot","setLots","Set","commonElements","has","checkExistLotUrbanIntoLotsOriginal","lotUrbArray","setLotsUrban","repeatedElements","mensaje","message","type","buttons","label","onClick","hide","ErrorEqualUrbanLotWithinBlock","checkDuplicateLotUrbanResults","elementCount","item","key","translateFieldsBlockToLot","lotsResults","graphic","lotIdx","clone","calculateTipLot","currentLotsRows","row","calculateFieldsOfLot","lotUrl","codRequests","user","queryLotTask","statDefIdLoteP","statisticType","onStatisticField","outStatisticFieldName","statDefRanCpu","outStatistics","point","x","coords","y","spatialReference","wkid","idx","Date","getFullYear","intersects","translateFieldsLotToPointLot","urlPointLots","newPointLotsGraphics","pointLots","pointLotProps","pointLot","graph","pointLotPropsClone","push","translateFieldsArancelToPointLot","arancelUrl","promises","queryArancelTask","queryArancel","geometryType","element","arancel","arancels","calculateFieldsOfPointLot","pointLotUrl","PointLotCls","queryPointLotTask","queryPointLot","statDef","generateCodCpu","generateDirMun","generateDirUrb","translateFieldsPointLotToLand","landUrl","newLandsGraphics","LandCls","lands","landGraphic","LOT_URB","urbanLotNumber","landProps","cpm","resolutionType","resolutionDocument","floor","id","rightOfWay","mediterraneanCoords","calculateIdMznC","cadastralBlockUrl","queryCadastralBlockTask","queryCadastralBlock","calculateIdPred","queryLandTask","queryLand","error","getPointLotsOrigin","queryPointLotsOriginTask","queryPointLotsOrigin","distance","units","getLandsOrigin","queryLandsOriginTask","queryLandsOrigin","getLandsOriginByQuery","cpu","updateRowsGeneric","codRequest","status","getDataOrigin","results","setParametersToAddFeatures","params","content","JSON","stringify","f","handleAs","callbackParamName","setParametersToUpdateFeatures","setParametersToDeleteFeatures","sendDataOriginToHistoric","config","currentPoinLotsRows","currentLandsRows","lotsHistoricRequestOptions","lotHistoricUrl","usePost","pointsLotsHistoricRequestOptions","pointLotHistoricUrl","landsHistoricRequestOptions","landHistoricUrl","deleteDataOrigin","objetidLot","OBJECTID","objetidPointLot","objetidLand","lotsDeleteRequestOptions","pointsLotsDeleteRequestOptions","landsDeleteRequestOptions","updateDataDeactivate","deactivateFeatures","updateDataLotsDeactivate","updateLotFeature","addDataNew","Array","isArray","lotNews","pointLotsNews","landsNews","updateStatusRequests","caseRequest","idLandInactive","responseLands","messageText","idType","predio","fetchUpdateStatus","retry","fetch","updateStatusApplication","method","body","headers","ok","json","errorData","data","checkLotsWithinLands","checkLands","every","checkLandsWithinLot","urlLands","landCls","queryLands","queryTaskLands"],"mappings":"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","file":"UtilityCase.js","sourcesContent":["define([\r\n    \"dojo/Deferred\",\r\n    \"esri/tasks/QueryTask\",\r\n    \"esri/tasks/query\",\r\n    \"esri/tasks/StatisticDefinition\",\r\n    \"esri/geometry/geometryEngine\",\r\n    \"esri/geometry/Point\",\r\n    \"jimu/dijit/Message\",\r\n    \"dojo/promise/all\",\r\n    \"esri/request\",\r\n    \"./CustomException\",\r\n], function (\r\n    Deferred,\r\n    QueryTask,\r\n    Query,\r\n    StatisticDefinition,\r\n    geometryEngine,\r\n    Point,\r\n    Message,\r\n    all,\r\n    esriRequest,\r\n    CustomException\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la subdivisión de lotes\r\n    */\r\n\r\n    // class ErrorEqualUrbanLotWithinBlock extends Error {\r\n    //     constructor(message) {\r\n    //         super(message);\r\n    //     }\r\n    // }\r\n\r\n    const UtilityCase = {\r\n\r\n        ubigeoFieldName: 'UBIGEO',\r\n        platformUpdate: 'PCF',\r\n        estadoInsValue: 1,\r\n        estadoValue: 1,\r\n        codUiValue: 1,\r\n        estadoPartidaValue: 0,\r\n        tipoResolucionValue: \"1\",\r\n\r\n        Land() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.codPre = 'COD_PRE';\r\n            this.codUi = 'COD_UI';\r\n            this.estado = 'ESTADO';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.codVer = 'COD_VER';\r\n            this.codCpu = 'COD_CPU';\r\n            this.dirMun = 'DIR_MUN';\r\n            this.dirUrb = 'DIR_URB';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.tipVia = 'TIP_VIA';\r\n            this.nomVia = 'NOM_VIA';\r\n            this.numMun = 'NUM_MUN';\r\n            this.idMznC = 'ID_MZN_C';\r\n            this.idPred = 'ID_PRED';\r\n            this.tipPred = 'TIP_PRED';\r\n            this.partida = 'PARTIDA';\r\n            this.estadoPartida = 'ESTADO_PARTIDA';\r\n            this.piso = 'PISO';\r\n        },\r\n        PointLot() {\r\n            this.ubigeo = 'UBIGEO';\r\n            this.idLote = 'ID_LOTE'\r\n            this.secuen = 'SECUEN';\r\n            this.coordX = 'COORD_X';\r\n            this.coordY = 'COORD_Y';\r\n            this.zonaUtm = 'ZONA_UTM';\r\n            this.estadoIns = 'ESTADO_INS';\r\n            this.tipLot = 'TIP_LOT';\r\n        },\r\n        Lot() {\r\n            this.idLotP = 'ID_LOTE_P';\r\n            this.ranCpu = 'RAN_CPU';\r\n            this.anoCart = 'ANO_CART';\r\n            this.fuente = 'FUENTE';\r\n            this.nomPc = 'NOM_PC';\r\n            this.nomUser = 'NOM_USER';\r\n            this.codLot = 'COD_LOTE';\r\n            this.lotUrb = 'LOT_URB';\r\n            this.ubigeo = 'UBIGEO';\r\n            this.tipLot = 'TIP_LOT';\r\n            this.estadoIns = 'ESTADO_INS';\r\n        },\r\n        Arancel() {\r\n            this.secEjec = 'SEC_EJEC';\r\n\r\n        },\r\n\r\n        receptionModelRequest() {\r\n            return [\r\n                \"COD_PRE\",\r\n                \"COD_CPU\",\r\n                \"COD_SECT\",\r\n                \"COD_MZN\",\r\n                \"COD_LOTE\",\r\n                \"COD_UU\",\r\n                \"COD_VIA\",\r\n                \"TIPO_UU\",\r\n                \"NOM_UU\",\r\n                \"NOM_REF\",\r\n                \"MZN_URB\",\r\n                \"LOT_URB\",\r\n                \"TIP_VIA\",\r\n                \"NOM_VIA\",\r\n                \"CUADRA\",\r\n                \"LADO\",\r\n                \"DIR_MUN\",\r\n                \"DIR_URB\",\r\n                \"COORD_X\",\r\n                \"COORD_Y\",\r\n                \"RAN_CPU\",\r\n                \"COD_UI\",\r\n                \"COD_VER\",\r\n                \"ID_LOTE_P\",\r\n                \"ID\",\r\n                'id_lote_puerta',\r\n                'longitude_puerta',\r\n                'latitude_puerta',\r\n                'lote_urbano_puerta',\r\n                'manzana_urbana_puerta',\r\n            ]\r\n        },\r\n\r\n        matchWithReceptionModel(object) {\r\n            const modelRequests = this.receptionModelRequest();\r\n            const response = object.map((land) => {\r\n                const arrayMatch = {};\r\n                modelRequests.forEach((field) => {\r\n                    arrayMatch[field] = land.attributes[field];\r\n                })\r\n                return arrayMatch;\r\n            })\r\n            return response;\r\n        },\r\n\r\n        getFeatureSchema(url, geometry = true, blankFields = true) {\r\n            const deferred = new Deferred();\r\n            const queryTask = new QueryTask(url);\r\n            const query = new Query();\r\n            query.where = \"1=1\";\r\n            query.returnGeometry = geometry;\r\n            query.outFields = [\"*\"];\r\n            query.num = 1;\r\n            queryTask.execute(query)\r\n                .then(result => {\r\n                    const feature = result.features[0];\r\n                    if (blankFields) {\r\n                        for (let prop in feature.attributes) {\r\n                            feature.attributes[prop] = null;\r\n                        }\r\n                    }\r\n                    return deferred.resolve(feature);\r\n                })\r\n                .catch(err => {\r\n                    deferred.reject(err);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        attributeTransfer({ objTarget, objBase, propsUse = [], propsOmit = [], updateOnlyNulls = false, omitPropsDefault = true, deletePropsDefault = true }) {\r\n            let fieldMatch = []\r\n            const propsOmitDefault = [\r\n                'FUENTE',\r\n                'NOM_PC',\r\n                'NOM_USER',\r\n                'ANO_CART'\r\n            ]\r\n            const propsDeleteDefault = [\r\n                'OBJECTID',\r\n                'GlobalID',\r\n                'created_date',\r\n                'created_user',\r\n                'last_edited_date',\r\n                'last_edited_user',\r\n                'Shape.STArea()',\r\n                'Shape.STLength()',\r\n            ];\r\n\r\n            if (deletePropsDefault) {\r\n                for (let prop in objTarget) {\r\n                    if (propsDeleteDefault.includes(prop)) {\r\n                        delete objTarget[prop];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (propsUse.length > 0) {\r\n                fieldMatch = propsUse\r\n            } else {\r\n                const props1 = Object.keys(objTarget);\r\n                const props2 = Object.keys(objBase);\r\n                fieldMatch = props1.filter(prop => props2.includes(prop));\r\n            }\r\n            // retirar los campos omitidos\r\n            if (propsOmit.length > 0) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmit.includes(prop));\r\n            }\r\n\r\n            // retirar los campos omitidos por defecto de objBase\r\n            if (omitPropsDefault) {\r\n                fieldMatch = fieldMatch.filter(prop => !propsOmitDefault.includes(prop));\r\n            }\r\n\r\n            fieldMatch.forEach(prop => {\r\n                if (objBase.hasOwnProperty(prop)) {\r\n                    if (updateOnlyNulls) {\r\n                        if (objTarget[prop] === null) {\r\n                            objTarget[prop] = objBase[prop];\r\n                        }\r\n                    } else {\r\n                        objTarget[prop] = objBase[prop];\r\n                    }\r\n                }\r\n            });\r\n\r\n            return objTarget;\r\n        },\r\n\r\n        getValueCodVer(ranCpu, codUi) {\r\n            const factor = [2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7]\r\n            // Obteniendo código concatenado\r\n            const cod_ver_concatenate = ranCpu.toString() + (\"0000\" + codUi.toString()).slice(-4);\r\n\r\n            // Reversa de código concatenado\r\n            const cod_ver = cod_ver_concatenate.split('').reverse().join('');\r\n\r\n            // Aplicando fórmula\r\n            let response = 11 - (cod_ver.split('').map((digit, index) =>\r\n                parseInt(digit) * factor[index])\r\n                .reduce((a, b) => a + b, 0) % 11);\r\n\r\n            if (response > 9) {\r\n                response = 11 - response;\r\n            }\r\n\r\n            return response\r\n        },\r\n\r\n        getBlockFromLot(geometry, url) {\r\n            const deferred = new Deferred();\r\n\r\n            const queryBlock = new Query();\r\n            queryBlock.geometry = geometry;\r\n            queryBlock.outFields = ['*'];\r\n            queryBlock.returnGeometry = true;\r\n            const queryTaskBlock = new QueryTask(url);\r\n            queryTaskBlock.execute(queryBlock)\r\n                .then(response => {\r\n                    if (response.features.length === 0) {\r\n                        return deferred.reject(new Error(\"No se encontraron manzanas\"));\r\n                    }\r\n                    return deferred.resolve(response.features[0]);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkExistLotUrban(attributes, block, urlLots, currentLots, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            const queryLot = new Query();\r\n            const idLotPArray = currentLots.map(i => i.attributes[LotCls.idLotP])\r\n            queryLot.where = `${LotCls.idLotP} not in (${idLotPArray.join(\",\")}) and ${LotCls.ubigeo} = '${ubigeo}'`;\r\n            queryLot.geometry = block.geometry\r\n            queryLot.spatialRel = \"within\";\r\n\r\n            queryLot.outFields = [LotCls.lotUrb];\r\n            const queryTaskLot = new QueryTask(urlLots);\r\n            const lotsUrban = attributes.map(attr => attr.lotUrb);\r\n            queryTaskLot.execute(queryLot)\r\n                .then(response => {\r\n                    const lots = response.features.map(lot => lot.attributes[LotCls.lotUrb]);\r\n                    const setLots = new Set(lots);\r\n                    const commonElements = lotsUrban.filter(lot => setLots.has(lot));\r\n                    // const exist = lotsUrban.some(lot => lots.includes(lot));\r\n                    if (commonElements.length > 0) {\r\n                        return deferred.reject(new Error(`La solicitud no se puede realizar porque los lotes resultantes de la subdivisión tienen denominaciones de lotes urbanos que ya existen en la manzana actual: ${commonElements}`));\r\n                    }\r\n                    return deferred.resolve(block);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkExistLotUrbanIntoLotsOriginal(attributes, currentLots, block) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            const lotUrbArray = currentLots.map(i => i.attributes[LotCls.lotUrb])\r\n            const lotsUrban = attributes.map(attr => attr.lotUrb);\r\n            const setLotsUrban = new Set(lotsUrban);\r\n            const repeatedElements = lotUrbArray.filter(lot => setLotsUrban.has(lot));\r\n            // const exist = lotsUrban.some(lot => lotUrbArray.includes(lot));\r\n            if (repeatedElements.length > 0) {\r\n                const mensaje = new Message({\r\n                    message: `Uno de los lotes resultantes tiene la misma denominación de un lote urbano original: ${repeatedElements}.\\n¿Desea continuar con el proceso?`,\r\n                    type: \"question\",\r\n                    buttons: [{\r\n                        label: \"Sí\",\r\n                        onClick: function () {\r\n                            deferred.resolve(block);\r\n                            mensaje.hide();\r\n                        }\r\n                    }, {\r\n                        label: \"No\",\r\n                        onClick: function () {\r\n                            deferred.reject(new CustomException.ErrorEqualUrbanLotWithinBlock());\r\n                            mensaje.hide();\r\n                        }\r\n                    }]\r\n                });\r\n            } else {\r\n                return deferred.resolve(block);\r\n            }\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkDuplicateLotUrbanResults(lotUrbArray) {\r\n            const elementCount = {};\r\n            lotUrbArray.forEach(item => {\r\n                if (elementCount[item]) {\r\n                    elementCount[item]++;\r\n                } else {\r\n                    elementCount[item] = 1;\r\n                }\r\n            });\r\n            const repeatedElements = Object.keys(elementCount).filter(key => elementCount[key] > 1);\r\n            return repeatedElements\r\n        },\r\n\r\n        translateFieldsBlockToLot(url, block, lotsResults) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            this.getFeatureSchema(url)\r\n                .then(lot => {\r\n                    const lots = lotsResults.map((graphic) => {\r\n                        const lotIdx = lot.clone();\r\n                        lotIdx.attributes = this.attributeTransfer({\r\n                            objTarget: lotIdx.attributes,\r\n                            objBase: block.attributes,\r\n                        });\r\n                        lotIdx.geometry = graphic.geometry;\r\n                        lotIdx.attributes[LotCls.tipLot] = graphic.attributes.tipLot;\r\n                        return lotIdx;\r\n                    });\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateTipLot(currentLotsRows) {\r\n            const LotCls = new this.Lot();\r\n            let tipLot = currentLotsRows.map(row => { return row.attributes[LotCls.tipLot] })\r\n            tipLot = [...new Set(tipLot)] == [2] ? '2' : '1'\r\n            return tipLot\r\n        },\r\n\r\n        calculateFieldsOfLot(lotUrl, lots, ubigeo, codRequests, user, attributes) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n\r\n            const queryLotTask = new QueryTask(lotUrl);\r\n\r\n            const queryLot = new Query();\r\n\r\n            queryLot.where = `${this.ubigeoFieldName} = '${ubigeo}'`;\r\n\r\n            const statDefIdLoteP = new StatisticDefinition();\r\n            statDefIdLoteP.statisticType = \"max\";\r\n            statDefIdLoteP.onStatisticField = LotCls.idLotP;\r\n            statDefIdLoteP.outStatisticFieldName = `${LotCls.idLotP}_MAX`;\r\n\r\n            const statDefRanCpu = new StatisticDefinition();\r\n            statDefRanCpu.statisticType = \"max\";\r\n            statDefRanCpu.onStatisticField = LotCls.ranCpu;\r\n            statDefRanCpu.outStatisticFieldName = `${LotCls.ranCpu}_MAX`;\r\n\r\n            queryLot.returnGeometry = false;\r\n            queryLot.outStatistics = [statDefIdLoteP, statDefRanCpu];\r\n\r\n            attributes.forEach((attr) => {\r\n                const point = new Point({\r\n                    x: attr.coords[0],\r\n                    y: attr.coords[1],\r\n                    spatialReference: { wkid: 4326 }\r\n                });\r\n                attr.geometry = point;\r\n            });\r\n\r\n            queryLotTask.execute(queryLot)\r\n                .then(response => {\r\n                    for (idx = 0; idx < lots.length; idx++) {\r\n                        // lots.forEach((lot, idx) => {\r\n                        lots[idx].attributes[LotCls.idLotP] = response.features[0].attributes[statDefIdLoteP.outStatisticFieldName] + idx + 1;\r\n                        lots[idx].attributes[LotCls.ranCpu] = response.features[0].attributes[statDefRanCpu.outStatisticFieldName] + idx + 1;\r\n                        lots[idx].attributes[LotCls.anoCart] = new Date().getFullYear();\r\n                        lots[idx].attributes[LotCls.fuente] = codRequests;\r\n                        lots[idx].attributes[LotCls.nomPc] = this.platformUpdate;\r\n                        lots[idx].attributes[LotCls.nomUser] = user;\r\n                        // lot.attributes[LotCls.tipLot] = tipLot;\r\n                        lots[idx].attributes[LotCls.estadoIns] = this.estadoInsValue;\r\n\r\n                        for (let attr of attributes) {\r\n                            if (geometryEngine.intersects(lots[idx].geometry, attr.geometry)) {\r\n                                lots[idx].attributes[LotCls.codLot] = attr.codLot;\r\n                                lots[idx].attributes[LotCls.lotUrb] = attr.lotUrb;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // lot.attributes[LotCls.codLot] = attributes[idx].codLot;\r\n                        // lot.attributes[LotCls.lotUrb] = attributes[idx].lotUrb;\r\n                    };\r\n                    return deferred.resolve(lots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsLotToPointLot(lots, urlPointLots, newPointLotsGraphics) {\r\n            const deferred = new Deferred();\r\n            const pointLots = [];\r\n\r\n            this.getFeatureSchema(urlPointLots)\r\n                .then(pointLot => {\r\n                    lots.forEach(lot => {\r\n                        const pointLotProps = pointLot.clone();\r\n                        pointLotProps.attributes = this.attributeTransfer({\r\n                            objTarget: pointLotProps.attributes,\r\n                            objBase: lot.attributes,\r\n                            omitPropsDefault: false,\r\n                            deletePropsDefault: true\r\n                        });\r\n\r\n                        for (let graph of newPointLotsGraphics) {\r\n                            if (!geometryEngine.intersects(lot.geometry, graph.geometry)) {\r\n                                continue;\r\n                            }\r\n\r\n                            const pointLotPropsClone = pointLotProps.clone();\r\n                            pointLotPropsClone.geometry = graph.geometry;\r\n                            pointLots.push(pointLotPropsClone);\r\n                        };\r\n                    });\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        translateFieldsArancelToPointLot(pointLots, arancelUrl) {\r\n            const deferred = new Deferred();\r\n            const LotCls = new this.Lot();\r\n            const promises = pointLots.map(pointLot => {\r\n                const queryArancelTask = new QueryTask(arancelUrl);\r\n                const queryArancel = new Query();\r\n                queryArancel.returnGeometry = true;\r\n                queryArancel.outFields = [\"*\"];\r\n                queryArancel.geometry = pointLot.geometry;\r\n                queryArancel.geometryType = \"esriGeometryPoint\";\r\n                return queryArancelTask.execute(queryArancel);\r\n            });\r\n            all(promises)\r\n                .then(arancels => {\r\n                    pointLots.forEach((element, index) => {\r\n                        if (element.attributes[LotCls.tipLot] !== 2) {\r\n\r\n                            const arancel = arancels[index].features[0].attributes;\r\n                            pointLots[index].attributes = this.attributeTransfer({\r\n                                objTarget: element.attributes,\r\n                                objBase: arancel,\r\n                                updateOnlyNulls: true\r\n                            });\r\n                        }\r\n                    });\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateFieldsOfPointLot(pointLotUrl, ubigeo, pointLots) {\r\n            const deferred = new Deferred();\r\n            const PointLotCls = new this.PointLot();\r\n\r\n            const queryPointLotTask = new QueryTask(pointLotUrl);\r\n\r\n            const queryPointLot = new Query();\r\n            queryPointLot.where = `${PointLotCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = PointLotCls.secuen;\r\n            statDef.outStatisticFieldName = `${PointLotCls.secuen}_MAX`;\r\n\r\n            queryPointLot.returnGeometry = false;\r\n            queryPointLot.outStatistics = [statDef];\r\n\r\n            queryPointLotTask.execute(queryPointLot)\r\n                .then(response => {\r\n                    let secuen = response.features[0].attributes[statDef.outStatisticFieldName] + 1\r\n                    for (let i of pointLots) {\r\n                        i.attributes[PointLotCls.secuen] = secuen;\r\n                        i.attributes[PointLotCls.idLote] = `${i.attributes[PointLotCls.zonaUtm]}${ubigeo}${secuen}`;\r\n                        i.attributes[PointLotCls.estadoIns] = this.estadoInsValue;\r\n                        secuen += 1;\r\n                    }\r\n                    return deferred.resolve(pointLots);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        generateCodCpu(ranCpu, codVer, codUi = 1) {\r\n            codUi = (\"0000\" + codUi.toString()).slice(-4);\r\n            return `${ranCpu}-${codUi}-${codVer}`;\r\n        },\r\n\r\n        generateDirMun(tipVia, nomVia, numMun) {\r\n            return `${tipVia || ''} ${nomVia || ''} ${numMun || ''}`;\r\n        },\r\n\r\n        generateDirUrb(tipVia, nomVia, numMun) {\r\n            return `${tipVia || ''} ${nomVia || ''} ${numMun || ''}`;\r\n        },\r\n\r\n        translateFieldsPointLotToLand(pointLots, landUrl, newLandsGraphics, codUiValue = null) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n            let lands = [];\r\n\r\n            this.getFeatureSchema(landUrl)\r\n                .then(land => {\r\n                    newLandsGraphics.forEach(landGraphic => {\r\n                        const attributes = landGraphic.attributes;\r\n\r\n                        for (i = 0; i < pointLots.length; i++) {\r\n                            // Validate location\r\n                            if (geometryEngine.intersects(landGraphic.geometry, pointLots[i].geometry)) {\r\n                                // Validate attributes lotUrb\r\n                                if (pointLots[i].attributes.LOT_URB != attributes.urbanLotNumber) {\r\n                                    throw new Error(`La solicitud no se puede realizar porque el predio del lote ${attributes.urbanLotNumber} se asignó al lote ${pointLots[i].attributes.LOT_URB}`);\r\n                                }\r\n                                const landProps = land.clone();\r\n                                landProps.attributes = this.attributeTransfer({\r\n                                    objTarget: landProps.attributes,\r\n                                    objBase: pointLots[i].attributes,\r\n                                    omitPropsDefault: false\r\n                                });\r\n                                landProps.attributes[LandCls.codPre] = attributes.cpm;\r\n                                landProps.attributes[LandCls.codUi] = codUiValue || this.codUiValue;\r\n                                landProps.attributes[LandCls.estado] = this.estadoValue;\r\n                                landProps.attributes[LandCls.coordX] = landGraphic.geometry.x;\r\n                                landProps.attributes[LandCls.coordY] = landGraphic.geometry.y;\r\n                                landProps.attributes[LandCls.codVer] = this.getValueCodVer(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    codUiValue || this.codUiValue\r\n                                );\r\n                                landProps.attributes[LandCls.codCpu] = this.generateCodCpu(\r\n                                    landProps.attributes[LandCls.ranCpu],\r\n                                    landProps.attributes[LandCls.codVer],\r\n                                    codUiValue || this.codUiValue\r\n                                );\r\n\r\n                                landProps.geometry = landGraphic.geometry;\r\n                                if (attributes.resolutionType === this.tipoResolucionValue) {\r\n                                    landProps.attributes[LandCls.partida] = attributes.resolutionDocument\r\n                                    landProps.attributes[LandCls.estadoPartida] = this.estadoPartidaValue;\r\n                                }\r\n                                // if (attributes.floor){\r\n                                landProps.attributes[LandCls.piso] = attributes.floor;\r\n                                // }\r\n                                landProps.attributes['ID'] = parseInt(attributes.id.split('_')[1]);\r\n\r\n                                if (attributes.tipLot === 2) {\r\n                                    let rightOfWay = attributes.mediterraneanCoords;\r\n                                    if (attributes.mediterraneanCoords.attributes.tipLot) {\r\n                                        for (let pointLot of pointLots) {\r\n                                            if (geometryEngine.intersects(rightOfWay.geometry, pointLot.geometry)) {\r\n                                                rightOfWay = pointLot;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    landProps.attributes['ID_ARANC'] = rightOfWay.attributes['ID_ARANC'];\r\n                                    landProps.attributes['COD_VIA'] = rightOfWay.attributes['COD_VIA'];\r\n                                    landProps.attributes['TIP_VIA'] = rightOfWay.attributes['TIP_VIA'];\r\n                                    landProps.attributes['NOM_VIA'] = rightOfWay.attributes['NOM_VIA'];\r\n                                    landProps.attributes['CUADRA'] = rightOfWay.attributes['CUADRA'];\r\n                                    landProps.attributes['LADO'] = rightOfWay.attributes['LADO'];\r\n                                    landProps.attributes['VAL_ACT'] = rightOfWay.attributes['VAL_ACT'];\r\n                                    landProps.attributes['id_lote_sirv'] = rightOfWay.attributes['ID_LOTE'];\r\n\r\n                                    landProps.attributes['id_lote_puerta'] = rightOfWay.attributes['ID_LOTE'];\r\n                                    landProps.attributes['longitude_puerta'] = rightOfWay.geometry.x;\r\n                                    landProps.attributes['latitude_puerta'] = rightOfWay.geometry.y;\r\n                                    landProps.attributes['lote_urbano_puerta'] = rightOfWay.attributes['LOT_URB'];\r\n                                    landProps.attributes['manzana_urbana_puerta'] = rightOfWay.attributes['MZN_URB'];\r\n\r\n                                }\r\n                                landProps.attributes[LandCls.dirMun] = this.generateDirMun(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n                                landProps.attributes[LandCls.dirUrb] = this.generateDirUrb(\r\n                                    landProps.attributes[LandCls.tipVia],\r\n                                    landProps.attributes[LandCls.nomVia],\r\n                                    landProps.attributes[LandCls.numMun]\r\n                                );\r\n\r\n                                if (codUiValue) {\r\n                                    codUiValue += 1;\r\n                                }\r\n\r\n                                lands.push(landProps.clone());\r\n\r\n\r\n\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdMznC(lands, cadastralBlockUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryCadastralBlockTask = new QueryTask(cadastralBlockUrl);\r\n            const queryCadastralBlock = new Query();\r\n            queryCadastralBlock.where = `${LandCls.ubigeo} = '${ubigeo}'`;\r\n            queryCadastralBlock.returnGeometry = true;\r\n            queryCadastralBlock.outFields = [LandCls.idMznC];\r\n            queryCadastralBlock.geometry = lands[0].geometry;\r\n\r\n            queryCadastralBlockTask.execute(queryCadastralBlock)\r\n                .then(response => {\r\n                    lands.forEach(land => {\r\n                        land.attributes[LandCls.idMznC] = response.features[0].attributes[LandCls.idMznC];\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        calculateIdPred(lands, landUrl, ubigeo) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryLandTask = new QueryTask(landUrl);\r\n            const queryLand = new Query();\r\n            queryLand.returnGeometry = false;\r\n            queryLand.where = `${LandCls.ubigeo} = '${ubigeo}'`\r\n            const statDef = new StatisticDefinition();\r\n            statDef.statisticType = \"max\";\r\n            statDef.onStatisticField = LandCls.idPred;\r\n            statDef.outStatisticFieldName = `${LandCls.idPred}_MAX`;\r\n            queryLand.outStatistics = [statDef];\r\n\r\n            queryLandTask.execute(queryLand)\r\n                .then(function (response) {\r\n                    lands.forEach((land, idx) => {\r\n                        land.attributes[LandCls.idPred] = response.features[0].attributes[statDef.outStatisticFieldName] + idx + 1;\r\n                    });\r\n                    return deferred.resolve(lands);\r\n                }, function (error) {\r\n                    deferred.reject(error);\r\n                });\r\n            return deferred.promise;\r\n        },\r\n\r\n        getPointLotsOrigin(pointLotUrl, lots) {\r\n            const queryPointLotsOriginTask = new QueryTask(pointLotUrl);\r\n            const queryPointLotsOrigin = new Query();\r\n            queryPointLotsOrigin.returnGeometry = true;\r\n            queryPointLotsOrigin.outFields = [\"*\"];\r\n            queryPointLotsOrigin.geometry = lots.geometry;\r\n            queryPointLotsOrigin.geometryType = \"esriGeometryPolygon\";\r\n            queryPointLotsOrigin.distance = 0.5;\r\n            queryPointLotsOrigin.units = \"meters\";\r\n            return queryPointLotsOriginTask.execute(queryPointLotsOrigin);\r\n        },\r\n\r\n        getLandsOrigin(landUrl, lots) {\r\n            const queryLandsOriginTask = new QueryTask(landUrl);\r\n            const queryLandsOrigin = new Query();\r\n            queryLandsOrigin.returnGeometry = true;\r\n            queryLandsOrigin.outFields = [\"*\"];\r\n            queryLandsOrigin.geometry = lots.geometry;\r\n            queryLandsOrigin.geometryType = \"esriGeometryPolygon\";\r\n            queryLandsOrigin.distance = 0.5;\r\n            queryLandsOrigin.units = \"meters\";\r\n            return queryLandsOriginTask.execute(queryLandsOrigin);\r\n        },\r\n\r\n        getLandsOriginByQuery(landUrl, cpu) {\r\n            const deferred = new Deferred();\r\n            const LandCls = new this.Land();\r\n\r\n            const queryLandsOriginTask = new QueryTask(landUrl);\r\n            const queryLandsOrigin = new Query();\r\n            queryLandsOrigin.returnGeometry = true;\r\n            queryLandsOrigin.outFields = [\"*\"];\r\n            queryLandsOrigin.where = `${LandCls.codCpu} = '${cpu}'`;\r\n            queryLandsOriginTask.execute(queryLandsOrigin)\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateRowsGeneric(features, codRequest, user, status = 0) {\r\n            const LandCls = new this.Land();\r\n            const LotCls = new this.Lot();\r\n            features.forEach(feature => {\r\n                feature.attributes[LandCls.estado] = status;\r\n                feature.attributes[LotCls.fuente] = codRequest;\r\n                feature.attributes[LotCls.nomUser] = user;\r\n                feature.attributes[LotCls.nomPc] = this.platformUpdate;\r\n                feature.attributes[LotCls.anoCart] = new Date().getFullYear();\r\n            });\r\n            return features;\r\n        },\r\n\r\n        getDataOrigin(pointLotUrl, landUrl, lots) {\r\n            // const self = this;\r\n            const deferred = new Deferred();\r\n\r\n            const promises = [\r\n                this.getPointLotsOrigin(pointLotUrl, lots),\r\n                this.getLandsOrigin(landUrl, lots)\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    // self.currentPoinLotsRows = results[0].features;\r\n                    // self.currentLandsRows = results[1].features;\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        setParametersToAddFeatures(url, params) {\r\n            return {\r\n                url: `${url}/addFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToUpdateFeatures(url, params) {\r\n            return {\r\n                url: `${url}/updateFeatures`,\r\n                content: {\r\n                    features: JSON.stringify(params),\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n        setParametersToDeleteFeatures(url, params) {\r\n            return {\r\n                url: `${url}/deleteFeatures`,\r\n                content: {\r\n                    where: params,\r\n                    f: \"json\"\r\n                },\r\n                handleAs: \"json\",\r\n                callbackParamName: \"callback\"\r\n            };\r\n        },\r\n\r\n\r\n        sendDataOriginToHistoric(config, currentLotsRows, currentPoinLotsRows, currentLandsRows) {\r\n            const deferred = new Deferred();\r\n            const promises = [];\r\n\r\n            if (currentLotsRows) {\r\n                const lotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.lotHistoricUrl,\r\n                    currentLotsRows\r\n                );\r\n                promises.push(esriRequest(lotsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            if (currentPoinLotsRows) {\r\n                const pointsLotsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.pointLotHistoricUrl,\r\n                    currentPoinLotsRows\r\n                );\r\n                promises.push(esriRequest(pointsLotsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            if (currentLandsRows) {\r\n                const landsHistoricRequestOptions = this.setParametersToAddFeatures(\r\n                    config.landHistoricUrl,\r\n                    currentLandsRows\r\n                );\r\n                promises.push(esriRequest(landsHistoricRequestOptions, { usePost: true }));\r\n            }\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        deleteDataOrigin(currentLotsRows, currentPoinLotsRows, currentLandsRows, config) {\r\n            const deferred = new Deferred();\r\n\r\n            const objetidLot = currentLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidPointLot = currentPoinLotsRows.map(row => row.attributes.OBJECTID);\r\n            const objetidLand = currentLandsRows.map(row => row.attributes.OBJECTID);\r\n\r\n            const lotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.lotUrl,\r\n                `OBJECTID IN (${objetidLot.join(\",\")})`,\r\n            );\r\n            const pointsLotsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.pointLotUrl,\r\n                `OBJECTID IN (${objetidPointLot.join(\",\")})`,\r\n            );\r\n            const landsDeleteRequestOptions = this.setParametersToDeleteFeatures(\r\n                config.landUrl,\r\n                `OBJECTID IN (${objetidLand.join(\",\")})`,\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(pointsLotsDeleteRequestOptions, { usePost: true }),\r\n                esriRequest(landsDeleteRequestOptions, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateDataDeactivate(lands, config) {\r\n            const deferred = new Deferred();\r\n            const deactivateFeatures = this.setParametersToUpdateFeatures(\r\n                config.landUrl,\r\n                lands\r\n            )\r\n\r\n            esriRequest(deactivateFeatures, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        updateDataLotsDeactivate(lots, config) {\r\n            const deferred = new Deferred();\r\n            const updateLotFeature = this.setParametersToUpdateFeatures(\r\n                config.lotUrl,\r\n                lots\r\n            )\r\n\r\n            esriRequest(updateLotFeature, { usePost: true })\r\n                .then(result => {\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        addDataNew(lots, pointLots, lands, config) {\r\n            const deferred = new Deferred();\r\n\r\n            lots = Array.isArray(lots) ? lots : [lots]\r\n\r\n            const lotNews = this.setParametersToAddFeatures(\r\n                config.lotUrl,\r\n                lots\r\n            );\r\n\r\n            pointLots = Array.isArray(pointLots) ? pointLots : [pointLots]\r\n\r\n            const pointLotsNews = this.setParametersToAddFeatures(\r\n                config.pointLotUrl,\r\n                pointLots\r\n            );\r\n\r\n            lands = Array.isArray(lands) ? lands : [lands]\r\n\r\n            const landsNews = this.setParametersToAddFeatures(\r\n                config.landUrl,\r\n                lands\r\n            );\r\n\r\n            const promises = [\r\n                esriRequest(lotNews, { usePost: true }),\r\n                esriRequest(pointLotsNews, { usePost: true }),\r\n                esriRequest(landsNews, { usePost: true })\r\n            ]\r\n\r\n            all(promises)\r\n                .then(results => {\r\n                    return deferred.resolve(results);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n        // updateStatusRequests(lands, codRequests, caseRequest, ubigeo, config, idLandInactive = []) {\r\n        //     const deferred = new Deferred();\r\n        //     const responseLands = UtilityCase.matchWithReceptionModel(lands)\r\n        //     const messageText = `Se actualizó la cartografía, pero no se pudo actualizar el estado de la solicitud. Por favor, contacte al administrador de la plataforma.`;\r\n\r\n        //     const response = {\r\n        //         id: codRequests,\r\n        //         results: responseLands,\r\n        //         idType: parseInt(caseRequest),\r\n        //         idLandInactive: idLandInactive\r\n        //     }\r\n        //     for (let predio of response.results) {\r\n        //         predio['ubigeo'] = ubigeo;\r\n        //     }\r\n\r\n        //     fetch(config.updateStatusApplication, {\r\n        //         method: 'POST',\r\n        //         body: JSON.stringify(response),\r\n        //         headers: {\r\n        //             'Content-Type': 'application/json'\r\n        //         }\r\n        //     })\r\n        //         .then(response => {\r\n        //             if (!response.ok) {\r\n        //                 return response.json()\r\n        //                     .then(errorData => {\r\n        //                         throw new Error(`${messageText}.\\nError: ${errorData.error}`);\r\n        //                     })\r\n        //                     .catch(() => {\r\n        //                         throw new Error(messageText);\r\n        //                     });\r\n        //             }\r\n        //             return response.json();\r\n        //         })\r\n        //         .then(data => deferred.resolve(data))\r\n        //         .catch(err => deferred.reject(err));\r\n        //     return deferred.promise;\r\n        // },\r\n\r\n        updateStatusRequests(lands, codRequests, caseRequest, ubigeo, config, idLandInactive = []) {\r\n            const deferred = new Deferred();\r\n            const responseLands = UtilityCase.matchWithReceptionModel(lands)\r\n            const messageText = `Se actualizó la cartografía, pero no se pudo actualizar el estado de la solicitud. Por favor, contacte al administrador de la plataforma.`;\r\n\r\n            const response = {\r\n                id: codRequests,\r\n                results: responseLands,\r\n                idType: parseInt(caseRequest),\r\n                idLandInactive: idLandInactive\r\n            }\r\n            for (let predio of response.results) {\r\n                predio['ubigeo'] = ubigeo;\r\n            }\r\n\r\n            const fetchUpdateStatus = (retry = false) => {\r\n                fetch(config.updateStatusApplication, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(response),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                    .then(response => {\r\n                        if (!response.ok) {\r\n                            return response.json()\r\n                                .then(errorData => {\r\n                                    throw new Error(`${messageText}.\\nError: ${errorData.error}`);\r\n                                })\r\n                                .catch(() => {\r\n                                    throw new Error(messageText);\r\n                                });\r\n                        }\r\n                        return response.json();\r\n                    })\r\n                    .then(data => deferred.resolve(data))\r\n                    .catch(err => {\r\n                        if (!retry) {\r\n                            // Reintentar una vez más\r\n                            fetchUpdateStatus(true);\r\n                        } else {\r\n                            deferred.reject(err);\r\n                        }\r\n                    });\r\n            };\r\n\r\n            // Iniciar el primer intento de fetch\r\n            fetchUpdateStatus();\r\n            return deferred.promise;\r\n        },\r\n\r\n        checkLotsWithinLands(lots, lands) {\r\n            for (let lot of lots) {\r\n                const checkLands = []\r\n                for (let land of lands) {\r\n                    checkLands.push(geometryEngine.intersects(lot.geometry, land.geometry))\r\n                }\r\n                if (checkLands.every(i => i === false)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        },\r\n\r\n        checkLandsWithinLot(lot, urlLands) {\r\n            const deferred = new Deferred();\r\n            const landCls = new this.Land();\r\n            const queryLands = new Query();\r\n            queryLands.geometry = lot.geometry;\r\n            queryLands.distance = 0.5;\r\n            queryLands.units = \"meters\";\r\n            queryLands.where = `${landCls.estado} = 1 `;\r\n            const queryTaskLands = new QueryTask(urlLands);\r\n            queryTaskLands.execute(queryLands)\r\n                .then(response => {\r\n                    const result = response.features.length > 0 ? 1 : 0;\r\n                    return deferred.resolve(result);\r\n                })\r\n                .catch(err => deferred.reject(err));\r\n            return deferred.promise;\r\n        },\r\n\r\n    };\r\n\r\n    return UtilityCase;\r\n});"]}