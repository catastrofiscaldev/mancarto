{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/Acumulation.js"],"names":["define","UtilityCase","Acumulation","codRequests","currentLotsRows","currentPoinLotsRows","currentLandsRows","newPointLotsGraphics","newLandsGraphics","attributes","pointLotUrl","landUrl","lotUrl","arancelUrl","blockUrl","lotGraphic","cadastralBlockUrl","ubigeo","user","config","caseRequest","lands","pointLots","lots","queryBlock","queryLots","idLandInactive","executeAcumulation","getBlockFromLot","geometry","then","checkExistLotUrban","block","checkExistLotUrbanIntoLotsOriginal","translateFieldsBlockToLot","calculateFieldsOfLot","translateFieldsLotToPointLot","translateFieldsArancelToPointLot","calculateFieldsOfPointLot","translateFieldsPointLotToLand","calculateIdMznC","calculateIdPred","getDataOrigin","results","features","map","i","COD_CPU","sendDataOriginToHistoric","deleteDataOrigin","addDataNew","updateStatusRequests","catch","err"],"mappings":"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","file":"Acumulation.js","sourcesContent":["define([\r\n    \"./UtilityCase\",\r\n], function (\r\n    UtilityCase,\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la acumulaciÃ³n de lotes\r\n    */\r\n    const Acumulation = {\r\n\r\n        codRequests: null, // @param\r\n        // currentLots: null, // @param\r\n        currentLotsRows: null,\r\n        currentPoinLotsRows: null,\r\n        currentLandsRows: null,\r\n        // newPointLots: null, // @param\r\n        newPointLotsGraphics: null, // @param\r\n        newLandsGraphics: null, // @params: nuevos predios como graficos\r\n        attributes: null, // @param\r\n        pointLotUrl: null, // @param\r\n        landUrl: null, // @param\r\n        lotUrl: null, // @param\r\n        arancelUrl: null, // @param\r\n        blockUrl: null, // @param\r\n        lotGraphic: null, // @param []: lotes resultantes\r\n        cadastralBlockUrl: null, // @param\r\n        ubigeo: null, // @param\r\n        user: null, // @param\r\n        // geometryLand: null, // @param []: coodernadas x,y de los predios resultantes\r\n        config: null, // @param\r\n        caseRequest: null, // @param\r\n\r\n        lands: [], // @calculate\r\n        pointLots: [], // @calculate array\r\n        lots: null, // @calculate\r\n        // block: null, // @calculate\r\n        // LandCls: new UtilityCase.Land(),\r\n        // LotCls: new UtilityCase.Lot(),\r\n        // PointLotCls: new UtilityCase.PointLot(),\r\n\r\n        // codUiValue: 1,\r\n        queryBlock: null, // @param\r\n        queryLots: null, // @param\r\n        idLandInactive: null,\r\n\r\n        executeAcumulation() {\r\n            return UtilityCase.getBlockFromLot(this.lotGraphic[0].geometry, this.blockUrl)\r\n                .then(block => UtilityCase.checkExistLotUrban(this.attributes, block, this.lotUrl, this.currentLotsRows, this.ubigeo))\r\n                .then(block => UtilityCase.checkExistLotUrbanIntoLotsOriginal(this.attributes, this.currentLotsRows, block))\r\n                .then(block => UtilityCase.translateFieldsBlockToLot(this.lotUrl, block, this.lotGraphic))\r\n                .then(lots => {\r\n                    // const tipLot = UtilityCase.calculateTipLot(this.currentLotsRows);\r\n                    return UtilityCase.calculateFieldsOfLot(\r\n                        this.lotUrl,\r\n                        lots,\r\n                        this.ubigeo,\r\n                        this.codRequests,\r\n                        this.user,\r\n                        this.attributes,\r\n                        // tipLot\r\n                    )\r\n                })\r\n                .then(lots => {\r\n                    this.lots = lots;\r\n                    return UtilityCase.translateFieldsLotToPointLot(lots, this.pointLotUrl, this.newPointLotsGraphics)\r\n                })\r\n                .then(pointLots => UtilityCase.translateFieldsArancelToPointLot(pointLots, this.arancelUrl))\r\n                .then(pointLots => UtilityCase.calculateFieldsOfPointLot(this.pointLotUrl, this.ubigeo, pointLots))\r\n                .then(pointLots => {\r\n                    this.pointLots = pointLots;\r\n                    return UtilityCase.translateFieldsPointLotToLand(pointLots, this.landUrl, this.newLandsGraphics)\r\n                })\r\n                .then(lands => UtilityCase.calculateIdMznC(lands, this.cadastralBlockUrl, this.ubigeo))\r\n                .then(lands => UtilityCase.calculateIdPred(lands, this.landUrl, this.ubigeo))\r\n                .then(lands => {\r\n                    this.lands = lands;\r\n                    return UtilityCase.getDataOrigin(this.pointLotUrl, this.landUrl, this.lots[0], this.queryLots)\r\n                })\r\n                .then(results => {\r\n                    this.currentPoinLotsRows = results[0].features;\r\n                    this.currentLandsRows = results[1].features;\r\n                    this.idLandInactive = results[1].features.map(i => i.attributes.COD_CPU)\r\n                    return UtilityCase.sendDataOriginToHistoric(this.config, this.currentLotsRows, this.currentPoinLotsRows, this.currentLandsRows)\r\n                })\r\n                .then(results => UtilityCase.deleteDataOrigin(this.currentLotsRows, this.currentPoinLotsRows, this.currentLandsRows, this.config))\r\n                .then(results => UtilityCase.addDataNew(this.lots, this.pointLots, this.lands, this.config))\r\n                .then(results => UtilityCase.updateStatusRequests(this.lands, this.codRequests, this.caseRequest, this.ubigeo, this.config, idLandInactive = this.idLandInactive))\r\n                // .then(results => console.log(results))\r\n                .catch(err => { throw err });\r\n        }\r\n    };\r\n\r\n    return Acumulation;\r\n});"]}