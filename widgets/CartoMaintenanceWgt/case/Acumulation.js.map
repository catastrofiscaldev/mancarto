{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/Acumulation.js"],"names":["define","UtilityCase","Acumulation","codRequests","currentLotsRows","currentPoinLotsRows","currentLandsRows","newPointLotsGraphics","newLandsGraphics","attributes","pointLotUrl","landUrl","lotUrl","arancelUrl","blockUrl","lotGraphic","cadastralBlockUrl","ubigeo","user","config","caseRequest","lands","pointLots","lots","executeAcumulation","getBlockFromLot","geometry","then","translateFieldsBlockToLot","block","tipLot","calculateTipLot","calculateFieldsOfLot","codRequest","translateFieldsLotToPointLot","translateFieldsArancelToPointLot","calculateFieldsOfPointLot","translateFieldsPointLotToLand","calculateIdMznC","calculateIdPred","getDataOrigin","results","features","sendDataOriginToHistoric","deleteDataOrigin","addDataNew","updateStatusRequests","console","log","catch","err"],"mappings":"AAAAA,OAAO,CACH,eADG,CAAP,EAEG,UACCC,WADD,EAED;AACE;;;AAGA,QAAMC,cAAc;;AAEhBC,qBAAa,IAFG,EAEG;AACnB;AACAC,yBAAiB,IAJD;AAKhBC,6BAAqB,IALL;AAMhBC,0BAAkB,IANF;AAOhB;AACAC,8BAAsB,IARN,EAQY;AAC5BC,0BAAkB,IATF,EASQ;AACxBC,oBAAY,IAVI,EAUE;AAClBC,qBAAa,IAXG,EAWG;AACnBC,iBAAS,IAZO,EAYD;AACfC,gBAAQ,IAbQ,EAaF;AACdC,oBAAY,IAdI,EAcE;AAClBC,kBAAU,IAfM,EAeA;AAChBC,oBAAY,IAhBI,EAgBE;AAClBC,2BAAmB,IAjBH,EAiBS;AACzBC,gBAAQ,IAlBQ,EAkBF;AACdC,cAAM,IAnBU,EAmBJ;AACZ;AACAC,gBAAQ,IArBQ,EAqBF;AACdC,qBAAa,IAtBG,EAsBG;;AAEnBC,eAAO,EAxBS,EAwBL;AACXC,mBAAW,EAzBK,EAyBD;AACfC,cAAM,IA1BU,EA0BJ;AACZ;AACA;AACA;AACA;;AAEA;;AAEAC,0BAlCgB,gCAkCK;AAAA;;AACjB,mBAAOvB,YAAYwB,eAAZ,CAA4B,KAAKV,UAAL,CAAgB,CAAhB,EAAmBW,QAA/C,EAAyD,KAAKZ,QAA9D,EACFa,IADE,CACG;AAAA,uBAAS1B,YAAY2B,yBAAZ,CAAsC,MAAKhB,MAA3C,EAAmDiB,KAAnD,EAA0D,MAAKd,UAA/D,CAAT;AAAA,aADH,EAEFY,IAFE,CAEG,gBAAQ;AACV,oBAAMG,SAAS7B,YAAY8B,eAAZ,CAA4B,MAAK3B,eAAjC,CAAf;AACA,uBAAOH,YAAY+B,oBAAZ,CACH,MAAKpB,MADF,EAEHW,IAFG,EAGH,MAAKN,MAHF,EAIH,MAAKgB,UAJF,EAKH,MAAKf,IALF,EAMH,MAAKT,UANF,EAOHqB,MAPG,CAAP;AASH,aAbE,EAcFH,IAdE,CAcG,gBAAQ;AACV,sBAAKJ,IAAL,GAAYA,IAAZ;AACA,uBAAOtB,YAAYiC,4BAAZ,CAAyCX,IAAzC,EAA+C,MAAKb,WAApD,EAAiE,MAAKH,oBAAtE,CAAP;AACH,aAjBE,EAkBFoB,IAlBE,CAkBG;AAAA,uBAAa1B,YAAYkC,gCAAZ,CAA6Cb,SAA7C,EAAwD,MAAKT,UAA7D,CAAb;AAAA,aAlBH,EAmBFc,IAnBE,CAmBG;AAAA,uBAAa1B,YAAYmC,yBAAZ,CAAsC,MAAK1B,WAA3C,EAAwD,MAAKO,MAA7D,EAAqEK,SAArE,CAAb;AAAA,aAnBH,EAoBFK,IApBE,CAoBG,qBAAa;AACf,sBAAKL,SAAL,GAAiBA,SAAjB;AACA,uBAAOrB,YAAYoC,6BAAZ,CAA0Cf,SAA1C,EAAqD,MAAKX,OAA1D,EAAmE,MAAKH,gBAAxE,CAAP;AACH,aAvBE,EAwBFmB,IAxBE,CAwBG;AAAA,uBAAS1B,YAAYqC,eAAZ,CAA4BjB,KAA5B,EAAmC,MAAKL,iBAAxC,EAA2D,MAAKC,MAAhE,CAAT;AAAA,aAxBH,EAyBFU,IAzBE,CAyBG;AAAA,uBAAS1B,YAAYsC,eAAZ,CAA4BlB,KAA5B,EAAmC,MAAKV,OAAxC,EAAiD,MAAKM,MAAtD,CAAT;AAAA,aAzBH,EA0BFU,IA1BE,CA0BG,iBAAS;AACX,sBAAKN,KAAL,GAAaA,KAAb;AACA,uBAAOpB,YAAYuC,aAAZ,CAA0B,MAAK9B,WAA/B,EAA4C,MAAKC,OAAjD,EAA0D,MAAKY,IAAL,CAAU,CAAV,CAA1D,CAAP;AACH,aA7BE,EA8BFI,IA9BE,CA8BG,mBAAW;AACb,sBAAKtB,mBAAL,GAA2BoC,QAAQ,CAAR,EAAWC,QAAtC;AACA,sBAAKpC,gBAAL,GAAwBmC,QAAQ,CAAR,EAAWC,QAAnC;AACA,uBAAOzC,YAAY0C,wBAAZ,CAAqC,MAAKxB,MAA1C,EAAkD,MAAKf,eAAvD,EAAwE,MAAKC,mBAA7E,EAAkG,MAAKC,gBAAvG,CAAP;AACH,aAlCE,EAmCFqB,IAnCE,CAmCG;AAAA,uBAAW1B,YAAY2C,gBAAZ,CAA6B,MAAKxC,eAAlC,EAAmD,MAAKC,mBAAxD,EAA6E,MAAKC,gBAAlF,EAAoG,MAAKa,MAAzG,CAAX;AAAA,aAnCH,EAoCFQ,IApCE,CAoCG;AAAA,uBAAW1B,YAAY4C,UAAZ,CAAuB,MAAKtB,IAA5B,EAAkC,MAAKD,SAAvC,EAAkD,MAAKD,KAAvD,EAA8D,MAAKF,MAAnE,CAAX;AAAA,aApCH,EAqCFQ,IArCE,CAqCG;AAAA,uBAAW1B,YAAY6C,oBAAZ,CAAiC,MAAKzB,KAAtC,EAA6C,MAAKlB,WAAlD,EAA+D,MAAKiB,WAApE,EAAiF,MAAKH,MAAtF,EAA8F,MAAKE,MAAnG,CAAX;AAAA,aArCH,EAsCFQ,IAtCE,CAsCG;AAAA,uBAAWoB,QAAQC,GAAR,CAAYP,OAAZ,CAAX;AAAA,aAtCH,EAuCFQ,KAvCE,CAuCI;AAAA,uBAAOF,QAAQC,GAAR,CAAYE,GAAZ,CAAP;AAAA,aAvCJ,CAAP;AAwCH;AA3Ee,KAApB;;AA8EA,WAAOhD,WAAP;AACH,CAvFD","file":"Acumulation.js","sourcesContent":["define([\r\n    \"./UtilityCase\",\r\n], function (\r\n    UtilityCase,\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la acumulaciÃ³n de lotes\r\n    */\r\n    const Acumulation = {\r\n\r\n        codRequests: null, // @param\r\n        // currentLots: null, // @param\r\n        currentLotsRows: null,\r\n        currentPoinLotsRows: null,\r\n        currentLandsRows: null,\r\n        // newPointLots: null, // @param\r\n        newPointLotsGraphics: null, // @param\r\n        newLandsGraphics: null, // @params: nuevos predios como graficos\r\n        attributes: null, // @param\r\n        pointLotUrl: null, // @param\r\n        landUrl: null, // @param\r\n        lotUrl: null, // @param\r\n        arancelUrl: null, // @param\r\n        blockUrl: null, // @param\r\n        lotGraphic: null, // @param []: lotes resultantes\r\n        cadastralBlockUrl: null, // @param\r\n        ubigeo: null, // @param\r\n        user: null, // @param\r\n        // geometryLand: null, // @param []: coodernadas x,y de los predios resultantes\r\n        config: null, // @param\r\n        caseRequest: null, // @param\r\n\r\n        lands: [], // @calculate\r\n        pointLots: [], // @calculate array\r\n        lots: null, // @calculate\r\n        // block: null, // @calculate\r\n        // LandCls: new UtilityCase.Land(),\r\n        // LotCls: new UtilityCase.Lot(),\r\n        // PointLotCls: new UtilityCase.PointLot(),\r\n\r\n        // codUiValue: 1,\r\n\r\n        executeAcumulation() {\r\n            return UtilityCase.getBlockFromLot(this.lotGraphic[0].geometry, this.blockUrl)\r\n                .then(block => UtilityCase.translateFieldsBlockToLot(this.lotUrl, block, this.lotGraphic))\r\n                .then(lots => {\r\n                    const tipLot = UtilityCase.calculateTipLot(this.currentLotsRows);\r\n                    return UtilityCase.calculateFieldsOfLot(\r\n                        this.lotUrl,\r\n                        lots,\r\n                        this.ubigeo,\r\n                        this.codRequest,\r\n                        this.user,\r\n                        this.attributes,\r\n                        tipLot\r\n                    )\r\n                })\r\n                .then(lots => {\r\n                    this.lots = lots;\r\n                    return UtilityCase.translateFieldsLotToPointLot(lots, this.pointLotUrl, this.newPointLotsGraphics)\r\n                })\r\n                .then(pointLots => UtilityCase.translateFieldsArancelToPointLot(pointLots, this.arancelUrl))\r\n                .then(pointLots => UtilityCase.calculateFieldsOfPointLot(this.pointLotUrl, this.ubigeo, pointLots))\r\n                .then(pointLots => {\r\n                    this.pointLots = pointLots;\r\n                    return UtilityCase.translateFieldsPointLotToLand(pointLots, this.landUrl, this.newLandsGraphics)\r\n                })\r\n                .then(lands => UtilityCase.calculateIdMznC(lands, this.cadastralBlockUrl, this.ubigeo))\r\n                .then(lands => UtilityCase.calculateIdPred(lands, this.landUrl, this.ubigeo))\r\n                .then(lands => {\r\n                    this.lands = lands;\r\n                    return UtilityCase.getDataOrigin(this.pointLotUrl, this.landUrl, this.lots[0])\r\n                })\r\n                .then(results => {\r\n                    this.currentPoinLotsRows = results[0].features;\r\n                    this.currentLandsRows = results[1].features;\r\n                    return UtilityCase.sendDataOriginToHistoric(this.config, this.currentLotsRows, this.currentPoinLotsRows, this.currentLandsRows)\r\n                })\r\n                .then(results => UtilityCase.deleteDataOrigin(this.currentLotsRows, this.currentPoinLotsRows, this.currentLandsRows, this.config))\r\n                .then(results => UtilityCase.addDataNew(this.lots, this.pointLots, this.lands, this.config))\r\n                .then(results => UtilityCase.updateStatusRequests(this.lands, this.codRequests, this.caseRequest, this.ubigeo, this.config))\r\n                .then(results => console.log(results))\r\n                .catch(err => console.log(err));\r\n        }\r\n    };\r\n\r\n    return Acumulation;\r\n});"]}