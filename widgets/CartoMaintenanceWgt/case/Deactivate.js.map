{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/case/Deactivate.js"],"names":["define","UtilityCase","Deactivate","codRequest","caseRequest","user","ubigeo","config","landUrl","cpu","currentLandsRows","currentLotsRows","executeDeactivate","self","getLandsOriginByQuery","then","results","features","sendDataOriginToHistoric","updateRowsGeneric","updateDataDeactivate","checkLandsWithinLot","lot","Lot","attributes","estadoIns","updateDataLotsDeactivate","updateStatusRequests","catch","err"],"mappings":"AAAAA,OAAO,CACH,eADG,CAAP,EAEG,UACCC,WADD,EAED;AACE;;;AAGA,QAAMC,aAAa;AACfC,oBAAY,IADG,EACG;AAClBC,qBAAa,IAFE,EAEI;AACnBC,cAAM,IAHS,EAGH;AACZC,gBAAQ,IAJO,EAID;AACdC,gBAAQ,IALO,EAKD;AACd;AACAC,iBAAS,IAPM,EAOA;AACfC,aAAK,IARU,EAQJ;AACX;AACAC,0BAAkB,IAVH;AAWfC,yBAAiB,IAXF;;AAafC,yBAbe,+BAaK;AAChB,gBAAMC,OAAO,IAAb;AACA,mBAAOZ,YAAYa,qBAAZ,CAAkCD,KAAKL,OAAvC,EAAgDK,KAAKJ,GAArD,EACFM,IADE,CACG,mBAAW;AACbF,qBAAKH,gBAAL,GAAwBM,QAAQC,QAAhC;AACA,uBAAOhB,YAAYiB,wBAAZ,CAAqCL,KAAKN,MAA1C,EAAkD,IAAlD,EAAwD,IAAxD,EAA8DM,KAAKH,gBAAnE,CAAP;AACH,aAJE,EAKFK,IALE,CAKG,mBAAW;AACbF,qBAAKH,gBAAL,GAAwBT,YAAYkB,iBAAZ,CAA8BN,KAAKH,gBAAnC,EAAqDG,KAAKV,UAA1D,EAAsEU,KAAKR,IAA3E,CAAxB;AACA,uBAAOJ,YAAYmB,oBAAZ,CAAiCP,KAAKH,gBAAtC,EAAwDG,KAAKN,MAA7D,CAAP;AACH,aARE,EASFQ,IATE,CASG;AAAA,uBAAWd,YAAYoB,mBAAZ,CAAgCR,KAAKF,eAAL,CAAqB,CAArB,CAAhC,EAAyDE,KAAKL,OAA9D,CAAX;AAAA,aATH,EAUFO,IAVE,CAUG,mBAAW;AACb,oBAAMO,MAAM,IAAIrB,YAAYsB,GAAhB,EAAZ;AACAV,qBAAKF,eAAL,CAAqB,CAArB,EAAwBa,UAAxB,CAAmCF,IAAIG,SAAvC,IAAoDT,OAApD;AACA,uBAAOf,YAAYyB,wBAAZ,CAAqCb,KAAKF,eAA1C,EAA2DE,KAAKN,MAAhE,CAAP;AACH,aAdE,EAeFQ,IAfE,CAeG;AAAA,uBAAWd,YAAY0B,oBAAZ,CAAiCd,KAAKH,gBAAtC,EAAwDG,KAAKV,UAA7D,EAAyEU,KAAKT,WAA9E,EAA2FS,KAAKP,MAAhG,EAAwGO,KAAKN,MAA7G,CAAX;AAAA,aAfH,EAgBFqB,KAhBE,CAgBI,eAAO;AAAE,sBAAMC,GAAN;AAAW,aAhBxB,CAAP;AAiBH;AAhCc,KAAnB;AAkCA,WAAO3B,UAAP;AACH,CA3CD","file":"Deactivate.js","sourcesContent":["define([\r\n    \"./UtilityCase\",\r\n], function (\r\n    UtilityCase,\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene las funciones para la inactivacion de lotes\r\n    */\r\n    const Deactivate = {\r\n        codRequest: null, // @params: CÃ³digo de la solicitud\r\n        caseRequest: null, // @params\r\n        user: null, // @params\r\n        ubigeo: null, // @params\r\n        config: null, // @calculate\r\n        // pointLotUrl: null, // @param\r\n        landUrl: null, // @param\r\n        cpu: null, // @param\r\n        // currentLotsRows: null, //@param\r\n        currentLandsRows: null,\r\n        currentLotsRows: null,\r\n\r\n        executeDeactivate() {\r\n            const self = this;\r\n            return UtilityCase.getLandsOriginByQuery(self.landUrl, self.cpu)\r\n                .then(results => {\r\n                    self.currentLandsRows = results.features;\r\n                    return UtilityCase.sendDataOriginToHistoric(self.config, null, null, self.currentLandsRows)\r\n                })\r\n                .then(results => {\r\n                    self.currentLandsRows = UtilityCase.updateRowsGeneric(self.currentLandsRows, self.codRequest, self.user)\r\n                    return UtilityCase.updateDataDeactivate(self.currentLandsRows, self.config)\r\n                })\r\n                .then(results => UtilityCase.checkLandsWithinLot(self.currentLotsRows[0], self.landUrl))\r\n                .then(results => {\r\n                    const lot = new UtilityCase.Lot();\r\n                    self.currentLotsRows[0].attributes[lot.estadoIns] = results;\r\n                    return UtilityCase.updateDataLotsDeactivate(self.currentLotsRows, self.config)\r\n                })\r\n                .then(results => UtilityCase.updateStatusRequests(self.currentLandsRows, self.codRequest, self.caseRequest, self.ubigeo, self.config))\r\n                .catch(err => { throw err });\r\n        },\r\n    };\r\n    return Deactivate;\r\n});"]}