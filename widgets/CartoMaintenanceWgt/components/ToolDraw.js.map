{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/components/ToolDraw.js"],"names":["define","Draw","Graphic","CartographicLineSymbol","Color","SnappingManager","FeatureLayer","webMercatorUtils","Font","Point","Polyline","TextSymbol","turf","ToolDraw","toolbarDraw","map","controlMeasurementRealTime","controlMeasurementTable","lotFeatureLayer","anotherToolbar","linearDivision","callbackAddLineDivision","lineSymbol","statusDraw","currentDistance","currentCoordinates","landsFeature","controllerId","measurements","initToolDraw","on","addGraphic","bind","STYLE_SHORTDASH","setMarker","style","placement","size","clickIntoMap","moveMouseMap","evt","key","getUUID","uuid","crypto","randomUUID","replace","deactivate","idPolylineGraphic","idLabelGraphic","graphic","geometry","id","graphics","add","addLabelToCenterLine","distance","toFixed","idLabel","addRowToTable","enableMapNavigation","setInfoWindowOnClick","activateToolDraw","snapManager","enableSnapping","alwaysSnap","layerInfos","layer","setLayerInfos","disableMapNavigation","activate","deactivateToolbarAnotherToolbar","innerHTML","measurementItem","row","insertAdjacentHTML","deleteRow","querySelector","zoomToGraphic","editDistance","convertDivisionLine","addEventListener","deleteRowTable","preventDefault","validateNumericInput","parseToLineDivision","value","target","innerText","regex","test","slice","getGraphicById","currentTarget","parentElement","dataset","idpolyline","remove","graphicLabel","setExtent","getExtent","idPolyline","newDistance","parseFloat","textContent","polyline","newGeometry","updatePolylineLength","forEach","attributes","setGeometry","filter","length","getDistance","arrayPoints","totalDistance","i","esri","getLength","push","mapPoint","midPoint","findMidPoint","xMidPoint","coordinates","yMidPoint","pointLabel","x","y","spatialReference","wkid","font","STYLE_NORMAL","VARIANT_NORMAL","WEIGHT_BOLD","txtSym","setOffset","setAlign","DECORATION_OVERLINE","setVerticalAlignment","setHaloColor","setHaloSize","angle","getAngleByLabel","setAngle","polylineGeomUtm","webMercatorToGeographic","line","lineString","paths","options","units","along","centerPoint","startPoint","startPointTurf","point","centerPointTurf","lineSlice","points","bearing","newDistamce","vertices","sliced","lineSliceAlong","lastTwoCoords","addDistance","destintation","destination","response","geographicToWebMercator","removeAllGraphicsIntoMeasurements"],"mappings":"AAAAA,OAAO,CACH,oBADG,EAEH,cAFG,EAGH,qCAHG,EAIH,YAJG,EAKH,sBALG,EAMH,0BANG,EAOH,gCAPG,EAQH,mBARG,EASH,qBATG,EAUH,wBAVG,EAWH,yBAXG,EAYH,4CAZG,CAAP,EAaG,UACCC,IADD,EAECC,OAFD,EAGCC,sBAHD,EAICC,KAJD,EAKCC,eALD,EAMCC,YAND,EAOCC,gBAPD,EAQCC,IARD,EASCC,KATD,EAUCC,QAVD,EAWCC,UAXD,EAYCC,IAZD;AAaC;AACF;AACE;;;AAGA,QAAMC,WAAW;AACb;AACAC,qBAAa,IAFA,EAEM;AACnBC,aAAK,IAHQ,EAGF;AACXC,oCAA4B,IAJf,EAIqB;AAClCC,iCAAyB,IALZ,EAKkB;AAC/BC,yBAAiB,IANJ,EAMU;AACvBC,wBAAgB,IAPH,EAOS;AACtBC,wBAAgB,IARH,EAQS;AACtBC,iCAAyB,IATZ,EASkB;;AAE/B;AACAC,oBAAY,IAZC;AAabC,oBAAY,KAbC;AAcbC,yBAAiB,CAdJ;AAebC,4BAAoB,EAfP;AAgBbC,sBAAc,IAhBD;AAiBbC,sBAAc,CAjBD;AAkBbC,sBAAc,EAlBD;;AAoBbC,oBApBa,0BAoBE;AAAA;;AACX,iBAAKf,WAAL,GAAmB,IAAIb,IAAJ,CAAS,KAAKc,GAAd,CAAnB;AACA,iBAAKD,WAAL,CAAiBgB,EAAjB,CAAoB,UAApB,EAAgC,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAhC;AACA,iBAAKV,UAAL,GAAkB,IAAInB,sBAAJ,CACdA,uBAAuB8B,eADT,EAEd,IAAI7B,KAAJ,CAAU,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,CAAb,CAAV,CAFc,EAGd,CAHc,CAAlB;AAKA,iBAAKkB,UAAL,CAAgBY,SAAhB,CAA0B;AACtBC,uBAAO,OADe;AAEtBC,2BAAW,WAFW;AAGtBC,sBAAM;AAHgB,aAA1B;;AAMA,iBAAKtB,GAAL,CAASe,EAAT,CAAY,OAAZ,EAAqB,KAAKQ,YAAL,CAAkBN,IAAlB,CAAuB,IAAvB,CAArB;AACA,iBAAKjB,GAAL,CAASe,EAAT,CAAY,YAAZ,EAA0B,KAAKS,YAAL,CAAkBP,IAAlB,CAAuB,IAAvB,CAA1B;AACA,iBAAKjB,GAAL,CAASe,EAAT,CAAY,QAAZ,EAAsB,UAACU,GAAD,EAAS;AAC3B,oBAAIA,IAAIC,GAAJ,KAAY,QAAZ,IAAwB,MAAKlB,UAAjC,EAA6C;AACzC,0BAAKE,kBAAL,GAA0B,EAA1B;AACA,0BAAKD,eAAL,GAAuB,IAAvB;AACH;AACJ,aALD;;AAQA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEH,SAxDY;AA0DbkB,eA1Da,qBA0DH;AACN,gBAAIC,OAAOC,OAAOC,UAAP,EAAX;AACAF,yBAAWA,KAAKG,OAAL,CAAa,GAAb,EAAkB,EAAlB,CAAX;AACA,mBAAOH,IAAP;AACH,SA9DY;AAgEbZ,kBAhEa,sBAgEFS,GAhEE,EAgEG;AACZ,iBAAK1B,WAAL,CAAiBiC,UAAjB;AACA,iBAAKpB,YAAL,GAAoB,KAAKA,YAAL,GAAoB,CAAxC;AACA,gBAAMqB,oBAAoB,KAAKN,OAAL,EAA1B;AACA,gBAAMO,iBAAiB,KAAKP,OAAL,EAAvB;AACA,gBAAMQ,UAAU,IAAIhD,OAAJ,CAAYsC,IAAIW,QAAhB,EAA0B,KAAK7B,UAA/B,EAA2C,EAAE8B,IAAIJ,iBAAN,EAA3C,CAAhB;AACA,iBAAKjC,GAAL,CAASsC,QAAT,CAAkBC,GAAlB,CAAsBJ,OAAtB;AACA,iBAAKK,oBAAL,CAA0Bf,IAAIW,QAA9B,EAAwC,KAAK3B,eAA7C,EAA8DyB,cAA9D;AACA,iBAAKrB,YAAL,CAAkBoB,iBAAlB,IAAuC;AACnCQ,0BAAU,KAAKhC,eAAL,CAAqBiC,OAArB,CAA6B,CAA7B,CADyB;AAEnC;AACA;AACAC,yBAAST;AAJ0B,aAAvC;AAMA,iBAAKU,aAAL,CAAmB,KAAK/B,YAAL,CAAkBoB,iBAAlB,CAAnB,EAAyDA,iBAAzD;AACA,iBAAKjC,GAAL,CAAS6C,mBAAT;AACA,iBAAK7C,GAAL,CAAS8C,oBAAT,CAA8B,IAA9B;AACA,iBAAKtC,UAAL,GAAkB,KAAlB;AACA;AACA;AACH,SApFY;AAsFbuC,wBAtFa,4BAsFItB,GAtFJ,EAsFS;AAClB,iBAAKrB,cAAL,CAAoB4B,UAApB;AACA,gBAAMgB,cAAc,KAAKhD,GAAL,CAASiD,cAAT,EAApB;AACA;AACAD,wBAAYE,UAAZ,GAAyB,IAAzB;;AAEA,gBAAMC,aAAa,CAAC;AAChBC,uBAAO,KAAKjD;AADI,aAAD,CAAnB;AAGA6C,wBAAYK,aAAZ,CAA0BF,UAA1B;;AAEA,iBAAKnD,GAAL,CAASsD,oBAAT;AACA,iBAAKtD,GAAL,CAAS8C,oBAAT,CAA8B,KAA9B;AACA,iBAAKtC,UAAL,GAAkB,IAAlB;AACA,iBAAKE,kBAAL,GAA0B,EAA1B;AACA,iBAAKX,WAAL,CAAiBwD,QAAjB,CAA0B,UAA1B;AACH,SAtGY;AAwGbC,uCAxGa,6CAwGqB;AAC9B,iBAAKzD,WAAL,CAAiBiC,UAAjB;AACA,iBAAKhC,GAAL,CAAS6C,mBAAT;AACA,iBAAK7C,GAAL,CAAS8C,oBAAT,CAA8B,IAA9B;AACA,iBAAKtC,UAAL,GAAkB,KAAlB;AACA,iBAAKC,eAAL,GAAuB,IAAvB;AACA,iBAAKR,0BAAL,CAAgCwD,SAAhC,GAA4C,KAAKhD,eAAL,CAAqBiC,OAArB,CAA6B,CAA7B,CAA5C;AACH,SA/GY;AAiHbE,qBAjHa,yBAiHCc,eAjHD,EAiHkBrB,EAjHlB,EAiHsB;AAAA;;AAC/B;AACA,gBAAMsB,iDACoBtB,EADpB,4GAGQqB,gBAAgBjB,QAHxB,kgBAAN;;AAiBA;;AAEA;AACA,iBAAKvC,uBAAL,CAA6B0D,kBAA7B,CAAgD,WAAhD,EAA6DD,GAA7D;AACA,gBAAME,YAAY,KAAK3D,uBAAL,CAA6B4D,aAA7B,0BAAkEzB,EAAlE,sBAAlB;AACA,gBAAM0B,gBAAgB,KAAK7D,uBAAL,CAA6B4D,aAA7B,0BAAkEzB,EAAlE,wBAAtB;AACA,gBAAM2B,eAAe,KAAK9D,uBAAL,CAA6B4D,aAA7B,0BAAkEzB,EAAlE,uBAArB;AACA;AACA,gBAAM4B,sBAAsB,KAAK/D,uBAAL,CAA6B4D,aAA7B,0BAAkEzB,EAAlE,wBAA5B;;AAEAwB,sBAAUK,gBAAV,CAA2B,OAA3B,EAAoC,KAAKC,cAAL,CAAoBlD,IAApB,CAAyB,IAAzB,CAApC;AACA8C,0BAAcG,gBAAd,CAA+B,OAA/B,EAAwC,KAAKH,aAAL,CAAmB9C,IAAnB,CAAwB,IAAxB,CAAxC;AACA;AACA+C,yBAAaE,gBAAb,CAA8B,SAA9B,EAAyC,UAACzC,GAAD,EAAS;AAC9C,oBAAIA,IAAIC,GAAJ,KAAY,OAAhB,EAAyB;AACrBD,wBAAI2C,cAAJ;AACA,2BAAKJ,YAAL,CAAkBvC,GAAlB;AACH;AACJ,aALD;AAMAuC,yBAAaE,gBAAb,CAA8B,OAA9B,EAAuC,KAAKG,oBAA5C;AACAJ,gCAAoBC,gBAApB,CAAqC,OAArC,EAA8C,KAAKI,mBAAL,CAAyBrD,IAAzB,CAA8B,IAA9B,CAA9C;AACH,SAzJY;AA2JboD,4BA3Ja,gCA2JQ5C,GA3JR,EA2Ja;AACtB,gBAAM8C,QAAQ9C,IAAI+C,MAAJ,CAAWC,SAAzB;AACA,gBAAMC,QAAQ,mBAAd,CAFsB,CAEa;;AAEnC,gBAAI,CAACA,MAAMC,IAAN,CAAWJ,KAAX,CAAL,EAAwB;AACpB9C,oBAAI+C,MAAJ,CAAWC,SAAX,GAAuBF,MAAMK,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAvB,CADoB,CACuB;AAC9C;AACJ,SAlKY;AAoKbT,sBApKa,0BAoKE1C,GApKF,EAoKO;AAChB,gBAAMU,UAAU,KAAK0C,cAAL,CAAoBpD,IAAIqD,aAAJ,CAAkBC,aAAlB,CAAgCC,OAAhC,CAAwCC,UAA5D,CAAhB;AACA,iBAAKjF,GAAL,CAASsC,QAAT,CAAkB4C,MAAlB,CAAyB/C,OAAzB;AACA,gBAAMQ,UAAU,KAAK9B,YAAL,CAAkBY,IAAIqD,aAAJ,CAAkBC,aAAlB,CAAgCC,OAAhC,CAAwCC,UAA1D,EAAsEtC,OAAtF;AACA,gBAAMwC,eAAe,KAAKN,cAAL,CAAoBlC,OAApB,CAArB;AACA,iBAAK3C,GAAL,CAASsC,QAAT,CAAkB4C,MAAlB,CAAyBC,YAAzB;AACA1D,gBAAIqD,aAAJ,CAAkBC,aAAlB,CAAgCG,MAAhC;AACH,SA3KY;AA6KbnB,qBA7Ka,yBA6KCtC,GA7KD,EA6KM;AACf,gBAAMU,UAAU,KAAK0C,cAAL,CAAoBpD,IAAIqD,aAAJ,CAAkBC,aAAlB,CAAgCC,OAAhC,CAAwCC,UAA5D,CAAhB;AACA,iBAAKjF,GAAL,CAASoF,SAAT,CAAmBjD,QAAQC,QAAR,CAAiBiD,SAAjB,EAAnB;AACH,SAhLY;AAkLbrB,oBAlLa,wBAkLAvC,GAlLA,EAkLK;AACd,gBAAM6D,aAAa7D,IAAIqD,aAAJ,CAAkBC,aAAlB,CAAgCC,OAAhC,CAAwCC,UAA3D;AACA,gBAAMM,cAAcC,WAAW/D,IAAIqD,aAAJ,CAAkBW,WAA7B,CAApB;AACA,gBAAM9C,UAAU,KAAK9B,YAAL,CAAkByE,UAAlB,EAA8B3C,OAA9C;AACA,gBAAM+C,WAAW,KAAKb,cAAL,CAAoBS,UAApB,EAAgClD,QAAjD;AACA,gBAAMK,WAAW+C,WAAW,KAAK3E,YAAL,CAAkByE,UAAlB,EAA8B7C,QAAzC,CAAjB;AACA,gBAAMkD,cAAc,KAAKC,oBAAL,CAA0BL,WAA1B,EAAuC9C,QAAvC,EAAiDiD,QAAjD,CAApB;AACA,gBAAI,CAACC,WAAL,EAAkB;AACd;AACH;;AAED,iBAAK3F,GAAL,CAASsC,QAAT,CAAkBA,QAAlB,CAA2BuD,OAA3B,CAAmC,mBAAW;AAC1C,oBAAI1D,QAAQ2D,UAAR,IAAsB3D,QAAQ2D,UAAR,CAAmBzD,EAAnB,KAA0BiD,UAApD,EAAgE;AAC5DnD,4BAAQ4D,WAAR,CAAoBJ,WAApB;AACH;AACJ,aAJD;;AAMA,iBAAK9E,YAAL,CAAkByE,UAAlB,EAA8B7C,QAA9B,GAAyC8C,YAAY7C,OAAZ,CAAoB,CAApB,CAAzC;AACA,gBAAMyC,eAAe,KAAKN,cAAL,CAAoBlC,OAApB,CAArB;AACA,iBAAK3C,GAAL,CAASsC,QAAT,CAAkB4C,MAAlB,CAAyBC,YAAzB;AACA,iBAAK3C,oBAAL,CAA0BmD,WAA1B,EAAuCJ,WAAvC,EAAoD5C,OAApD;AAEH,SAxMY;AA0Mb2B,2BA1Ma,+BA0MO7C,GA1MP,EA0MY;AACrB,gBAAM6D,aAAa7D,IAAIqD,aAAJ,CAAkBC,aAAlB,CAAgCC,OAAhC,CAAwCC,UAA3D;AACA,gBAAM9C,UAAU,KAAK0C,cAAL,CAAoBS,UAApB,CAAhB;AACA,iBAAKhF,uBAAL,CAA6B6B,QAAQC,QAArC;AACA,iBAAK+B,cAAL,CAAoB1C,GAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACH,SAzNY;AA2NboD,sBA3Na,0BA2NExC,EA3NF,EA2NM;AACf,gBAAMF,UAAU,KAAKnC,GAAL,CAASsC,QAAT,CAAkBA,QAAlB,CAA2B0D,MAA3B,CAAkC,mBAAW;AACzD,oBAAI7D,QAAQ2D,UAAR,IAAsB3D,QAAQ2D,UAAR,CAAmBzD,EAAnB,KAA0BA,EAApD,EAAwD;AACpD,2BAAOF,OAAP;AACH;AACJ,aAJe,CAAhB;AAKA,gBAAIA,QAAQ8D,MAAR,KAAmB,CAAvB,EAA0B;AACtB,uBAAO,IAAP;AACH;AACD,mBAAO9D,QAAQ,CAAR,CAAP;AACH,SArOY;AAuOb+D,mBAvOa,uBAuODC,WAvOC,EAuOY;AACrB,gBAAIC,gBAAgB,CAApB;AACA,gBAAID,YAAYF,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,uBAAOG,aAAP;AACH;AACD,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,YAAYF,MAAZ,GAAqB,CAAzC,EAA4CI,GAA5C,EAAiD;AAC7C,oBAAM5D,WAAW6D,KAAKlE,QAAL,CAAcmE,SAAd,CAAwBJ,YAAYE,CAAZ,CAAxB,EAAwCF,YAAYE,IAAI,CAAhB,CAAxC,CAAjB;AACAD,iCAAiB3D,QAAjB;AACH;AACD,mBAAO2D,aAAP;AACH,SAjPY;AAmPb7E,oBAnPa,wBAmPAE,GAnPA,EAmPK;AACd,gBAAI,KAAKjB,UAAT,EAAqB;AACjB,qBAAKE,kBAAL,CAAwB8F,IAAxB,CAA6B/E,IAAIgF,QAAjC;AACH;AACJ,SAvPY;AAyPbjF,oBAzPa,wBAyPAC,GAzPA,EAyPK;AACd,gBAAI,KAAKjB,UAAT,EAAqB;AACjB,oBAAI,KAAKE,kBAAL,CAAwBuF,MAAxB,GAAiC,CAArC,EAAwC;AACpC,yBAAKxF,eAAL,GAAuB6F,KAAKlE,QAAL,CAAcmE,SAAd,CAAwB,KAAK7F,kBAAL,CAAwB,KAAKA,kBAAL,CAAwBuF,MAAxB,GAAiC,CAAzD,CAAxB,EAAqFxE,IAAIgF,QAAzF,IAAqG,KAAKP,WAAL,CAAiB,KAAKxF,kBAAtB,CAA5H;AACA,yBAAKT,0BAAL,CAAgCwD,SAAhC,GAA4C,KAAKhD,eAAL,CAAqBiC,OAArB,CAA6B,CAA7B,CAA5C;AACH;AACJ;AACJ,SAhQY;AAkQbF,4BAlQa,gCAkQQJ,QAlQR,EAkQkBK,QAlQlB,EAkQ4BP,cAlQ5B,EAkQ4C;AACrD,gBAAMwE,WAAW,KAAKC,YAAL,CAAkBvE,QAAlB,EAA4BK,QAA5B,CAAjB;AACA,gBAAMmE,YAAYF,SAAStE,QAAT,CAAkByE,WAAlB,CAA8B,CAA9B,CAAlB;AACA,gBAAMC,YAAYJ,SAAStE,QAAT,CAAkByE,WAAlB,CAA8B,CAA9B,CAAlB;AACA,gBAAME,aAAa,IAAIrH,KAAJ,CAAU;AACzBsH,mBAAGJ,SADsB;AAEzBK,mBAAGH,SAFsB;AAGzBI,kCAAkB,EAAEC,MAAM,IAAR;AAHO,aAAV,CAAnB;;AAMA,gBAAMC,OAAO,IAAI3H,IAAJ,CAAS,MAAT,EAAiBA,KAAK4H,YAAtB,EAAoC5H,KAAK6H,cAAzC,EAAyD7H,KAAK8H,WAA9D,EAA2E,OAA3E,CAAb;AACA,gBAAMC,SAAS,IAAI5H,UAAJ,CAAe6C,SAASC,OAAT,CAAiB,CAAjB,CAAf,EAAoC0E,IAApC,EAA0C,IAAI/H,KAAJ,CAAU,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,CAAb,CAAV,CAA1C,CAAf;AACAmI,mBAAOC,SAAP,CAAiB,CAAjB,EAAoB,CAApB,EAAuBC,QAAvB,CAAgC9H,WAAW+H,mBAA3C;AACA;AACAH,mBAAOI,oBAAP,CAA4B,QAA5B;AACAJ,mBAAOK,YAAP,CAAoB,IAAIxI,KAAJ,CAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAV,CAApB;AACAmI,mBAAOM,WAAP,CAAmB,CAAnB;;AAEA;AACA,gBAAMC,QAAQ,KAAKC,eAAL,CAAqBjB,UAArB,EAAiC3E,QAAjC,CAAd;AACA;AACAoF,mBAAOS,QAAP,CAAgBF,KAAhB;AACA,gBAAM5C,eAAe,IAAIhG,OAAJ,CAAY4H,UAAZ,EAAwBS,MAAxB,EAAgC,EAAEnF,IAAIH,cAAN,EAAhC,CAArB;AACA,iBAAKlC,GAAL,CAASsC,QAAT,CAAkBC,GAAlB,CAAsB4C,YAAtB;AACA;AACH,SA3RY;AA6RbwB,oBA7Ra,wBA6RAjB,QA7RA,EA6RUjD,QA7RV,EA6RoB;AAC7B,gBAAMyF,kBAAkB1I,iBAAiB2I,uBAAjB,CAAyCzC,QAAzC,CAAxB;AACA,gBAAM0C,OAAOvI,KAAKwI,UAAL,CAAgBH,gBAAgBI,KAAhB,CAAsB,CAAtB,CAAhB,CAAb;AACA,gBAAMC,UAAU,EAAEC,OAAO,QAAT,EAAhB;AACA,gBAAMC,QAAQ5I,KAAK4I,KAAL,CAAWL,IAAX,EAAiB3F,WAAW,CAA5B,EAA+B8F,OAA/B,CAAd;AACA,mBAAOE,KAAP;AACH,SAnSY;AAqSbT,uBArSa,2BAqSGU,WArSH,EAqSgBhD,QArShB,EAqS0B;AACnC,gBAAMwC,kBAAkB1I,iBAAiB2I,uBAAjB,CAAyCzC,QAAzC,CAAxB;AACA,gBAAMiD,aAAaT,gBAAgBI,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAnB;AACA,gBAAMM,iBAAiB/I,KAAKgJ,KAAL,CAAW,CAACF,WAAW,CAAX,CAAD,EAAgBA,WAAW,CAAX,CAAhB,CAAX,CAAvB;AACA,gBAAMG,kBAAkBjJ,KAAKgJ,KAAL,CAAW,CAACH,YAAY1B,CAAb,EAAgB0B,YAAYzB,CAA5B,CAAX,CAAxB;AACA,gBAAMrC,QAAQ/E,KAAKkJ,SAAL,CAAeH,cAAf,EAA+BE,eAA/B,EAAgDjJ,KAAKwI,UAAL,CAAgBH,gBAAgBI,KAAhB,CAAsB,CAAtB,CAAhB,CAAhD,CAAd;AACA,gBAAMU,SAASpE,MAAMxC,QAAN,CAAeyE,WAAf,CAA2BjC,KAA3B,CAAiC,CAAC,CAAlC,CAAf;AACA,gBAAImD,QAAQlI,KAAKoJ,OAAL,CAAapJ,KAAKgJ,KAAL,CAAWG,OAAO,CAAP,CAAX,CAAb,EAAoCnJ,KAAKgJ,KAAL,CAAWG,OAAO,CAAP,CAAX,CAApC,CAAZ;AACAjB,oBAAQA,QAAQ,CAAR,GAAY,MAAMA,KAAlB,GAA0BA,KAAlC;AACA,mBAAOA,QAAQ,EAAf;AACH,SA/SY;AAiTbnC,4BAjTa,gCAiTQsD,WAjTR,EAiTqBzG,QAjTrB,EAiT+BiD,QAjT/B,EAiTyC;AAClD,gBAAMwC,kBAAkB1I,iBAAiB2I,uBAAjB,CAAyCzC,QAAzC,CAAxB;AACA,gBAAIyD,WAAWjB,gBAAgBI,KAAhB,CAAsB,CAAtB,CAAf;AACA,gBAAIY,gBAAgB,CAApB,EAAuB;AACnB,uBAAO,KAAP;AACH,aAFD,MAGK,IAAIA,cAAczG,QAAlB,EAA4B;AAC7B,oBAAM2F,OAAOvI,KAAKwI,UAAL,CAAgBc,QAAhB,CAAb;AACA,oBAAMZ,UAAU,EAAEC,OAAO,QAAT,EAAhB;AACA,oBAAMY,SAASvJ,KAAKwJ,cAAL,CAAoBjB,IAApB,EAA0B,CAA1B,EAA6Bc,WAA7B,EAA0CX,OAA1C,CAAf;AACAY,2BAAWC,OAAOhH,QAAP,CAAgByE,WAA3B;AACH,aALI,MAMA,IAAIqC,cAAczG,QAAlB,EAA4B;AAC7B,oBAAM6G,gBAAgBH,SAASvE,KAAT,CAAe,CAAC,CAAhB,CAAtB;AACA,oBAAMwD,QAAOvI,KAAKwI,UAAL,CAAgBiB,aAAhB,CAAb;AACA,oBAAML,UAAUpJ,KAAKoJ,OAAL,CAAapJ,KAAKgJ,KAAL,CAAWT,MAAKhG,QAAL,CAAcyE,WAAd,CAA0B,CAA1B,CAAX,CAAb,EAAuDhH,KAAKgJ,KAAL,CAAWT,MAAKhG,QAAL,CAAcyE,WAAd,CAA0B,CAA1B,CAAX,CAAvD,CAAhB;AACA,oBAAM0B,WAAU,EAAEC,OAAO,QAAT,EAAhB;AACA,oBAAMe,cAAcL,cAAczG,QAAlC;AACA,oBAAMoG,QAAQhJ,KAAKgJ,KAAL,CAAWT,MAAKhG,QAAL,CAAcyE,WAAd,CAA0B,CAA1B,CAAX,CAAd;AACA,oBAAM2C,eAAe3J,KAAK4J,WAAL,CAAiBZ,KAAjB,EAAwBU,WAAxB,EAAqCN,OAArC,EAA8CV,QAA9C,CAArB;AACAY,yBAASA,SAASlD,MAAT,GAAkB,CAA3B,IAAgCuD,aAAapH,QAAb,CAAsByE,WAAtD;AACH;;AAED;AACA;;AAEAnB,uBAAW,IAAI/F,QAAJ,CAAa;AACpB2I,uBAAO,CAACa,QAAD,CADa;AAEpBjC,kCAAkBgB,gBAAgBhB;AAFd,aAAb,CAAX;;AAKA,gBAAMwC,WAAWlK,iBAAiBmK,uBAAjB,CAAyCjE,QAAzC,CAAjB;AACA,mBAAOgE,QAAP;AACA;AACA;AACA;AACA;AACA;AACH,SAvVY;AAyVbE,yCAzVa,+CAyVuB;AAChC,iBAAK1J,uBAAL,CAA6BuD,SAA7B,GAAyC,EAAzC;AACA;AACA,iBAAK,IAAM/B,GAAX,IAAkB,KAAKb,YAAvB,EAAqC;AACjC,oBAAMsB,UAAU,KAAK0C,cAAL,CAAoBnD,GAApB,CAAhB;AACA,qBAAK1B,GAAL,CAASsC,QAAT,CAAkB4C,MAAlB,CAAyB/C,OAAzB;AACA,oBAAMQ,UAAU,KAAK9B,YAAL,CAAkBa,GAAlB,EAAuBiB,OAAvC;AACA,oBAAMwC,eAAe,KAAKN,cAAL,CAAoBlC,OAApB,CAArB;AACA,qBAAK3C,GAAL,CAASsC,QAAT,CAAkB4C,MAAlB,CAAyBC,YAAzB;AACH;AACD,iBAAKtE,YAAL,GAAoB,EAApB;;AAEA,iBAAKZ,0BAAL,CAAgCwD,SAAhC,GAA4C,MAA5C;AACH;AAtWY,KAAjB;AAyWA,WAAO3D,QAAP;AACH,CAzYD","file":"ToolDraw.js","sourcesContent":["define([\r\n    'esri/toolbars/draw',\r\n    'esri/graphic',\r\n    'esri/symbols/CartographicLineSymbol',\r\n    'esri/Color',\r\n    'esri/SnappingManager',\r\n    'esri/layers/FeatureLayer',\r\n    'esri/geometry/webMercatorUtils',\r\n    'esri/symbols/Font',\r\n    'esri/geometry/Point',\r\n    'esri/geometry/Polyline',\r\n    'esri/symbols/TextSymbol',\r\n    'https://unpkg.com/@turf/turf@6/turf.min.js',\r\n], function (\r\n    Draw,\r\n    Graphic,\r\n    CartographicLineSymbol,\r\n    Color,\r\n    SnappingManager,\r\n    FeatureLayer,\r\n    webMercatorUtils,\r\n    Font,\r\n    Point,\r\n    Polyline,\r\n    TextSymbol,\r\n    turf,\r\n    // getLength,\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene los componentes para la herramienta de dibujo\r\n    */\r\n    const ToolDraw = {\r\n        // @params\r\n        toolbarDraw: null, // @params\r\n        map: null, // @params\r\n        controlMeasurementRealTime: null, // @params\r\n        controlMeasurementTable: null, // @params\r\n        lotFeatureLayer: null, // @params\r\n        anotherToolbar: null, // @params\r\n        linearDivision: null, // @params\r\n        callbackAddLineDivision: null, // @params\r\n\r\n        // @const\r\n        lineSymbol: null,\r\n        statusDraw: false,\r\n        currentDistance: 0,\r\n        currentCoordinates: [],\r\n        landsFeature: null,\r\n        controllerId: 0,\r\n        measurements: {},\r\n\r\n        initToolDraw() {\r\n            this.toolbarDraw = new Draw(this.map);\r\n            this.toolbarDraw.on('draw-end', this.addGraphic.bind(this));\r\n            this.lineSymbol = new CartographicLineSymbol(\r\n                CartographicLineSymbol.STYLE_SHORTDASH,\r\n                new Color([40, 40, 40, 1]),\r\n                3\r\n            )\r\n            this.lineSymbol.setMarker({\r\n                style: 'arrow',\r\n                placement: 'begin-end',\r\n                size: 1\r\n            })\r\n\r\n            this.map.on('click', this.clickIntoMap.bind(this));\r\n            this.map.on('mouse-move', this.moveMouseMap.bind(this));\r\n            this.map.on('key-up', (evt) => {\r\n                if (evt.key === 'Escape' && this.statusDraw) {\r\n                    this.currentCoordinates = [];\r\n                    this.currentDistance = 0.00;\r\n                }\r\n            });\r\n\r\n\r\n            // document.addEventListener('keyup', (evt) => {\r\n            //     if (evt.key === 'Escape' && this.statusDraw) {\r\n            //         this.currentCoordinates = [];\r\n            //         this.currentDistance = 0.00;\r\n            //     }\r\n            // });\r\n\r\n            // this.landsFeature = new FeatureLayer(this.lotUrl, {\r\n            //     mode: FeatureLayer.MODE_ONDEMAND,\r\n            //     outFields: [\"*\"]\r\n            // });\r\n\r\n        },\r\n\r\n        getUUID() {\r\n            let uuid = crypto.randomUUID();\r\n            uuid = `a${uuid.replace('-', '')}`;\r\n            return uuid;\r\n        },\r\n\r\n        addGraphic(evt) {\r\n            this.toolbarDraw.deactivate();\r\n            this.controllerId = this.controllerId + 1;\r\n            const idPolylineGraphic = this.getUUID();\r\n            const idLabelGraphic = this.getUUID();\r\n            const graphic = new Graphic(evt.geometry, this.lineSymbol, { id: idPolylineGraphic });\r\n            this.map.graphics.add(graphic);\r\n            this.addLabelToCenterLine(evt.geometry, this.currentDistance, idLabelGraphic);\r\n            this.measurements[idPolylineGraphic] = {\r\n                distance: this.currentDistance.toFixed(2),\r\n                // geometry: evt.geometry,\r\n                // extent: evt.geometry.getExtent(),\r\n                idLabel: idLabelGraphic\r\n            }\r\n            this.addRowToTable(this.measurements[idPolylineGraphic], idPolylineGraphic);\r\n            this.map.enableMapNavigation();\r\n            this.map.setInfoWindowOnClick(true);\r\n            this.statusDraw = false;\r\n            // disable snapping\r\n            // this.map.disableSnapping();\r\n        },\r\n\r\n        activateToolDraw(evt) {\r\n            this.anotherToolbar.deactivate();\r\n            const snapManager = this.map.enableSnapping();\r\n            // this.map.enableSnapping();\r\n            snapManager.alwaysSnap = true;\r\n\r\n            const layerInfos = [{\r\n                layer: this.lotFeatureLayer\r\n            }];\r\n            snapManager.setLayerInfos(layerInfos);\r\n\r\n            this.map.disableMapNavigation();\r\n            this.map.setInfoWindowOnClick(false);\r\n            this.statusDraw = true;\r\n            this.currentCoordinates = [];\r\n            this.toolbarDraw.activate('polyline');\r\n        },\r\n\r\n        deactivateToolbarAnotherToolbar() {\r\n            this.toolbarDraw.deactivate();\r\n            this.map.enableMapNavigation();\r\n            this.map.setInfoWindowOnClick(true);\r\n            this.statusDraw = false;\r\n            this.currentDistance = 0.00;\r\n            this.controlMeasurementRealTime.innerHTML = this.currentDistance.toFixed(2);\r\n        },\r\n\r\n        addRowToTable(measurementItem, id) {\r\n            // console.log(measurementItem);\r\n            const row = `\r\n                <tr data-idPolyline=${id}>\r\n                    <td class=\"center-aligned\" contenteditable=\"true\" >\r\n                        ${measurementItem.distance}\r\n                    </td>\r\n                    <td class=\"center-aligned\">\r\n                        <i class=\"fas fa-route\"></i>\r\n                    </td>\r\n                    <td class=\"center-aligned\">\r\n                        <span><i class=\"fas fa-search\"></i></span>\r\n                    </td>\r\n                    <td class=\"center-aligned\">\r\n                        <span style=\"color: #FF5722;\"><i class=\"far fa-trash-alt\"></i></span>\r\n                    </td>\r\n                </tr>\r\n            `\r\n\r\n            // const table = this.controlMeasurementTable.querySelector('tbody');\r\n\r\n            // add function to clic delete row in last column\r\n            this.controlMeasurementTable.insertAdjacentHTML('beforeend', row);\r\n            const deleteRow = this.controlMeasurementTable.querySelector(`tr[data-idPolyline=\"${id}\"] td:last-child`);\r\n            const zoomToGraphic = this.controlMeasurementTable.querySelector(`tr[data-idPolyline=\"${id}\"] td:nth-child(3)`);\r\n            const editDistance = this.controlMeasurementTable.querySelector(`tr[data-idPolyline=\"${id}\"] td:first-child`);\r\n            // add listener when click checkbox\r\n            const convertDivisionLine = this.controlMeasurementTable.querySelector(`tr[data-idPolyline=\"${id}\"] td:nth-child(2)`);\r\n\r\n            deleteRow.addEventListener('click', this.deleteRowTable.bind(this));\r\n            zoomToGraphic.addEventListener('click', this.zoomToGraphic.bind(this));\r\n            // add listener when press enter in cell\r\n            editDistance.addEventListener('keydown', (evt) => {\r\n                if (evt.key === 'Enter') {\r\n                    evt.preventDefault();\r\n                    this.editDistance(evt);\r\n                }\r\n            });\r\n            editDistance.addEventListener('input', this.validateNumericInput);\r\n            convertDivisionLine.addEventListener('click', this.parseToLineDivision.bind(this));\r\n        },\r\n\r\n        validateNumericInput(evt) {\r\n            const value = evt.target.innerText;\r\n            const regex = /^[0-9]*\\.?[0-9]*$/; // Permite números y un punto decimal\r\n\r\n            if (!regex.test(value)) {\r\n                evt.target.innerText = value.slice(0, -1); // Elimina el último carácter si no es válido\r\n            }\r\n        },\r\n\r\n        deleteRowTable(evt) {\r\n            const graphic = this.getGraphicById(evt.currentTarget.parentElement.dataset.idpolyline);\r\n            this.map.graphics.remove(graphic);\r\n            const idLabel = this.measurements[evt.currentTarget.parentElement.dataset.idpolyline].idLabel;\r\n            const graphicLabel = this.getGraphicById(idLabel);\r\n            this.map.graphics.remove(graphicLabel);\r\n            evt.currentTarget.parentElement.remove();\r\n        },\r\n\r\n        zoomToGraphic(evt) {\r\n            const graphic = this.getGraphicById(evt.currentTarget.parentElement.dataset.idpolyline);\r\n            this.map.setExtent(graphic.geometry.getExtent());\r\n        },\r\n\r\n        editDistance(evt) {\r\n            const idPolyline = evt.currentTarget.parentElement.dataset.idpolyline;\r\n            const newDistance = parseFloat(evt.currentTarget.textContent);\r\n            const idLabel = this.measurements[idPolyline].idLabel;\r\n            const polyline = this.getGraphicById(idPolyline).geometry;\r\n            const distance = parseFloat(this.measurements[idPolyline].distance);\r\n            const newGeometry = this.updatePolylineLength(newDistance, distance, polyline);\r\n            if (!newGeometry) {\r\n                return;\r\n            }\r\n\r\n            this.map.graphics.graphics.forEach(graphic => {\r\n                if (graphic.attributes && graphic.attributes.id === idPolyline) {\r\n                    graphic.setGeometry(newGeometry);\r\n                }\r\n            });\r\n\r\n            this.measurements[idPolyline].distance = newDistance.toFixed(2);\r\n            const graphicLabel = this.getGraphicById(idLabel);\r\n            this.map.graphics.remove(graphicLabel);\r\n            this.addLabelToCenterLine(newGeometry, newDistance, idLabel);\r\n\r\n        },\r\n\r\n        parseToLineDivision(evt) {\r\n            const idPolyline = evt.currentTarget.parentElement.dataset.idpolyline;\r\n            const graphic = this.getGraphicById(idPolyline);\r\n            this.callbackAddLineDivision(graphic.geometry);\r\n            this.deleteRowTable(evt);\r\n            // if (evt.currentTarget.checked) {\r\n            //     const graphic = this.getGraphicById(id);\r\n            //     this.callbackAddLineDivision(graphic.geometry);\r\n            //     // this.linearDivision.add(graphic);\r\n            //     // this.map.addLayer(this.linearDivision);\r\n            // } else {\r\n            //     const graphic = this.getGraphicById(id);\r\n\r\n            //     this.linearDivision.remove(graphic);\r\n            // }\r\n        },\r\n\r\n        getGraphicById(id) {\r\n            const graphic = this.map.graphics.graphics.filter(graphic => {\r\n                if (graphic.attributes && graphic.attributes.id === id) {\r\n                    return graphic;\r\n                }\r\n            });\r\n            if (graphic.length === 0) {\r\n                return null;\r\n            }\r\n            return graphic[0];\r\n        },\r\n\r\n        getDistance(arrayPoints) {\r\n            let totalDistance = 0;\r\n            if (arrayPoints.length < 2) {\r\n                return totalDistance;\r\n            }\r\n            for (let i = 0; i < arrayPoints.length - 1; i++) {\r\n                const distance = esri.geometry.getLength(arrayPoints[i], arrayPoints[i + 1]);\r\n                totalDistance += distance;\r\n            }\r\n            return totalDistance;\r\n        },\r\n\r\n        clickIntoMap(evt) {\r\n            if (this.statusDraw) {\r\n                this.currentCoordinates.push(evt.mapPoint);\r\n            }\r\n        },\r\n\r\n        moveMouseMap(evt) {\r\n            if (this.statusDraw) {\r\n                if (this.currentCoordinates.length > 0) {\r\n                    this.currentDistance = esri.geometry.getLength(this.currentCoordinates[this.currentCoordinates.length - 1], evt.mapPoint) + this.getDistance(this.currentCoordinates);\r\n                    this.controlMeasurementRealTime.innerHTML = this.currentDistance.toFixed(2);\r\n                }\r\n            }\r\n        },\r\n\r\n        addLabelToCenterLine(geometry, distance, idLabelGraphic) {\r\n            const midPoint = this.findMidPoint(geometry, distance);\r\n            const xMidPoint = midPoint.geometry.coordinates[0];\r\n            const yMidPoint = midPoint.geometry.coordinates[1];\r\n            const pointLabel = new Point({\r\n                x: xMidPoint,\r\n                y: yMidPoint,\r\n                spatialReference: { wkid: 4326 }\r\n            })\r\n\r\n            const font = new Font(\"15px\", Font.STYLE_NORMAL, Font.VARIANT_NORMAL, Font.WEIGHT_BOLD, \"Arial\");\r\n            const txtSym = new TextSymbol(distance.toFixed(2), font, new Color([87, 88, 90, 1]));\r\n            txtSym.setOffset(0, 0).setAlign(TextSymbol.DECORATION_OVERLINE);\r\n            // //align vertical center\r\n            txtSym.setVerticalAlignment(\"middle\");\r\n            txtSym.setHaloColor(new Color([255, 255, 255]));\r\n            txtSym.setHaloSize(4);\r\n\r\n            // console.log(geometry, midPoint.geometry.coordinates)\r\n            const angle = this.getAngleByLabel(pointLabel, geometry);\r\n            // // rotate text symbol\r\n            txtSym.setAngle(angle);\r\n            const graphicLabel = new Graphic(pointLabel, txtSym, { id: idLabelGraphic });\r\n            this.map.graphics.add(graphicLabel);\r\n            // return idLabelGraphic;\r\n        },\r\n\r\n        findMidPoint(polyline, distance) {\r\n            const polylineGeomUtm = webMercatorUtils.webMercatorToGeographic(polyline)\r\n            const line = turf.lineString(polylineGeomUtm.paths[0]);\r\n            const options = { units: 'meters' };\r\n            const along = turf.along(line, distance / 2, options);\r\n            return along\r\n        },\r\n\r\n        getAngleByLabel(centerPoint, polyline) {\r\n            const polylineGeomUtm = webMercatorUtils.webMercatorToGeographic(polyline)\r\n            const startPoint = polylineGeomUtm.paths[0][0];\r\n            const startPointTurf = turf.point([startPoint[0], startPoint[1]]);\r\n            const centerPointTurf = turf.point([centerPoint.x, centerPoint.y]);\r\n            const slice = turf.lineSlice(startPointTurf, centerPointTurf, turf.lineString(polylineGeomUtm.paths[0]));\r\n            const points = slice.geometry.coordinates.slice(-2);\r\n            let angle = turf.bearing(turf.point(points[0]), turf.point(points[1]));\r\n            angle = angle < 0 ? 180 + angle : angle;\r\n            return angle - 90;\r\n        },\r\n\r\n        updatePolylineLength(newDistamce, distance, polyline) {\r\n            const polylineGeomUtm = webMercatorUtils.webMercatorToGeographic(polyline)\r\n            let vertices = polylineGeomUtm.paths[0];\r\n            if (newDistamce === 0) {\r\n                return false;\r\n            }\r\n            else if (newDistamce < distance) {\r\n                const line = turf.lineString(vertices);\r\n                const options = { units: 'meters' };\r\n                const sliced = turf.lineSliceAlong(line, 0, newDistamce, options);\r\n                vertices = sliced.geometry.coordinates;\r\n            }\r\n            else if (newDistamce > distance) {\r\n                const lastTwoCoords = vertices.slice(-2);\r\n                const line = turf.lineString(lastTwoCoords);\r\n                const bearing = turf.bearing(turf.point(line.geometry.coordinates[0]), turf.point(line.geometry.coordinates[1]));\r\n                const options = { units: 'meters' };\r\n                const addDistance = newDistamce - distance;\r\n                const point = turf.point(line.geometry.coordinates[1]);\r\n                const destintation = turf.destination(point, addDistance, bearing, options);\r\n                vertices[vertices.length - 1] = destintation.geometry.coordinates;\r\n            }\r\n\r\n            // console.log(vertices);\r\n            // map.graphics.clear();\r\n\r\n            polyline = new Polyline({\r\n                paths: [vertices],\r\n                spatialReference: polylineGeomUtm.spatialReference\r\n            });\r\n\r\n            const response = webMercatorUtils.geographicToWebMercator(polyline);\r\n            return response;\r\n            // map.graphics.add(new Graphic(a, lineSymbol));\r\n            // distance = newDistamce;\r\n            // addLabelToCenter(a, distance);\r\n            // window.polyline = a;\r\n            // return vertices;\r\n        },\r\n\r\n        removeAllGraphicsIntoMeasurements() {\r\n            this.controlMeasurementTable.innerHTML = '';\r\n            // iterame this.measurements and delete all graphics by id\r\n            for (const key in this.measurements) {\r\n                const graphic = this.getGraphicById(key);\r\n                this.map.graphics.remove(graphic);\r\n                const idLabel = this.measurements[key].idLabel;\r\n                const graphicLabel = this.getGraphicById(idLabel);\r\n                this.map.graphics.remove(graphicLabel);\r\n            }\r\n            this.measurements = {};\r\n\r\n            this.controlMeasurementRealTime.innerHTML = '0.00';\r\n        },\r\n        // },\r\n    };\r\n    return ToolDraw;\r\n});"]}