{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/components/ToolDraw.js"],"names":["define","Draw","Graphic","CartographicLineSymbol","Color","SnappingManager","FeatureLayer","webMercatorUtils","Font","Point","TextSymbol","turf","ToolDraw","toolbarDraw","map","controlMeasurementRealTime","lotFeatureLayer","anotherToolbar","lineSymbol","statusDraw","currentDistance","currentCoordinates","landsFeature","initToolDraw","on","addGraphic","bind","STYLE_SHORTDASH","setMarker","style","placement","size","clickIntoMap","moveMouseMap","evt","deactivate","graphic","geometry","graphics","add","addLabelToCenterLine","enableMapNavigation","setInfoWindowOnClick","activateToolDraw","snapManager","enableSnapping","layerInfos","layer","setLayerInfos","disableMapNavigation","activate","addRowToTable","getDistance","arrayPoints","totalDistance","length","i","distance","esri","getLength","push","mapPoint","innerHTML","toFixed","midPoint","findMidPoint","xMidPoint","coordinates","yMidPoint","pointLabel","x","y","spatialReference","wkid","font","STYLE_NORMAL","VARIANT_NORMAL","WEIGHT_BOLD","txtSym","setOffset","setAlign","DECORATION_OVERLINE","setVerticalAlignment","setHaloColor","setHaloSize","angle","getAngleByLabel","setAngle","graphicLabel","id","polyline","polylineGeomUtm","webMercatorToGeographic","line","lineString","paths","options","units","along","centerPoint","startPoint","startPointTurf","point","centerPointTurf","slice","lineSlice","points","bearing"],"mappings":"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","file":"ToolDraw.js","sourcesContent":["define([\r\n    'esri/toolbars/draw',\r\n    'esri/graphic',\r\n    'esri/symbols/CartographicLineSymbol',\r\n    'esri/Color',\r\n    'esri/SnappingManager',\r\n    'esri/layers/FeatureLayer',\r\n    'esri/geometry/webMercatorUtils',\r\n    'esri/symbols/Font',\r\n    'esri/geometry/Point',\r\n    'esri/symbols/TextSymbol',\r\n    'https://unpkg.com/@turf/turf@6/turf.min.js',\r\n], function (\r\n    Draw,\r\n    Graphic,\r\n    CartographicLineSymbol,\r\n    Color,\r\n    SnappingManager,\r\n    FeatureLayer,\r\n    webMercatorUtils,\r\n    Font,\r\n    Point,\r\n    TextSymbol,\r\n    turf,\r\n    // getLength,\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene los componentes para la herramienta de dibujo\r\n    */\r\n    const ToolDraw = {\r\n        // @params\r\n        toolbarDraw: null, // @params\r\n        map: null, // @params\r\n        controlMeasurementRealTime: null, // @params\r\n        lotFeatureLayer: null, // @params\r\n        anotherToolbar: null, // @params\r\n\r\n        // @const\r\n        lineSymbol: null,\r\n        statusDraw: false,\r\n        currentDistance: 0,\r\n        currentCoordinates: [],\r\n        landsFeature: null,\r\n\r\n        initToolDraw() {\r\n            this.toolbarDraw = new Draw(this.map);\r\n            this.toolbarDraw.on('draw-end', this.addGraphic.bind(this));\r\n            this.lineSymbol = new CartographicLineSymbol(\r\n                CartographicLineSymbol.STYLE_SHORTDASH,\r\n                new Color([40, 40, 40, 1]),\r\n                3\r\n            )\r\n            this.lineSymbol.setMarker({\r\n                style: 'arrow',\r\n                placement: 'begin-end',\r\n                size: 1\r\n            })\r\n\r\n            this.map.on('click', this.clickIntoMap.bind(this));\r\n            this.map.on('mouse-move', this.moveMouseMap.bind(this));\r\n\r\n            // this.landsFeature = new FeatureLayer(this.lotUrl, {\r\n            //     mode: FeatureLayer.MODE_ONDEMAND,\r\n            //     outFields: [\"*\"]\r\n            // });\r\n\r\n        },\r\n\r\n        addGraphic(evt) {\r\n            this.toolbarDraw.deactivate();\r\n            const graphic = new Graphic(evt.geometry, this.lineSymbol);\r\n            this.map.graphics.add(graphic);\r\n            this.addLabelToCenterLine(evt.geometry, this.currentDistance);\r\n            this.map.enableMapNavigation();\r\n            this.map.setInfoWindowOnClick(true);\r\n            this.statusDraw = false;\r\n            // disable snapping\r\n            // this.map.disableSnapping();\r\n        },\r\n        activateToolDraw(evt) {\r\n            const snapManager = this.map.enableSnapping();\r\n            // this.map.enableSnapping();\r\n            // snapManager.alwaysSnap = true;\r\n\r\n            const layerInfos = [{\r\n                layer: this.lotFeatureLayer\r\n            }];\r\n            snapManager.setLayerInfos(layerInfos);\r\n\r\n            this.map.disableMapNavigation();\r\n            this.map.setInfoWindowOnClick(false);\r\n            this.statusDraw = true;\r\n            this.currentCoordinates = [];\r\n            this.toolbarDraw.activate('polyline');\r\n        },\r\n\r\n        addRowToTable() {\r\n\r\n        },\r\n\r\n        getDistance(arrayPoints) {\r\n            let totalDistance = 0;\r\n            if (arrayPoints.length < 2) {\r\n                return totalDistance;\r\n            }\r\n            for (let i = 0; i < arrayPoints.length - 1; i++) {\r\n                const distance = esri.geometry.getLength(arrayPoints[i], arrayPoints[i + 1]);\r\n                totalDistance += distance;\r\n            }\r\n            return totalDistance;\r\n        },\r\n\r\n        clickIntoMap(evt) {\r\n            if (this.statusDraw) {\r\n                this.currentCoordinates.push(evt.mapPoint);\r\n            }\r\n        },\r\n\r\n        moveMouseMap(evt) {\r\n            if (this.statusDraw) {\r\n                if (this.currentCoordinates.length > 0) {\r\n                    this.currentDistance = esri.geometry.getLength(this.currentCoordinates[this.currentCoordinates.length - 1], evt.mapPoint) + this.getDistance(this.currentCoordinates);\r\n                    this.controlMeasurementRealTime.innerHTML = this.currentDistance.toFixed(2);\r\n                }\r\n            }\r\n        },\r\n\r\n        addLabelToCenterLine(geometry, distance) {\r\n            const midPoint = this.findMidPoint(geometry, distance);\r\n            const xMidPoint = midPoint.geometry.coordinates[0];\r\n            const yMidPoint = midPoint.geometry.coordinates[1];\r\n            const pointLabel = new Point({\r\n                x: xMidPoint,\r\n                y: yMidPoint,\r\n                spatialReference: { wkid: 4326 }\r\n            })\r\n\r\n            const font = new Font(\"15px\", Font.STYLE_NORMAL, Font.VARIANT_NORMAL, Font.WEIGHT_BOLD, \"Arial\");\r\n            const txtSym = new TextSymbol(distance.toFixed(2), font, new Color([87, 88, 90, 1]));\r\n            txtSym.setOffset(0, 0).setAlign(TextSymbol.DECORATION_OVERLINE);\r\n            // //align vertical center\r\n            txtSym.setVerticalAlignment(\"middle\");\r\n            txtSym.setHaloColor(new Color([255, 255, 255]));\r\n            txtSym.setHaloSize(4);\r\n\r\n            // console.log(geometry, midPoint.geometry.coordinates)\r\n            const angle = this.getAngleByLabel(pointLabel, geometry);\r\n            // // rotate text symbol\r\n            txtSym.setAngle(angle);\r\n            const graphicLabel = new Graphic(pointLabel, txtSym, { id: 'asdasd' });\r\n            this.map.graphics.add(graphicLabel);\r\n        },\r\n\r\n        findMidPoint(polyline, distance) {\r\n            const polylineGeomUtm = webMercatorUtils.webMercatorToGeographic(polyline)\r\n            const line = turf.lineString(polylineGeomUtm.paths[0]);\r\n            const options = { units: 'meters' };\r\n            const along = turf.along(line, distance / 2, options);\r\n            return along\r\n        },\r\n\r\n        getAngleByLabel(centerPoint, polyline) {\r\n            const polylineGeomUtm = webMercatorUtils.webMercatorToGeographic(polyline)\r\n            const startPoint = polylineGeomUtm.paths[0][0];\r\n            const startPointTurf = turf.point([startPoint[0], startPoint[1]]);\r\n            const centerPointTurf = turf.point([centerPoint.x, centerPoint.y]);\r\n            const slice = turf.lineSlice(startPointTurf, centerPointTurf, turf.lineString(polylineGeomUtm.paths[0]));\r\n            const points = slice.geometry.coordinates.slice(-2);\r\n            let angle = turf.bearing(turf.point(points[0]), turf.point(points[1]));\r\n            angle = angle < 0 ? 180 + angle : angle;\r\n            return angle - 90;\r\n        }\r\n\r\n        // stringToObjectHtml(htmlString) {\r\n        //     // const htmlObject = dojo.create('div', { innerHTML: htmlString });\r\n        //     // return htmlObject;\r\n        // },\r\n        // renderTableMatrixLand() {\r\n        //     const renderString = `<div class=\"ctnParamsCm\">\r\n        //                 <div class=\"lblParamCm\">\r\n        //                     <span class=\"alignVCenter\">\r\n        //                         Predio matriz\r\n        //                     </span>\r\n        //                 </div>\r\n        //             </div>\r\n        //             <div class=\"ctnParamsCm ctnTablesClsCm\">\r\n        //                 <table class=\"tableClsCm\">\r\n        //                     <thead>\r\n        //                         <tr>\r\n        //                             <th class=\"center-aligned\">Nro</th>\r\n        //                             <th>Cod. Predio<br>Municipal</th>\r\n        //                             <th>Dirección</th>\r\n        //                         </tr>\r\n        //                     </thead>\r\n        //                     <tbody>\r\n        //                         <tr data-id=${this.matrixLand[0].cpm}>\r\n        //                             <td>1</td>\r\n        //                             <td>${this.matrixLand[0].cpm}</td>\r\n        //                             <td>${this.matrixLand[0].address}</td>\r\n        //                         </tr>\r\n        //                     </tbody>\r\n        //                 </table>\r\n        //             </div>`;\r\n        //     return this.stringToObjectHtml(renderString);\r\n        // },\r\n    };\r\n    return ToolDraw;\r\n});"]}