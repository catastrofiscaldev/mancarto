{"version":3,"sources":["../../../../widgets/CartoMaintenanceWgt/components/LandAssignment.js"],"names":["define","Graphic","Circle","Point","LandAssignment","title","lands","pointLots","landsSymbol","landsSymbolSelected","map","graphicLayer","removeGraphic","id","graphic","graphics","find","attributes","type","remove","removeAllGraphics","listGraphics","checkPointLotsSelected","land","pointLot","selectedPointLots","evt","pointLotSelection","target","pointLotSelectionRow","parentNode","landId","dataset","landCpm","cpm","pointLotId","selectedOptions","ID_LOTE","forEach","parseInt","buffer","center","geometry","radius","geodesic","radiusUnit","esri","Units","METERS","xmin","getExtent","xmax","ymin","ymax","x","Math","random","y","landPoint","spatialReference","add","highlightLand","graphicId","currentTarget","g","setSymbol","reestartSymbolLand","stringToObjectHtml","htmlString","htmlObject","dojo","create","innerHTML","renderTableLandAssignment","pointLotsHtml","idx","NOM_VIA","landsHtml","address","join","renderString","addRowToTableLandAssignment","tableBody","document","querySelector","rowHtml","children","length","insertAdjacentHTML"],"mappings":";;AAAAA,OAAO,CACH,cADG,EAEH,sBAFG,EAGH,qBAHG,CAAP,EAIG,UACCC,OADD,EAECC,MAFD,EAGCC,KAHD,EAID;AACE;;;;AAIA,QAAMC,iBAAiB;AACnBC,eAAO,IADY,EACN;AACbC,eAAO,IAFY,EAEN;AACbC,mBAAW,IAHQ,EAGF;AACjBC,qBAAa,IAJM,EAIA;AACnBC,6BAAqB,IALF,EAKQ;AAC3BC,aAAK,IANc,EAMR;AACXC,sBAAc,IAPK,EAOC;;;AAGpBC,qBAVmB,yBAULC,EAVK,EAUD;AACd,gBAAMC,UAAU,KAAKJ,GAAL,CAASK,QAAT,CAAkBA,QAAlB,CAA2BC,IAA3B,CAAgC;AAAA,uBAAWF,QAAQG,UAAR,IAAsBH,QAAQG,UAAR,CAAmBJ,EAAnB,KAA0BA,EAAhD,IAAsDC,QAAQG,UAAR,CAAmBC,IAAnB,KAA4B,MAA7F;AAAA,aAAhC,CAAhB;AACA,iBAAKR,GAAL,CAASK,QAAT,CAAkBI,MAAlB,CAAyBL,OAAzB;AACH,SAbkB;AAcnBM,yBAdmB,+BAcC;AAChB,gBAAMC,4CAAmB,KAAKX,GAAL,CAASK,QAAT,CAAkBA,QAArC,EAAN;AADgB;AAAA;AAAA;;AAAA;AAEhB,qCAAsBM,YAAtB,8HAAoC;AAAA,wBAAzBP,OAAyB;;AAChC,wBAAIA,QAAQG,UAAR,IAAsBH,QAAQG,UAAR,CAAmBC,IAAnB,KAA4B,MAAtD,EAA8D;AAC1D,6BAAKR,GAAL,CAASK,QAAT,CAAkBI,MAAlB,CAAyBL,OAAzB;AACH;AACJ;AANe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOnB,SArBkB;AAsBnBQ,8BAtBmB,oCAsBM;AAAA;AAAA;AAAA;;AAAA;AACrB,sCAAmB,KAAKhB,KAAxB,mIAA+B;AAAA,wBAApBiB,IAAoB;;AAC3B,wBAAI,CAACA,KAAKC,QAAV,EAAoB;AAChB,+BAAO,KAAP;AACH;AACJ;AALoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMrB,mBAAO,IAAP;AACH,SA7BkB;AA8BnBC,yBA9BmB,6BA8BDC,GA9BC,EA8BI;AACnB,gBAAMC,oBAAoBD,IAAIE,MAA9B;AACA,gBAAMC,uBAAuBF,kBAAkBG,UAAlB,CAA6BA,UAA1D;AACA;AACA,gBAAMC,SAASF,qBAAqBG,OAArB,CAA6BnB,EAA5C;AACA,gBAAMoB,UAAUJ,qBAAqBG,OAArB,CAA6BE,GAA7C;AACA,iBAAKtB,aAAL,CAAmBmB,MAAnB;AACA;AACA,gBAAMI,aAAaR,kBAAkBS,eAAlB,CAAkC,CAAlC,EAAqCJ,OAArC,CAA6CnB,EAAhE;AACA;AACA,gBAAMW,WAAW,KAAKjB,SAAL,CAAeS,IAAf,CAAoB;AAAA,uBAAYQ,SAASP,UAAT,CAAoBoB,OAApB,KAAgCF,UAA5C;AAAA,aAApB,CAAjB;AACA;AACA,iBAAK7B,KAAL,CAAWgC,OAAX,CAAmB,gBAAQ;AACvB,oBAAIf,KAAKV,EAAL,KAAY0B,SAASR,MAAT,CAAhB,EAAkC;AAC9BR,yBAAKC,QAAL,GAAgBA,QAAhB;AACH;AACJ,aAJD;;AAMA,gBAAMgB,SAAS,IAAItC,MAAJ,CAAW;AACtBuC,wBAAQjB,SAASkB,QADK;AAEtBC,wBAAQ,GAFc;AAGtBC,0BAAU,IAHY;AAItBC,4BAAYC,KAAKC,KAAL,CAAWC;AAJD,aAAX,CAAf;AAMA,gBAAMC,OAAOT,OAAOU,SAAP,GAAmBD,IAAhC;AACA,gBAAME,OAAOX,OAAOU,SAAP,GAAmBC,IAAhC;AACA,gBAAMC,OAAOZ,OAAOU,SAAP,GAAmBE,IAAhC;AACA,gBAAMC,OAAOb,OAAOU,SAAP,GAAmBG,IAAhC;;AAEA,gBAAMC,IAAIC,KAAKC,MAAL,MAAiBL,OAAOF,IAAxB,IAAgCA,IAA1C;AACA,gBAAMQ,IAAIF,KAAKC,MAAL,MAAiBH,OAAOD,IAAxB,IAAgCA,IAA1C;;AAEA,gBAAMM,YAAY,IAAIvD,KAAJ,CAAUmD,CAAV,EAAaG,CAAb,EAAgBjB,OAAOmB,gBAAvB,CAAlB;AACA,gBAAM7C,UAAU,IAAIb,OAAJ,CAAYyD,SAAZ,EAAuB,KAAKlD,WAA5B,EAAyC,EAAEK,IAAIkB,MAAN,EAAcb,MAAM,MAApB,EAAzC,CAAhB;AACA,iBAAKR,GAAL,CAASK,QAAT,CAAkB6C,GAAlB,CAAsB9C,OAAtB;AACH,SAjEkB;AAmEnB+C,qBAnEmB,yBAmELnC,GAnEK,EAmEA;AAAA;;AACf,gBAAMoC,YAAYpC,IAAIqC,aAAJ,CAAkB/B,OAAlB,CAA0BnB,EAA5C;AACA,iBAAKH,GAAL,CAASK,QAAT,CAAkBA,QAAlB,CAA2BuB,OAA3B,CAAmC,aAAK;AACpC,oBAAI0B,EAAE/C,UAAF,IAAgB+C,EAAE/C,UAAF,CAAaC,IAAb,KAAsB,MAA1C,EAAkD;AAC9C8C,sBAAEC,SAAF,CAAY,MAAKzD,WAAjB;AACH;AACJ,aAJD;;AAMA,gBAAMM,UAAU,KAAKJ,GAAL,CAASK,QAAT,CAAkBA,QAAlB,CAA2BC,IAA3B,CAAgC,aAAK;AACjD,uBAAOgD,EAAE/C,UAAF,IAAgB+C,EAAE/C,UAAF,CAAaJ,EAAb,KAAoBiD,SAA3C;AACH,aAFe,CAAhB;;AAIA,gBAAIhD,OAAJ,EAAa;AACTA,wBAAQmD,SAAR,CAAkB,KAAKxD,mBAAvB;AACH;AACJ,SAlFkB;AAoFnByD,0BApFmB,8BAoFAxC,GApFA,EAoFK;AAAA;;AACpB;AACA,iBAAKhB,GAAL,CAASK,QAAT,CAAkBA,QAAlB,CAA2BuB,OAA3B,CAAmC,aAAK;AACpC,oBAAI0B,EAAE/C,UAAF,IAAgB+C,EAAE/C,UAAF,CAAaC,IAAb,KAAsB,MAA1C,EAAkD;AAC9C8C,sBAAEC,SAAF,CAAY,OAAKzD,WAAjB;AACH;AACJ,aAJD;AAKH,SA3FkB;AA6FnB2D,0BA7FmB,8BA6FAC,UA7FA,EA6FY;AAC3B,gBAAMC,aAAaC,KAAKC,MAAL,CAAY,KAAZ,EAAmB,EAAEC,WAAWJ,UAAb,EAAnB,CAAnB;AACA,mBAAOC,UAAP;AACH,SAhGkB;AAkGnBI,iCAlGmB,uCAkGS;AACxB,gBAAMC,gBAAgB,KAAKnE,SAAL,CAAeG,GAAf,CAAmB,UAACc,QAAD,EAAWmD,GAAX,EAAmB;AACxD,4CAA0BnD,SAASP,UAAT,CAAoBoB,OAA9C,uCACcb,SAASP,UAAT,CAAoB2D,OADlC;AAGH,aAJqB,CAAtB;;AAMA,gBAAMC,YAAY,KAAKvE,KAAL,CAAWI,GAAX,CAAe,UAACa,IAAD,EAAOoD,GAAP,EAAe;AAC5C,wCAAsBpD,KAAKV,EAA3B,kBAA0CU,KAAKW,GAA/C,4CACkByC,MAAM,CADxB,gDAEkBpD,KAAKW,GAFvB,+CAGkBX,KAAKuD,OAHvB,oUASsBJ,cAAcK,IAAd,CAAmB,EAAnB,CATtB;AAaH,aAdiB,CAAlB;;AAgBA,gBAAMC,mOAGmD,KAAK3E,KAHxD,kvBAkBgBwE,UAAUE,IAAV,CAAe,EAAf,CAlBhB,yGAAN;;AAuBA,mBAAO,KAAKZ,kBAAL,CAAwBa,YAAxB,CAAP;AACH,SAjJkB;AAmJnBC,mCAnJmB,yCAmJW;AAC1B,gBAAMC,YAAYC,SAASC,aAAT,CAAuB,0BAAvB,CAAlB;AACA,gBAAMV,gBAAgB,KAAKnE,SAAL,CAAeG,GAAf,CAAmB,UAACc,QAAD,EAAWmD,GAAX,EAAmB;AACxD,4CAA0BnD,SAASP,UAAT,CAAoBoB,OAA9C,uCACcb,SAASP,UAAT,CAAoB2D,OADlC;AAGH,aAJqB,CAAtB;AAKA,iBAAKtE,KAAL,CAAWgC,OAAX,CAAmB,gBAAQ;AACvB,oBAAM+C,iDACY9D,KAAKW,GADjB,wCAEQgD,UAAUI,QAAV,CAAmBC,MAAnB,GAA4B,CAFpC,4CAGQhE,KAAKW,GAHb,2CAIQX,KAAKuD,OAJb,4SAUYJ,cAAcK,IAAd,CAAmB,EAAnB,CAVZ,sGAAN;AAcAG,0BAAUM,kBAAV,CAA6B,WAA7B,EAA0CH,OAA1C;AACH,aAhBD;AAiBH;AA3KkB,KAAvB;AA6KA,WAAOjF,cAAP;AACH,CA3LD","file":"LandAssignment.js","sourcesContent":["define([\r\n    \"esri/graphic\",\r\n    \"esri/geometry/Circle\",\r\n    \"esri/geometry/Point\",\r\n], function (\r\n    Graphic,\r\n    Circle,\r\n    Point,\r\n) {\r\n    /*\r\n    * @description: Objeto que contiene los componentes para la \r\n       asignaciÃ³n de ubicacion de predios\r\n    */\r\n    const LandAssignment = {\r\n        title: null, // @params\r\n        lands: null, // @params\r\n        pointLots: null, // @params\r\n        landsSymbol: null, // @params\r\n        landsSymbolSelected: null, // @params\r\n        map: null, // @params\r\n        graphicLayer: null, // @params\r\n\r\n\r\n        removeGraphic(id) {\r\n            const graphic = this.map.graphics.graphics.find(graphic => graphic.attributes && graphic.attributes.id === id && graphic.attributes.type === 'land');\r\n            this.map.graphics.remove(graphic);\r\n        },\r\n        removeAllGraphics() {\r\n            const listGraphics = [...this.map.graphics.graphics];\r\n            for (const graphic of listGraphics) {\r\n                if (graphic.attributes && graphic.attributes.type === 'land') {\r\n                    this.map.graphics.remove(graphic);\r\n                }\r\n            }\r\n        },\r\n        checkPointLotsSelected() {\r\n            for (const land of this.lands) {\r\n                if (!land.pointLot) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        selectedPointLots(evt) {\r\n            const pointLotSelection = evt.target;\r\n            const pointLotSelectionRow = pointLotSelection.parentNode.parentNode;\r\n            // id of land selected\r\n            const landId = pointLotSelectionRow.dataset.id;\r\n            const landCpm = pointLotSelectionRow.dataset.cpm;\r\n            this.removeGraphic(landId);\r\n            // id of point lot selected\r\n            const pointLotId = pointLotSelection.selectedOptions[0].dataset.id;\r\n            // search point lot selected\r\n            const pointLot = this.pointLots.find(pointLot => pointLot.attributes.ID_LOTE === pointLotId);\r\n            // add point lot to land\r\n            this.lands.forEach(land => {\r\n                if (land.id === parseInt(landId)) {\r\n                    land.pointLot = pointLot;\r\n                }\r\n            });\r\n\r\n            const buffer = new Circle({\r\n                center: pointLot.geometry,\r\n                radius: 0.5,\r\n                geodesic: true,\r\n                radiusUnit: esri.Units.METERS\r\n            });\r\n            const xmin = buffer.getExtent().xmin;\r\n            const xmax = buffer.getExtent().xmax;\r\n            const ymin = buffer.getExtent().ymin;\r\n            const ymax = buffer.getExtent().ymax;\r\n\r\n            const x = Math.random() * (xmax - xmin) + xmin;\r\n            const y = Math.random() * (ymax - ymin) + ymin;\r\n\r\n            const landPoint = new Point(x, y, buffer.spatialReference);\r\n            const graphic = new Graphic(landPoint, this.landsSymbol, { id: landId, type: 'land' });\r\n            this.map.graphics.add(graphic);\r\n        },\r\n\r\n        highlightLand(evt) {\r\n            const graphicId = evt.currentTarget.dataset.id;\r\n            this.map.graphics.graphics.forEach(g => {\r\n                if (g.attributes && g.attributes.type === 'land') {\r\n                    g.setSymbol(this.landsSymbol);\r\n                }\r\n            });\r\n\r\n            const graphic = this.map.graphics.graphics.find(g => {\r\n                return g.attributes && g.attributes.id === graphicId;\r\n            });\r\n\r\n            if (graphic) {\r\n                graphic.setSymbol(this.landsSymbolSelected);\r\n            }\r\n        },\r\n\r\n        reestartSymbolLand(evt) {\r\n            // const graphicId = evt.currentTarget.dataset.id;\r\n            this.map.graphics.graphics.forEach(g => {\r\n                if (g.attributes && g.attributes.type === 'land') {\r\n                    g.setSymbol(this.landsSymbol);\r\n                }\r\n            });\r\n        },\r\n\r\n        stringToObjectHtml(htmlString) {\r\n            const htmlObject = dojo.create('div', { innerHTML: htmlString });\r\n            return htmlObject;\r\n        },\r\n\r\n        renderTableLandAssignment() {\r\n            const pointLotsHtml = this.pointLots.map((pointLot, idx) => {\r\n                return `<option data-id=${pointLot.attributes.ID_LOTE}>\r\n                            ${pointLot.attributes.NOM_VIA}\r\n                        </option>`;\r\n            });\r\n\r\n            const landsHtml = this.lands.map((land, idx) => {\r\n                return `<tr data-id=${land.id} data-cpm=${land.cpm}>\r\n                            <td>${idx + 1}</td>\r\n                            <td>${land.cpm}</td>\r\n                            <td>${land.address}</td>\r\n                            <td>\r\n                                <select class=\"pointLotSelectionCm\">\r\n                                    <option value=\"\" disabled selected>\r\n                                        ---\r\n                                    </option>\r\n                                    ${pointLotsHtml.join('')}\r\n                                </select>\r\n                            </td>\r\n                        </tr>`;\r\n            });\r\n\r\n            const renderString = `<div class=\"ctnParamsCm\">\r\n                        <div class=\"lblParamCm\">\r\n                            <span class=\"alignVCenter\">\r\n                                Graficar predios resultantes de la ${this.title}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ctnParamsCm ctnTablesClsCm\">\r\n                        <table id=\"tableLandsResults\" class=\"tableClsCm\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th class=\"center-aligned\">Nro</th>\r\n                                    <th>Cod. Predio<br>Municipal</th>\r\n                                    <th>DirecciÃ³n</th>\r\n                                    <th class=\"center-aligned\">VÃ­a</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                ${landsHtml.join('')}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>`;\r\n\r\n            return this.stringToObjectHtml(renderString);\r\n        },\r\n\r\n        addRowToTableLandAssignment() {\r\n            const tableBody = document.querySelector('#tableLandsResults tbody');\r\n            const pointLotsHtml = this.pointLots.map((pointLot, idx) => {\r\n                return `<option data-id=${pointLot.attributes.ID_LOTE}>\r\n                            ${pointLot.attributes.NOM_VIA}\r\n                        </option>`;\r\n            });\r\n            this.lands.forEach(land => {\r\n                const rowHtml = `\r\n                    <tr data-id=${land.cpm}>\r\n                        <td>${tableBody.children.length + 1}</td>\r\n                        <td>${land.cpm}</td>\r\n                        <td>${land.address}</td>\r\n                        <td>\r\n                            <select class=\"pointLotSelectionCm\">\r\n                                <option value=\"\" disabled selected>\r\n                                    ---\r\n                                </option>\r\n                                ${pointLotsHtml.join('')}\r\n                            </select>\r\n                        </td>\r\n                    </tr>`;\r\n                tableBody.insertAdjacentHTML('beforeend', rowHtml);\r\n            });\r\n        }\r\n    };\r\n    return LandAssignment;\r\n});"]}